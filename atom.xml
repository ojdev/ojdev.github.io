<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>后山</title>
  
  
  <link href="https://oujun.work/atom.xml" rel="self"/>
  
  <link href="https://oujun.work/"/>
  <updated>2022-12-06T06:52:45.000Z</updated>
  <id>https://oujun.work/</id>
  
  <author>
    <name>欧俊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C# 遗传算法：文字匹配</title>
    <link href="https://oujun.work/2022/12/06/WordMatchGeneticAlgorithm.html"/>
    <id>https://oujun.work/2022/12/06/WordMatchGeneticAlgorithm.html</id>
    <published>2022-12-06T06:06:02.000Z</published>
    <updated>2022-12-06T06:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h1><blockquote><p>遗传算法（Genetic Algorithm，GA）最早是由美国的 John holland于20世纪70年代提出,该算法是根据大自然中生物体进化规律而设计提出的。是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。该算法通过数学的方式,利用计算机仿真运算,将问题的求解过程转换成类似生物进化中的染色体基因的交叉、变异等过程。在求解较为复杂的组合优化问题时,相对一些常规的优化算法,通常能够较快地获得较好的优化结果。遗传算法已被人们广泛地应用于组合优化、机器学习、信号处理、自适应控制和人工生命等领域。</p><p>————摘自《<a href="https://baike.baidu.com/item/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/838140">百度百科</a>》</p></blockquote><p>有一个有趣的小趣闻，一只猴子在打字机上乱敲，如果可以时间无限，那么他可能在某一个时间点，敲出来一套完整的《莎士比亚》全集，猴子敲键盘有随机性的，那么我们增加猴子的数量，就有可能缩短时间。</p><p>我们不需要一套完整的《莎士比亚》，使用编程，我们可以用一个简单的句子来模拟这个实验。</p><h1 id="遗传算法的步骤"><a href="#遗传算法的步骤" class="headerlink" title="遗传算法的步骤"></a>遗传算法的步骤</h1><pre><code class=" mermaid">flowchart TD  A[编码] --&gt; B[初始化种群]  B --&gt; C[评估种群中的个体适应度]  C --&gt; D[选择优秀个体]  D --&gt; E[杂交]  E --&gt; F[变异]  F --&gt; G&#123;种群中的最优个体&#125;  G -- 不匹配 --&gt;C  G -- 完全匹配 --&gt;Q[结束]</code></pre><h1 id="创造猴子"><a href="#创造猴子" class="headerlink" title="创造猴子"></a>创造猴子</h1><p>种群中的每一个个体都是一个猴子，也可以说是一个染色体，染色体中的基因片段就是猴子敲出来的随机字符，我们给定了基因片段的长度，让猴子每次只能敲出这些字符，算出适应度，也就是匹配度。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">GAConsoleApp</span>;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 染色体（猴子）</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Chromosome</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 基因片段</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span>[] Genes &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 适应度</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> Fitness &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;length&quot;&gt;</span>基因长度<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chromosome</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> length</span>)</span><br>    &#123;<br>        Genes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[length];<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;target&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CalcFitness</span>(<span class="hljs-params">Func&lt;Chromosome, <span class="hljs-built_in">double</span>&gt; action</span>)</span><br>    &#123;<br>        Fitness = action.Invoke(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="初始化种群"><a href="#初始化种群" class="headerlink" title="初始化种群"></a>初始化种群</h1><p>种群数量，也就是要有多少只猴子，种群，就是把这些猴子都集中到一起，然后把种群进行初始化，创建出一定数量的猴子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 种群数量</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _populationSize;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 种群</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; Population &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> DNA长度</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _dnaSize;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 从匹配度中选中匹配度最高的多少个作为下一代的父母</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _selectionCount;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Random random;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">char</span>[] _target;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 文字匹配遗传算法</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;populationSize&quot;&gt;</span>种群数量，越多匹配出的越快（人多力量大），但是速度越慢（人多不好统计）<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;target&quot;&gt;</span>要匹配出的目标字符串<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;selectionCount&quot;&gt;</span>每次进化选出多少个作为父母种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WordMatchGeneticAlgorithm</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> populationSize, <span class="hljs-built_in">string</span> target, <span class="hljs-built_in">int</span> selectionCount = <span class="hljs-number">50</span></span>)</span><br>&#123;<br>    _populationSize = populationSize;<br>    Population = <span class="hljs-keyword">new</span> List&lt;Chromosome&gt;();<br>    _dnaSize = target.Length;<br>    _target = target.ToArray();<br>    random = <span class="hljs-keyword">new</span> Random();<br>    _selectionCount = selectionCount;<br>    InitialPopulation();<br>&#125;<br><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 种群初始化</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitialPopulation</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>        Population.Add(<span class="hljs-keyword">new</span> Chromosome(_dnaSize)<br>        &#123;<br>            Genes = Enumerable.Range(<span class="hljs-number">0</span>, _dnaSize).Select((t, i) =&gt; Gene).ToArray()<br>        &#125;);<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 基因</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">char</span> Gene =&gt; (<span class="hljs-built_in">char</span>)random.Next(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>);<br></code></pre></td></tr></table></figure><h1 id="评估适应度"><a href="#评估适应度" class="headerlink" title="评估适应度"></a>评估适应度</h1><p>文字匹配是遗传算法中我个人认为最简单的一种了，适应度匹配也就是让基因片段与我们的目标片段每一个位置都能对应上，对应上的数量越多，匹配度就越高。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 计算匹配度</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Fitness</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>        Population[i].CalcFitness(t =&gt; t.Genes.Select((d, idx) =&gt; d == _target[idx]).Where(t =&gt; t).Count());<br>    <span class="hljs-keyword">return</span> Population;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p> 选出匹配度最高的N个个体作为接下来交叉使用的群体。也就是选出猴子敲出来的字符里面与目标最接近的个体。</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 选择最优种群</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Selection</span>()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> Fitness().OrderByDescending(t =&gt; t.Fitness).Skip(<span class="hljs-number">0</span>).Take(_selectionCount).ToList();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="交叉"><a href="#交叉" class="headerlink" title="交叉"></a>交叉</h1><p>这里采用的是随机取基因中的某个片段进行交叉生成一个新的个体，注释的部分是有些算法中带有这个交叉概率，模拟更真实的进化。所作的就是把猴子敲出来的最好的个体中随机取出两个，把他们中间的一些字符对调成一个新的内容。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 随机交叉（杂交）</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parents&quot;&gt;</span>筛选出的最优种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">CrossOver</span>(<span class="hljs-params">List&lt;Chromosome&gt; parents</span>)</span><br>&#123;<br>    List&lt;Chromosome&gt; children = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; _populationSize; k++)<br>    &#123;<br>        <span class="hljs-comment">//if (random.NextDouble() &lt; 0.04) //交叉概率</span><br>        <span class="hljs-comment">//&#123;</span><br>        Chromosome f = parents[random.Next(_selectionCount)];<br>        Chromosome m = parents[random.Next(_selectionCount)];<br><br>        Chromosome newChild = <span class="hljs-keyword">new</span>(_dnaSize);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _dnaSize; i++)<br>            newChild.Genes[i] = random.Next(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">1</span> ? f.Genes[i] : m.Genes[i];<br>        children.Add(newChild);<br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//else</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//    children.Add(Population[k]);</span><br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="变异"><a href="#变异" class="headerlink" title="变异"></a>变异</h1><p>我们人为的把猴子敲出的字符中的某一个换成一个新的随机字符，让它有几率更接近我们的目标。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 变异</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;children&quot;&gt;</span>杂交后的新种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Mutation</span>(<span class="hljs-params">List&lt;Chromosome&gt; children</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; children.Count; i++)<br>        <span class="hljs-keyword">if</span> (random.NextDouble() &lt;= <span class="hljs-number">0.1</span>)<br>            children[i].Genes[random.Next(_dnaSize)] = Gene;<br>    <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="进化过程"><a href="#进化过程" class="headerlink" title="进化过程"></a>进化过程</h1><p>这个过程就是，选择-&gt;交叉-&gt;变异。不断的重复。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 进化</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Evolve</span>()</span><br>&#123;<br>    <span class="hljs-keyword">var</span> parents = Selection();<br>    <span class="hljs-keyword">var</span> children = CrossOver(parents);<br>    Population = Mutation(children);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 文字匹配遗传算法</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WordMatchGeneticAlgorithm</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 种群数量</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _populationSize;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 种群</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> List&lt;Chromosome&gt; Population &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> DNA长度</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _dnaSize;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 从匹配度中选中匹配度最高的多少个作为下一代的父母</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _selectionCount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Random random;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">char</span>[] _target;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 文字匹配遗传算法</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;populationSize&quot;&gt;</span>种群数量，越多匹配出的越快（人多力量大），但是速度越慢（人多不好统计）<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;target&quot;&gt;</span>要匹配出的目标字符串<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;selectionCount&quot;&gt;</span>每次进化选出多少个作为父母种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WordMatchGeneticAlgorithm</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> populationSize, <span class="hljs-built_in">string</span> target, <span class="hljs-built_in">int</span> selectionCount = <span class="hljs-number">50</span></span>)</span><br>    &#123;<br>        _populationSize = populationSize;<br>        Population = <span class="hljs-keyword">new</span> List&lt;Chromosome&gt;();<br>        _dnaSize = target.Length;<br>        _target = target.ToArray();<br>        random = <span class="hljs-keyword">new</span> Random();<br>        _selectionCount = selectionCount;<br>        InitialPopulation();<br>    &#125;<br><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 种群初始化</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitialPopulation</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>            Population.Add(<span class="hljs-keyword">new</span> Chromosome(_dnaSize)<br>            &#123;<br>                Genes = Enumerable.Range(<span class="hljs-number">0</span>, _dnaSize).Select((t, i) =&gt; Gene).ToArray()<br>            &#125;);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">char</span> Gene =&gt; (<span class="hljs-built_in">char</span>)random.Next(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>);<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算匹配度</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Fitness</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>            Population[i].CalcFitness(t =&gt; t.Genes.Select((d, idx) =&gt; d == _target[idx]).Where(t =&gt; t).Count());<br>        <span class="hljs-keyword">return</span> Population;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 选择最优种群</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Selection</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Fitness().OrderByDescending(t =&gt; t.Fitness).Skip(<span class="hljs-number">0</span>).Take(_selectionCount).ToList();<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 随机交叉（杂交）</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parents&quot;&gt;</span>筛选出的最优种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">CrossOver</span>(<span class="hljs-params">List&lt;Chromosome&gt; parents</span>)</span><br>    &#123;<br>        List&lt;Chromosome&gt; children = <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; _populationSize; k++)<br>        &#123;<br>            <span class="hljs-comment">//if (random.NextDouble() &lt; 0.04) //交叉概率</span><br>            <span class="hljs-comment">//&#123;</span><br>            Chromosome f = parents[random.Next(_selectionCount)];<br>            Chromosome m = parents[random.Next(_selectionCount)];<br><br>            Chromosome newChild = <span class="hljs-keyword">new</span>(_dnaSize);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _dnaSize; i++)<br>                newChild.Genes[i] = random.Next(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">1</span> ? f.Genes[i] : m.Genes[i];<br>            children.Add(newChild);<br>            <span class="hljs-comment">//&#125;</span><br>            <span class="hljs-comment">//else</span><br>            <span class="hljs-comment">//&#123;</span><br>            <span class="hljs-comment">//    children.Add(Population[k]);</span><br>            <span class="hljs-comment">//&#125;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> children;<br>    &#125;<br><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 变异</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;children&quot;&gt;</span>杂交后的新种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Mutation</span>(<span class="hljs-params">List&lt;Chromosome&gt; children</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; children.Count; i++)<br>            <span class="hljs-keyword">if</span> (random.NextDouble() &lt;= <span class="hljs-number">0.1</span>)<br>                children[i].Genes[random.Next(_dnaSize)] = Gene;<br>        <span class="hljs-keyword">return</span> children;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 最优解</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Best</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> fitness = Population.OrderByDescending(x =&gt; x.Fitness).First();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Concat(fitness.Genes);<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 进化</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Evolve</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> parents = Selection();<br>        <span class="hljs-keyword">var</span> children = CrossOver(parents);<br>        Population = Mutation(children);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="模拟开始"><a href="#模拟开始" class="headerlink" title="模拟开始"></a>模拟开始</h1><p>创建一个10000只猴子的种群，每次选择取1&#x2F;3的最优个体，进行10000次的进化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Diagnostics;<br>Stopwatch stopwatch = Stopwatch.StartNew();<br><br><span class="hljs-keyword">var</span> target = <span class="hljs-string">&quot;It was the best of times, it was blurst of times (It was the best of times, it was worst of times) .&quot;</span>;<br><br>WordMatchGeneticAlgorithm ga = <span class="hljs-keyword">new</span>(<span class="hljs-number">10000</span>, target, <span class="hljs-number">10000</span> / <span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br>    <span class="hljs-keyword">var</span> gen = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> best = ga.Best();<br>    <span class="hljs-keyword">if</span> (best == target)<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;gen&#125;</span>\t<span class="hljs-subst">&#123;best&#125;</span>\t成功&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;gen&#125;</span>\t<span class="hljs-subst">&#123;best&#125;</span>&quot;</span>);<br>    ga.Evolve();<br>&#125;<br>stopwatch.Stop();<br>Console.WriteLine(<span class="hljs-string">$&quot;耗时:<span class="hljs-subst">&#123;stopwatch.ElapsedMilliseconds / <span class="hljs-number">1000.0</span>&#125;</span>秒&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs bash">1       ;`&lt;jGnQ<span class="hljs-variable">$Jy</span>%zTc$:aZ+f]P-*FNah1_=,PeV`N)&lt;zf*~xP!jl&#125;4v<span class="hljs-variable">$nYIbHN7IL</span>&gt;W`A+E)o&gt;FXNbe15G&lt;~@Ga?eb9%5E,dngGW6ed~<br>2       [`Ei,&lt;T6SK6N6AeY:y, !SVta&#123;[aIFRR kE;k<span class="hljs-comment">#7liT|]~+G:Pp&#125;^@h@zw%o`JmCjiJ]KUXO6OEeLJ|0V_ZjVX5vh&lt;@1FgDQ&lt;|oZP</span><br>3       .rxh)2&#125;5%n!<span class="hljs-variable">$ba_EM99r</span>)m1M7OS_=w&#123;gv[?ursgL^c4HFHIf<span class="hljs-string">&quot;I.F,2p7Z`m:p/\1\78dg 5l&amp;s6cML9zr8 1v:/L-on|ag&#125;s LYg</span><br><span class="hljs-string">4       t&amp;0PF3XF9IXb9a%&#x27;Yfs~PP+qJ &gt;&lt;mTZ&#125;ccl-zDnKxdK&lt;\Ii3q%6&gt;R`&#125;ny&#125;o!tSfhj7S-0.jU8qy(Y(]3-5I-8&gt;`txSU2Cim~&gt;\@q</span><br><span class="hljs-string">5       Ib X<span class="hljs-variable">$d</span>[.7JY4&amp;Ut Rm=O*Yd.m=UM&#x27;?AsM:lhl*bKlJ&lt;RIT&quot;</span>&lt;r&gt;H5M :sJ9&#123;`=gL,t\[D7w[4a p<span class="hljs-string">&#x27;&#125;B n&lt;s73!bI0e1&#125;xJoZK&gt;\L&#125;</span><br><span class="hljs-string">6       6!l&quot;?2Mg(4BlEIC[o;*Ns]&#x27;</span> <span class="hljs-variable">$_veeUt</span>&lt;IzyEalQt+f&gt;!smkW (,s\+x6Z,KiG66swPt^(<span class="hljs-string">&#x27;&#125;~irLpisHdHx,8Tr-A ,&#125;cn0O@Mx#2</span><br><span class="hljs-string">7       -u9:T 5XLOV%&gt;Lef3f(mitAc hJO@&#x27;</span>N&#125; o?u\w&amp;:JC&amp;,6jfTB8dt=w;os!h<span class="hljs-comment">#:!2&gt;+ e,0)ibk(-dtV )gfQ[e@&#x27;KT7-q&gt;iX&gt;VtWY</span><br>8       oL-Ym%V7g/^V`ZtSjO.r<span class="hljs-comment">#C:A,p:HYhT/4RBKrR]%Q^%AAT$N &gt;r~\&quot;&quot;mFdA%nC.&gt;7r*fpeF-jN,3gIbwa,\^,Bm%UQ -oP&#123;e`) Y</span><br>9       s:o<span class="hljs-string">&quot;a5n9z1~wS&gt;UdoP&gt;v&amp;H&lt;oqp?S;|a64tyuEJz&lt;=[hiN&#123;w&#123;C&#123;\~hBKmQnhJKTc h xf5tYEOa1 q5;Qnnx%o6#,P.WE]_m&lt;k) \</span><br><span class="hljs-string">10      ItF&#x27;@/-tGe y|WttOogqX*e,jvi5 /f)gG&quot;</span>.7sy[-D6[du3~:(yt Iws&#123;tRh|GWsz=q\ qUc]s<span class="hljs-variable">$q</span>:yfQs9b6ErP&#125;+of/PONemcMR<br>11      N?BwEE-&lt;hf7b$(t\of kAveUc %HG&#125;aJ co.rnsKoP?8xdeZ /WrtwOsFm`emr&amp; 3!M4Ti6;eM,rZg <span class="hljs-string">&quot;o9# EWs.&#123;%,ht]Igr)go</span><br><span class="hljs-string">12      Y``ww_[9%eVx;vtCoc Z4OVy3e:v /=O M[Mr[B of(t?4)sp(It &amp;ms Tho&gt;&lt;eQbHXv =ames/Dut*FfiVNoysU )%:t]meKX &amp;</span><br><span class="hljs-string">13      &amp;t!has[a&#125;T~bY0t df tiUzgbb[G wa3jw[qt7t[q2 &#x27;<span class="hljs-variable">$A</span>*s 9I&lt; wnbYtC+<span class="hljs-variable">$9e</span>&quot;</span>;?4S dAme&#123;x4P  iasK:B2Jt7o4T9,~es)C~<br>14      &amp;k dalB^4eNbe2Sgop6+?mfgR.&amp;u uf@g~ST&lt;sgko;ptH]9<span class="hljs-variable">$B</span>(2tLP!sb<span class="hljs-string">&quot;|,jx4s% o&#125;1tfOOfT 30 nLs :o4Zt&lt;ExR0%F]sz .</span><br><span class="hljs-string">15      <span class="hljs-variable">$1</span>-was&#125;Jh|Nbes! ofE&gt;im0s7&#x27;#tf!-;/bl_rsM`iY t6me*\ottM*1? ~hj7bev[ ot tGmeDf Stewa&amp;!FoBs;\p@S;i^~sr3.</span><br><span class="hljs-string">16      y] Mayz`h3 b1at ov timeK, TeXHa^BKlX6st 6f4-d<span class="hljs-variable">$esvdIt</span> ,&#x27;oqthe &lt;qstck# FJmeF,oiTjTa,kw=rst 7f tPdeaTO&#123;</span><br><span class="hljs-string">17      wtlnxs*th( b^dt 11H&quot;</span>iVeA7 5t6cBRM59u&#125;sSvTfBtlmesaB=Gsww-Vt+e.Hesg Lfp-tqbZ<span class="hljs-comment">#`it :asN&#x27;Mrst ~f&amp;yRm_6( .</span><br>18      ntWt!s HLe bdrJ opctiCe],U0t wa8jklwuIt O_ wEme8 AUt wbsK=X&#125; 9eTr zA ji+es,^gA &#125;a/awFXstjFI B=meZ) z<br>19      IQkwas thg ueUtb<span class="hljs-string">&#x27;f tikes, 3S UaJfS5urC&quot;qef&#125;\4m]e ?It was the]b\&quot;~ oJ ti&#123;eJFMi$iwLsKmAAOt7\B timHs)/.</span><br><span class="hljs-string">20      I4Bwas the bO\tTzf 5ime&gt;, it~wT* &#123;lur*tRofntimes (&#x27;</span>t wWs 9ne be5a oD ylGes\ /H Ta$&gt;Gou*tp,fUtiBm8wy.<br>21      It wavSthe beNtjof ti.e(, it waApblrrs?^of tgf-[ 0,t ya&#123;)Uhe se8u rf timesm;;tqna0.wo@sE YN <span class="hljs-comment">#ames)|:</span><br>22      Ir w6s th; bOs&amp; o_9time0, |J was91lur<span class="hljs-comment">#. of&gt;tqmesE(et was q?e be&#125;/ oE times,4iGLPashwdrst/]f (imes) .</span><br>23      It\fFs t^( yOs&#125; o9%timesK]iQ8wassbluUst of t`mer (st<span class="hljs-string">&#x27;was t&lt;e b&gt;sc o6 ti$\s, it ]asGworbt of tikbs) .</span><br><span class="hljs-string">24      St w+s the b-sX=of tiUds, it das &#123;lurst of 9imeH (_t was qhe best Et3timus,Tie w&amp;s&gt;worst ,&#125; tim=rP .</span><br><span class="hljs-string">25      It was tS7qbe~V=of tKmes, 8t wasp~luvst Lf tim9sD(St w$s the bes: ,@Tti/es, it wasSworstGof tiHesw .</span><br><span class="hljs-string">26      It -asIthe Mpwt ol uimeV, it was blurst of#1imesu(|t was the bhst o2 times,  t was qorst )f time1) J</span><br><span class="hljs-string">27      I] was the best of times, it was blurst of times (Itiw[sbthe best o6jtimes] it was wpIst  f tEmes) .</span><br><span class="hljs-string">28      It wa&quot; the best o&#x27;</span> tiUes, itLwOs blur6t of <span class="hljs-built_in">times</span> (IFxwas the besc of yimVs, iD was worst of <span class="hljs-built_in">times</span>)A.<br>29      It was the b`*t of <span class="hljs-built_in">times</span>, itlVas blur(t of tymes (ItUwas the best of Eimes, it was wTSst of :imes)Q.<br>30      It _as the best of tiQes, itEwas blurst of <span class="hljs-built_in">times</span> (It was the %est of <span class="hljs-built_in">times</span>, it was yorQt [f aieeg) .<br>31      It was tLe best of <span class="hljs-built_in">times</span>, it was blurst of <span class="hljs-built_in">times</span> (It was the nkst of <span class="hljs-built_in">times</span>, it was wonst o3 <span class="hljs-built_in">times</span>) .<br>32      It was the best of <span class="hljs-built_in">times</span>, it was blurst of <span class="hljs-built_in">times</span> (It 6as the best of tiMes, it was worst of <span class="hljs-built_in">times</span>) .<br>33      It wab the best of <span class="hljs-built_in">times</span>, it was blurst of <span class="hljs-built_in">times</span> (It was  he best of <span class="hljs-built_in">times</span>, it[was worst of <span class="hljs-built_in">times</span>) .<br>34      It was the bestoof <span class="hljs-built_in">times</span>, it was blurst of <span class="hljs-built_in">times</span> (It was the best of <span class="hljs-built_in">times</span>, it was worst of <span class="hljs-built_in">times</span>) .<br>35      It was`the best of <span class="hljs-built_in">times</span>, it was blurst of <span class="hljs-built_in">times</span> (It was the best of <span class="hljs-built_in">times</span>, it was worst of <span class="hljs-built_in">times</span>) .<br>36      It was the best of <span class="hljs-built_in">times</span>, it was blurst of <span class="hljs-built_in">times</span> (It was the best of <span class="hljs-built_in">times</span>, it was worst of <span class="hljs-built_in">times</span>) .    成功<br>耗时:1.961秒<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;遗传算法&quot;&gt;&lt;a href=&quot;#遗传算法&quot; class=&quot;headerlink&quot; title=&quot;遗传算法&quot;&gt;&lt;/a&gt;遗传算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;遗传算法（Genetic Algorithm，GA）最早是由美国的 John holland于20</summary>
      
    
    
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term=".net" scheme="https://oujun.work/tags/net/"/>
    
    <category term="遗传算法" scheme="https://oujun.work/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term="文字匹配" scheme="https://oujun.work/tags/%E6%96%87%E5%AD%97%E5%8C%B9%E9%85%8D/"/>
    
    <category term="密码匹配" scheme="https://oujun.work/tags/%E5%AF%86%E7%A0%81%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>什么是实体</title>
    <link href="https://oujun.work/2022/10/26/what-is-an-entity.html"/>
    <id>https://oujun.work/2022/10/26/what-is-an-entity.html</id>
    <published>2022-10-26T03:00:00.000Z</published>
    <updated>2022-10-26T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实体是什么"><a href="#实体是什么" class="headerlink" title="实体是什么"></a>实体是什么</h1><p>实体本身就是一个<code>class</code>，一个类，只是它是作为一个对应到现实中的实际个体的类，比如人类，比如猫，在软件开发中则大多对应的是数据库表，在面向对象的设计中，我们大多配合五项基本原则（SOLID）</p><h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><p>单一的职责，这个人就是保安、这个人就是会计、这个人就是保洁，而不是通过if else来判断这个人是做什么的。</p><h2 id="开放封闭"><a href="#开放封闭" class="headerlink" title="开放封闭"></a>开放封闭</h2><p>简单理解，就是我们调用方法的对象都是由接口创建的，我们提供出去的接口可以被重新实现已替换接口的实际内容；或者提供抽象重写的方式。</p><h1 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h1><h1 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h1><p>顶部设计不应该依赖底层实现，这个的意思就是顶层设计是键盘，底层实现则是机械键盘、膜键盘，108键键盘，87键键盘；现有键盘才有的不同类型的键盘。</p><h1 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h1><p>还是用上面的键盘举例子，键盘的作用就是打字，所以提供的接口也就是打字的功能，至于机械键盘的可更换键帽、可更换轴这些，如果用户不需要则不应该暴露给用户。</p><p>然而大多数的在动手开发前虽然设计的很好，但是往往开发过程中为了加速开发进程就会造成放飞自我的行为导致实体中出现多余内容，虽然也不是不行，但是这就会造成虽然做了架构，但是没有完全做架构的行为对后续的维护交接都会引起一些不可避免的问题。</p><h1 id="怎么做实体"><a href="#怎么做实体" class="headerlink" title="怎么做实体"></a>怎么做实体</h1><p>首先明白了实体是对应现实中的某中实际个体，那么就是明确它有哪些属性，它能做什么；以前流行一种贫血设计模式，就是实体类，只是类，里面只有构造方法，没有其他内容，产生的变更都是通过其他的Service或者Manager进行的。</p><p>我们后来的开发中都采用的满血的设计或者说是残血的设计，实体中的属性都是<code>private set</code>的，这样保证了外部无法进行更改，我们会提供一个修改该属性的接口来保证属性的变更都是满足限制的，且有的时候进行一个属性的变更可可以直接联动其他的属性变更或者行为；</p><p>例如我们常用的鼠标，它的属性包括规格，重量，连接方式等，但是它的行为之后滚轮滚动，左键按下，右键按下；拖动、双击都是由外界的人为产生的而不是鼠标本身的功能</p><pre><code class=" mermaid">classDiagram    class Mouse    Mouse : +LeftButtonDown()    Mouse : +LeftButtonDown()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实体是什么&quot;&gt;&lt;a href=&quot;#实体是什么&quot; class=&quot;headerlink&quot; title=&quot;实体是什么&quot;&gt;&lt;/a&gt;实体是什么&lt;/h1&gt;&lt;p&gt;实体本身就是一个&lt;code&gt;class&lt;/code&gt;，一个类，只是它是作为一个对应到现实中的实际个体的类，比如人类，</summary>
      
    
    
    
    <category term=".Net" scheme="https://oujun.work/categories/Net/"/>
    
    
    <category term="微服务" scheme="https://oujun.work/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="软件开发" scheme="https://oujun.work/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Python的pyecharts包画关系图</title>
    <link href="https://oujun.work/2022/07/13/python-pyecharts-graph.html"/>
    <id>https://oujun.work/2022/07/13/python-pyecharts-graph.html</id>
    <published>2022-07-13T13:16:00.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用csv格式的文件存储关系，第一个为主节点，第二列为子节点，就像如下的形式</p><table><thead><tr><th>主节点</th><th>子节点</th></tr></thead><tbody><tr><td>节点1</td><td>节点A</td></tr><tr><td>节点1</td><td>节点B</td></tr><tr><td>节点1</td><td>节点C</td></tr><tr><td>节点B</td><td>节点N</td></tr><tr><td>节点C</td><td>节点N</td></tr></tbody></table><p>下面是python代码，先安装pyecharts<code>pip(3) install pyecharts</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> color<br><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Graph<br><br>csv_reader = csv.reader(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./relation.csv&quot;</span>))<br>systems = []<br>relation=[]<br><span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> csv_reader:<br>    l = left[<span class="hljs-number">0</span>]; r = left[<span class="hljs-number">1</span>];<br>    relation.append(&#123;<span class="hljs-string">&quot;main&quot;</span>:l,<span class="hljs-string">&quot;sub&quot;</span>:r&#125;)<br>    systems.append(l)  <br>    systems.append(r) <br><br><span class="hljs-comment"># 节点</span><br>nodes = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(systems)):<br>    nodes.append(&#123;<span class="hljs-string">&quot;name&quot;</span>: i, <span class="hljs-string">&quot;symbolSize&quot;</span>: <span class="hljs-number">15</span>&#125;)<span class="hljs-comment">#systems.count(i) 10就是点的大小</span><br><br><span class="hljs-comment"># 关系</span><br>links = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nodes:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> relation:<br>        <span class="hljs-keyword">if</span>(i.get(<span class="hljs-string">&quot;name&quot;</span>) == j.get(<span class="hljs-string">&quot;main&quot;</span>)):<br>            links.append(&#123;<span class="hljs-string">&quot;source&quot;</span>: i.get(<span class="hljs-string">&quot;name&quot;</span>), <span class="hljs-string">&quot;target&quot;</span>: j.get(<span class="hljs-string">&quot;sub&quot;</span>)&#125;)<br><br><span class="hljs-comment">#输出网页</span><br>c = (<br>    Graph(init_opts=opts.InitOpts(         <br>        width=<span class="hljs-string">&quot;1800px&quot;</span>,  <span class="hljs-comment"># 网页分辨率</span><br>        height=<span class="hljs-string">&quot;1000px&quot;</span>,  <span class="hljs-comment"># 网页分辨率</span><br>        bg_color=<span class="hljs-string">&quot;#F2F2F2&quot;</span>, <span class="hljs-comment"># 背景色 注释掉就没颜色</span><br>        ))<br>    .add(<br>        <span class="hljs-comment"># https://pyecharts.org/#/zh-cn/basic_charts?id=graph%ef%bc%9a%e5%85%b3%e7%b3%bb%e5%9b%be</span><br>        <span class="hljs-string">&quot;&quot;</span>, <br>        nodes, <br>        links, <br>        repulsion = <span class="hljs-number">100</span>, <span class="hljs-comment">#引力值 数越大，点之间弹的越大</span><br>       <span class="hljs-comment"># edge_length = 30, # 调整点之间的距离，受上面的repulsion影响</span><br>        symbol=<span class="hljs-string">&quot;roundRect&quot;</span>, <span class="hljs-comment"># 点的形状 triangle 三角形 ，circle 圆形， rect 方形，roundRect 圆角方形， diamond 菱形，pin 图钉 ，arrow 箭头,none 只有线</span><br>       <span class="hljs-comment"># layout=&quot;circular&quot;, # 布局 是环形， force 是引力型</span><br>       <span class="hljs-comment"># linestyle_opts=opts.LineStyleOpts(curve=0.2), #直线或者弧线</span><br>       <span class="hljs-comment"># label_opts=opts.LabelOpts(is_show=False), # 直接显示标签或者鼠标放上去显示标签，</span><br>       <span class="hljs-comment"># linestyle_opts=opts.LineStyleOpts(color=&quot;#feb64d&quot;), # 线颜色</span><br>       itemstyle_opts=opts.ItemStyleOpts(color=<span class="hljs-string">&quot;#151EBF&quot;</span>), <span class="hljs-comment"># 图标颜色 注释掉就是红色</span><br>       <span class="hljs-comment"># 挑配色的网站  https://color.adobe.com/zh/explore/newest/</span><br><br>    )<br>    .set_global_opts(<br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;自己改名&quot;</span>), <span class="hljs-comment"># 标题</span><br>        ) <br>    .render(<span class="hljs-string">&quot;graph_base.html&quot;</span>)<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们使用csv格式的文件存储关系，第一个为主节点，第二列为子节点，就像如下的形式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主节点&lt;/th&gt;
&lt;th&gt;子节点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;节点1&lt;/td&gt;
&lt;td&gt;节</summary>
      
    
    
    
    <category term="知识储备" scheme="https://oujun.work/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
    <category term="架构" scheme="https://oujun.work/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="Python" scheme="https://oujun.work/tags/Python/"/>
    
    <category term="pyecharts" scheme="https://oujun.work/tags/pyecharts/"/>
    
    <category term="关系图" scheme="https://oujun.work/tags/%E5%85%B3%E7%B3%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>台电玲珑S小主机做旁路由</title>
    <link href="https://oujun.work/2022/06/16/teclast-n5095-pve.html"/>
    <id>https://oujun.work/2022/06/16/teclast-n5095-pve.html</id>
    <published>2022-06-16T13:38:00.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="台电-玲珑S-2-5L小主机"><a href="#台电-玲珑S-2-5L小主机" class="headerlink" title="台电 玲珑S 2.5L小主机"></a>台电 玲珑S 2.5L小主机</h1><p>之前用的是星际蜗牛矿渣，一直放在哈尔滨的家里，到上海工作后买了个小米ax1800，没有U口，所以，也就没有什么扩展性，后来虽然找到了shell版的openclash，但是性能还是太差，配置起来也比较麻烦，所以前几天发现了618的活动，899入手了<a href="https://www.intel.cn/content/www/cn/zh/products/sku/212322/intel-celeron-processor-n5095-4m-cache-up-to-2-90-ghz/specifications.html">N5095</a>+8G D4+256G固态，因为是做nas的所以没选择wifi模块。到货后感觉还不错，送了硬盘线，鼠标垫和键鼠套，还带了根成品网线。</p><p>系统自带的windows 10 家庭版，所以直接系统就做了proxmox ve，所以也没仔细看配置，后续找了下相关的配置。</p><table><thead><tr><th>硬件</th><th>参数</th><th>其他</th></tr></thead><tbody><tr><td>CPU</td><td>Intel(R) Celeron(R) N5095 @ 2.00GHz</td><td>11代，4核，15w，支持虚拟化，21年第一季度发布</td></tr><tr><td>内存</td><td>8G</td><td>台电自己的</td></tr><tr><td>硬盘</td><td>256G</td><td>Teclast YT 256GB SSD</td></tr><tr><td>网卡</td><td>Realtek Semiconductor Co., Ltd. RTL8111&#x2F;8168&#x2F;8411</td><td></td></tr></tbody></table><p>没播放视频，不知道是否真的能做到4k60硬解，但是看了一些其他的评测，据说不行。顺便说，BIOS是台电自己定制的，而且直接有超频选项，虽然对于我来说没用处。不过相对其他多口软路由的那种不知道啥主板的BIOS，也没啥设置的，甚至连虚拟化配置都阉割掉（曾经买的一台I5 5210U的6口软路由，写的I5 4200U，发的I5 5210U）的，这个好多了。</p><h1 id="ProxmoxVE"><a href="#ProxmoxVE" class="headerlink" title="ProxmoxVE"></a>ProxmoxVE</h1><p>安装过程略过，进入系统后两件事，第一是修改源，第二还是修改源<br><code>nano /etc/apt/source.list</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com/debian bullseye main contrib<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com/debian bullseye-updates main contrib<br><br><span class="hljs-comment"># security updates</span><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com/debian-security bullseye-security main contrib<br></code></pre></td></tr></table></figure><p><code>ctrl + x ,y</code>保存，更换成阿里云的源。</p><p>我们再更换一个源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.bak<br>nano /etc/apt/sources.list.d/pve-no-enterprise.list<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//</span>download.proxmox.com<span class="hljs-regexp">/debian/</span>pve bullseye pve-no-subscription<br></code></pre></td></tr></table></figure><p><code>ctrl + x ,y</code>保存后我们再进行更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update<br>apt upgrade -y<br></code></pre></td></tr></table></figure><h1 id="定制一个自己的openwrt"><a href="#定制一个自己的openwrt" class="headerlink" title="定制一个自己的openwrt"></a>定制一个自己的openwrt</h1><p>现在有了可以在线定制的openwrt，这是真的很方便的，<a href="https://supes.top/">https://supes.top/</a>，根据自己的需要对其进行定制，目前没有专门的xray的客户端插件，所以还是选择了SSR-Plus ，看过一些评测，我比较懒，没有专门去做测试，据说性能是<code>SSR-Plus &gt;PassWall2 &gt;OpenClash</code>。<br>一般的选项如下</p><table><thead><tr><th>内容</th><th>值</th></tr></thead><tbody><tr><td>所需软件包 (包名用空格隔开)</td><td></td></tr><tr><td>互联网</td><td>SSR-Plus</td></tr><tr><td>默认主题</td><td>Argon</td></tr><tr><td>后台地址</td><td>设置自己的本地环境的IP地址,例如 192.168.0.253</td></tr><tr><td>后台密码</td><td></td></tr><tr><td>Web服务器</td><td>Uhttpd</td></tr><tr><td>旁路由模式</td><td>√</td></tr><tr><td>IPv4 网关</td><td>主路由的地址，例如192.168.0.1</td></tr><tr><td>DHCP 服务器</td><td>不要勾选</td></tr><tr><td>EFI镜像</td><td>√</td></tr><tr><td>主机名</td><td>随你喜欢</td></tr><tr><td>ROOTFS.TAR.GZ (用于Docker或LXC等容器)</td><td>√ 仅限赞助用户</td></tr></tbody></table><p>我赞助了10元，一个月的有效期，所以直接构建后得到了<code>openwrt-月.日.年-x86-64-generic-rootfs.tar.gz</code> 文件。</p><p>下载后打开pve的管理端，选中local(pve)存储上，选择右边的CT模板，点上传，选择我们得到的tar.gz文件，点击确定，我们就得到了一个ct模板。</p><p>不能用右上角的那个创建CT按钮创建主机，会报错。我们ssh登录到pve中使用命令进行创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">pct create 100 \<br>local:local:vztmpl/openwrt-月.日.年-x86-64-generic-rootfs.tar.gz \<br>--rootfs local-lvm:2 \<br>--ostype unmanaged \<br>--hostname openwrt \<br>--arch amd64 \<br>--cores 1 \<br>--memory 512 \<br>--swap 0 \<br>-net0 bridge=vmbr0,name=eth0<br></code></pre></td></tr></table></figure><p>然后回到web端的管理界面启动就好了，因为IP是我们前面定制好的，所以不需要进行修改，如果需要的话，直接选中控制台，然后按回车使用<code>vi /etc/config/network</code>进行修改，改完之后记得重启，可以使用<code>reboot</code>直接重启，或者使用<code>/etc/init.d/network restart</code>只重启网络。</p><p>然后我们在浏览器就可以使用<code>192.168.0.253</code>登录到openwrt中了。</p><h1 id="旁路由配置"><a href="#旁路由配置" class="headerlink" title="旁路由配置"></a>旁路由配置</h1><p>我喜欢最少的更改，就是dhcp依然是主路由，但是网关由旁路由来做。</p><table><thead><tr><th>旁路由</th><th>主路由</th></tr></thead><tbody><tr><td>网络-&gt;LAN-&gt;编辑-&gt;常规设置</td><td>(小米ax1800)常用设置-&gt;局域网设置，定位到DHCP服务</td></tr><tr><td>（高级设置）使用自定义的 DNS 服务器：223.5.5.5</td><td>DNS1 ：192.168.0.253</td></tr><tr><td>IPv4 网关: 192.168.0.1</td><td>默认网关：192.168.0.253</td></tr></tbody></table><p>主路由设置完之后需要重启，路由下的网络设备会重新获取IP，获取到的网络配置中网关就自动更新为旁路由的IP地址，就可以正常使用了。</p><h1 id="附加价值1"><a href="#附加价值1" class="headerlink" title="附加价值1"></a>附加价值1</h1><p>配置<code>SSR-Plus</code>，直接生效，N5095油管8k效果很稳定。<br><img src="/assets/xray-ytb-statistics.png"></p><h1 id="附加价值2：docker"><a href="#附加价值2：docker" class="headerlink" title="附加价值2：docker"></a>附加价值2：docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | sudo apt-key add -<br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | apt-key add -<br>lsb_release -cs<br>add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian $(lsb_release -cs) stable&quot;<br>apt update<br>apt upgrade -y<br>apt install docker-ce<br>apt install docker-compose<br></code></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><ul><li><input checked="" disabled="" type="checkbox"> frpc</li><li><input checked="" disabled="" type="checkbox"> jellyfin</li><li><input checked="" disabled="" type="checkbox"> qbittorrent</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">frpc:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">snowdreamtech/frpc:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">frpc</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">&#x27;host&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/frpc/frpc.ini:/etc/frp/frpc.ini</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">jellyfin:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">lscr.io/linuxserver/jellyfin:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">jellyfin</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shangehai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/jellyfin/library:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/tvseries:/data/tvshows</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/movies:/data/movies</span><br>    <span class="hljs-attr">devices:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/dri:/dev/dri</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8096</span><span class="hljs-string">:8096</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8920</span><span class="hljs-string">:8920</span> <span class="hljs-comment">#optional</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7359</span><span class="hljs-string">:7359/udp</span> <span class="hljs-comment">#optional</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">1900</span><span class="hljs-string">:1900/udp</span> <span class="hljs-comment">#optional</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>  <span class="hljs-attr">qbittorrent:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">lscr.io/linuxserver/qbittorrent:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">qbittorrent</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shangehai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WEBUI_PORT=8080</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/qbittorrent/config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config:/downloads</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6881</span><span class="hljs-string">:6881</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6881</span><span class="hljs-string">:6881/udp</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;台电-玲珑S-2-5L小主机&quot;&gt;&lt;a href=&quot;#台电-玲珑S-2-5L小主机&quot; class=&quot;headerlink&quot; title=&quot;台电 玲珑S 2.5L小主机&quot;&gt;&lt;/a&gt;台电 玲珑S 2.5L小主机&lt;/h1&gt;&lt;p&gt;之前用的是星际蜗牛矿渣，一直放在哈尔滨的家里</summary>
      
    
    
    
    <category term="家庭服务" scheme="https://oujun.work/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="知识储备" scheme="https://oujun.work/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
    <category term="Openwrt" scheme="https://oujun.work/tags/Openwrt/"/>
    
    <category term="ProxmoxVE" scheme="https://oujun.work/tags/ProxmoxVE/"/>
    
    <category term="旁路由" scheme="https://oujun.work/tags/%E6%97%81%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>【Devops】 - Azure Devops的代理池：封装一个自己的代理池镜像</title>
    <link href="https://oujun.work/2022/06/11/devops-build-agent-pool.html"/>
    <id>https://oujun.work/2022/06/11/devops-build-agent-pool.html</id>
    <published>2022-06-11T13:08:08.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>生成代理也是一台机器，是可以给AzureDevops远程调用的机器，它的功能就是想手动对程序进行生成编译一样的封装的自动化操作，它的动作包括拉取代码，按照生成逻辑进行编译，封装镜像，推送镜像，部署的过程，但是如果编译频繁，那么一台生成代理可能是不够的，所以我们封装一个docker镜像，随时部署，或者部署到多个地方进行分摊。</p><p>新建一个<code>start.sh</code>,将下面的代码段存入其中，它的主要功能就是使用环境变量对代理池进行配置与启动，就是我们新建代理池的时候要执行的<code>./config.sh</code>配置与<code>./run.sh</code>启动代理池的操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -e<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_URL</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;error: missing AZP_URL environment variable&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;error: missing AZP_TOKEN environment variable&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br><br>  AZP_TOKEN_FILE=/azp/.token<br>  <span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$AZP_TOKEN</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">unset</span> AZP_TOKEN<br><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_WORK</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_WORK</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">export</span> AGENT_ALLOW_RUNASROOT=<span class="hljs-string">&quot;1&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">cleanup</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [ -e config.sh ]; <span class="hljs-keyword">then</span><br>    print_header <span class="hljs-string">&quot;Cleanup. Removing Azure Pipelines agent...&quot;</span><br><br>    <span class="hljs-comment"># If the agent has some running jobs, the configuration removal process will fail.</span><br>    <span class="hljs-comment"># So, give it some time to finish the job.</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>      ./config.sh remove --unattended --auth PAT --token $(<span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span>) &amp;&amp; <span class="hljs-built_in">break</span><br><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Retrying in 30 seconds...&quot;</span><br>      <span class="hljs-built_in">sleep</span> 30<br>    <span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">print_header</span></span>() &#123;<br>  lightcyan=<span class="hljs-string">&#x27;\033[1;36m&#x27;</span><br>  nocolor=<span class="hljs-string">&#x27;\033[0m&#x27;</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;lightcyan&#125;</span>$1<span class="hljs-variable">$&#123;nocolor&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># Let the agent ignore the token env variables</span><br><span class="hljs-built_in">export</span> VSO_AGENT_IGNORE=AZP_TOKEN,AZP_TOKEN_FILE<br><br>print_header <span class="hljs-string">&quot;1. Determining matching Azure Pipelines agent...&quot;</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_AGENT_PACKAGE_LATEST_URL</span>&quot;</span> -o <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_AGENT_PACKAGE_LATEST_URL</span>&quot;</span> == <span class="hljs-string">&quot;null&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;error: could not determine a matching Azure Pipelines agent&quot;</span><br>  <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;check that account &#x27;<span class="hljs-variable">$AZP_URL</span>&#x27; is correct and the token is valid for that account&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>print_header <span class="hljs-string">&quot;2. Downloading and extracting Azure Pipelines agent...&quot;</span><br><br>curl -LsS <span class="hljs-variable">$AZP_AGENT_PACKAGE_LATEST_URL</span> | tar -xz &amp; <span class="hljs-built_in">wait</span> $!<br><br>bash ./bin/installdependencies.sh<br><br><span class="hljs-built_in">source</span> ./env.sh<br><br>print_header <span class="hljs-string">&quot;3. Configuring Azure Pipelines agent...&quot;</span><br><br>./config.sh --unattended \<br>  --agent <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;AZP_AGENT_NAME:-$(hostname)&#125;</span>&quot;</span> \<br>  --url <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_URL</span>&quot;</span> \<br>  --auth PAT \<br>  --token $(<span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span>) \<br>  --pool <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;AZP_POOL:-Default&#125;</span>&quot;</span> \<br>  --work <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;AZP_WORK:-_work&#125;</span>&quot;</span> \<br>  --replace \<br>  --acceptTeeEula &amp; <span class="hljs-built_in">wait</span> $!<br><br>print_header <span class="hljs-string">&quot;4. Running Azure Pipelines agent...&quot;</span><br><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;cleanup; exit 0&#x27;</span> EXIT<br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;cleanup; exit 130&#x27;</span> INT<br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;cleanup; exit 143&#x27;</span> TERM<br><br><span class="hljs-built_in">chmod</span> +x ./run.sh<br><br><span class="hljs-comment"># To be aware of TERM and INT signals call run.sh</span><br><span class="hljs-comment"># Running it with the --once flag at the end will shut down the agent after the build is executed</span><br>./run.sh <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> &amp; <span class="hljs-built_in">wait</span> $!<br></code></pre></td></tr></table></figure><p>随后我们在同目录下创建一个dockerfile文件，用来对环境进行镜像封装。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> debian:<span class="hljs-number">11.3</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://ftp.debian.org@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://security.debian.org@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://deb.debian.org@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get upgrade -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y -qq --no-install-recommends \</span><br><span class="language-bash">    apt-transport-https \</span><br><span class="language-bash">    apt-utils \</span><br><span class="language-bash">    ca-certificates \</span><br><span class="language-bash">    curl \</span><br><span class="language-bash">    git \</span><br><span class="language-bash">    iputils-ping \</span><br><span class="language-bash">    jq \</span><br><span class="language-bash">    lsb-release \</span><br><span class="language-bash">    tar \</span><br><span class="language-bash">    software-properties-common</span><br><br><span class="hljs-comment"># Can be &#x27;linux-x64&#x27;, &#x27;linux-arm64&#x27;, &#x27;linux-arm&#x27;, &#x27;rhel.6-x64&#x27;.</span><br><span class="hljs-keyword">ENV</span> TARGETARCH=linux-x64<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /azp</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./start.sh .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x start.sh</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="hljs-string">&quot;./start.sh&quot;</span> ]</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t azp-azent:debian.11.3 .<br>docker push azp-azent:debian.11.3<br><br><br><span class="hljs-comment">#docker build -t privatedocker.xxx.xxx/namespace/azp-azent:debian.11.3 .</span><br><span class="hljs-comment">#docker push privatedocker.xxx.xxx/namespace/azp-azent:debian.11.3</span><br></code></pre></td></tr></table></figure><p>如此就打包完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生成代理也是一台机器，是可以给AzureDevops远程调用的机器，它的功能就是想手动对程序进行生成编译一样的封装的自动化操作，它的动作包括拉取代码，按照生成逻辑进行编译，封装镜像，推送镜像，部署的过程，但是如果编译频繁，那么一台生成代理可能是不够的，所以我们封装一个doc</summary>
      
    
    
    
    <category term="DevOps" scheme="https://oujun.work/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://oujun.work/tags/Docker/"/>
    
    <category term="Azure Devops" scheme="https://oujun.work/tags/Azure-Devops/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法学习</title>
    <link href="https://oujun.work/2022/05/31/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html"/>
    <id>https://oujun.work/2022/05/31/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html</id>
    <published>2022-05-31T13:56:08.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是遗传算法"><a href="#什么是遗传算法" class="headerlink" title="什么是遗传算法"></a>什么是遗传算法</h1><p>遗传算法一般的解释就是模拟达尔文生物进化论和遗传学对生物的进化过程的模拟，用迭代进化的方式得到最优解的方法，其实我了解这个东西有段时间了，但是一直也没有完整的去学习过。</p><p>遗传算法的执行过程一般是先有一个<code>种群</code>，不论什么东西进化都是从一个种群进化到另一个种群，优胜劣汰，<code>种群</code>中的每一个个体都有一组<code>基因</code>，也有把这个叫做<code>染色体</code>的。</p><p>生物都有染色体，他们繁殖出的后代都是从父母双亲的染色体中各取一部分生成一个新的个体。</p><p>中间略过……</p><p>编码-&gt;初始化种群</p><p>评估种群中个体适应度-&gt;选择-&gt;交叉-&gt;变异-&gt;回到评估</p><pre><code class=" mermaid">graph TD  编码 --&gt; 初始化种群  初始化种群 --&gt; 评估适应度  评估适应度 --&gt; 选择  选择 --&gt; 交叉  交叉 --&gt; 变异  变异 --&gt; 评估适应度</code></pre><p>我个人感觉，其中难度最大的是适应度这个地方，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是遗传算法&quot;&gt;&lt;a href=&quot;#什么是遗传算法&quot; class=&quot;headerlink&quot; title=&quot;什么是遗传算法&quot;&gt;&lt;/a&gt;什么是遗传算法&lt;/h1&gt;&lt;p&gt;遗传算法一般的解释就是模拟达尔文生物进化论和遗传学对生物的进化过程的模拟，用迭代进化的方式得到最优解</summary>
      
    
    
    
    <category term=".Net" scheme="https://oujun.work/categories/Net/"/>
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term="遗传算法" scheme="https://oujun.work/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term=".Net" scheme="https://oujun.work/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>使用IHostedService时间简单的定时任务功能</title>
    <link href="https://oujun.work/2022/05/30/%E4%BD%BF%E7%94%A8IHostedService%E6%97%B6%E9%97%B4%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD.html"/>
    <id>https://oujun.work/2022/05/30/%E4%BD%BF%E7%94%A8IHostedService%E6%97%B6%E9%97%B4%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD.html</id>
    <published>2022-05-30T03:29:10.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有些时候再开发过程中会遇到定时执行任务的情况，这种需求功能很小，如果采用<code>hangfire</code>或者<code>Quartz.NET</code>之类的框架，就有些庞大，不值得建库建表去进行配置管理，使用<code>while</code>或者<code>timer</code>又不够具有封装性，所以微软.net core提供了<code>IHostedService</code>（<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0&tabs=visual-studio">在 ASP.NET Core 中使用托管服务实现后台任务</a>）托管服务时间简单的后台任务管理器。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们采用<code>IHostedService</code> 基类进行封装以满足我们的简单需求，这个接口有两个实现。</p><ul><li>StartAsync(CancellationToken)</li><li>StopAsync(CancellationToken)</li></ul><h2 id="StartAsync"><a href="#StartAsync" class="headerlink" title="StartAsync"></a>StartAsync</h2><p>简单的描述，就是启动任务，再这里对任务的逻辑进行处理。</p><h2 id="StopAsync"><a href="#StopAsync" class="headerlink" title="StopAsync"></a>StopAsync</h2><p>终止任务，一般来讲就是服务本身或者说应用本身停止的时候自动调用该接口。对后台任务涉及到的资源进行释放或者其他需要的逻辑进行处理的。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>我们的需求很简单，就是再每周五上午8点的时候查询报表，然后通过邮件发送给指定的接收人。</p><p>实现的原理依然是在启动的时候开启一个<code>Timer</code>定时器，然后定时进行轮询，判断时间，时间到此范围的时候就执行<code>DoWork</code>方法进行逻辑处理。由于<code>IHostedService</code>是单例的，所以没有办法进行依赖注入，但是有另一个方法，就是在这里注入一个同为单例的<code>IServiceScopeFactory</code>，需要使用其他类的时候，通过<code>using var scope = _serviceScopeFactory.CreateScope();var cache = scope.ServiceProvider.GetRequiredService&lt;IDistributedCache&gt;()</code>的形式进行对象获取。这里还有一点小瑕疵，就是目前的<code>Timer</code>中的<code>TimerCallback</code>还不支持异步的形式，有点遗憾。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Email.Report.Infrastructure.BackgroundTasks</span>;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 门店(中心)周报</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatisticWeeklyDoWork</span> : <span class="hljs-title">IHostedService</span>, <span class="hljs-title">IAsyncDisposable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> Title = <span class="hljs-string">&quot;周报&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Task _completedTask = Task.CompletedTask;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> ILogger&lt;StatisticWeeklyDoWork&gt; _logger;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> IServiceScopeFactory _serviceScopeFactory;<br>    <span class="hljs-keyword">private</span> Timer? _timer;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;logger&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;serviceScopeFactory&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StatisticWeeklyDoWork</span>(<span class="hljs-params">ILogger&lt;StatisticWeeklyDoWork&gt; logger, IServiceScopeFactory serviceScopeFactory</span>)</span><br>    &#123;<br>        _logger = logger;<br>        _serviceScopeFactory = serviceScopeFactory;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cancellationToken&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Task <span class="hljs-title">StartAsync</span>(<span class="hljs-params">CancellationToken cancellationToken</span>)</span><br>    &#123;<br>        _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; &#123;Service&#125; is running.&quot;</span>, Title, <span class="hljs-keyword">nameof</span>(StatisticWeeklyDoWork));<br>        _timer = <span class="hljs-keyword">new</span> Timer(DoWork, <span class="hljs-literal">null</span>, TimeSpan.Zero, TimeSpan.FromSeconds(<span class="hljs-number">30</span>));<br>        <span class="hljs-keyword">return</span> _completedTask;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoWork</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>? state</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> now = DateTimeOffset.Now;<br>        <span class="hljs-keyword">if</span> (now.DayOfWeek == DayOfWeek.Friday &amp;&amp; now.Hour == <span class="hljs-number">8</span> &amp;&amp; now.Minute &lt; <span class="hljs-number">10</span>)   <span class="hljs-comment">// 每周五的上午8点</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> scope = _serviceScopeFactory.CreateScope();<br>            <span class="hljs-keyword">var</span> cache = scope.ServiceProvider.GetRequiredService&lt;IDistributedCache&gt;();<br>            cache.BackgroundCheck(<span class="hljs-string">$&quot;StatisticWeeklyDoWork_<span class="hljs-subst">&#123;now:yyyyMMddHH&#125;</span>&quot;</span>, () =&gt;<br>            &#123;<br>                <span class="hljs-keyword">var</span> service = scope.ServiceProvider.GetRequiredService&lt;IEmaliByExcelManager&gt;();<br>                _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; is working, 当前时间：&#123;time&#125;&quot;</span>, Title, now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>                <span class="hljs-comment">// 实际逻辑处理</span><br>                _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; is complete, 当前时间：&#123;time&#125;&quot;</span>, Title, now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cancellationToken&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Task <span class="hljs-title">StopAsync</span>(<span class="hljs-params">CancellationToken cancellationToken</span>)</span><br>    &#123;<br>        _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; &#123;Service&#125; is stopping.&quot;</span>, Title, <span class="hljs-keyword">nameof</span>(StatisticWeeklyDoWork));<br>        _timer?.Change(Timeout.Infinite, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> _completedTask;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> ValueTask <span class="hljs-title">DisposeAsync</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (_timer <span class="hljs-keyword">is</span> IAsyncDisposable timer)<br>        &#123;<br>            <span class="hljs-keyword">await</span> timer.DisposeAsync();<br>        &#125;<br>        _timer = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="防止重复执行"><a href="#防止重复执行" class="headerlink" title="防止重复执行"></a>防止重复执行</h2><p>其实也没有这个必要，我们可以在<code>Timer</code>的最后一个参数改为1秒一次，我们只要判断时间因素到秒级一般不会出现问题，但是如果操作失败了，就会出现邮件没有发出的情况，所以我们还是增加了一个判断，时间拉长到30秒，任务执行时间也比较长，例如10秒20秒的情况，甚至有些耗时任务，可能或执行2分钟，那么每30秒的判断就会重复进入任务中，这里用到了一个<code> cache.BackgroundCheck(****</code>来对任务的执行进行管理，使用了分布式缓存<code>IDistributedCache</code>进行二次封装满足调用需求。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Email.Report.Infrastructure.Extensions</span>;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IDistributedCacheExtensions</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 任务执行检查</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cache&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;key&quot;&gt;</span>任务检查key<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BackgroundCheck</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> IDistributedCache cache, <span class="hljs-built_in">string</span> key, Action action</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> workingKey = key + <span class="hljs-string">&quot;_working&quot;</span>;<br>        <span class="hljs-keyword">var</span> isWorkingKey = cache.GetString(key);<br>        <span class="hljs-keyword">if</span> (isWorkingKey == <span class="hljs-string">&quot;working&quot;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cache.SetString(workingKey, <span class="hljs-string">&quot;working&quot;</span>, <span class="hljs-keyword">new</span> DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(<span class="hljs-number">5</span>)));<br>        <span class="hljs-keyword">var</span> complete = cache.GetString(key);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(complete))<br>        &#123;<br>            action?.Invoke();<br>            cache.SetString(key, <span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-keyword">new</span> DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromHours(<span class="hljs-number">2</span>)));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中每个任务执行，我们都有一个独立的key，调用到的时候就先写入一个working的key，这样重复进入的时候判断在执行中就会自动返回了，然后执行在判断是否已经执行结束，如果还没有，则开始执行逻辑，执行完之后就写入完成的key，这样就不会重复判断了，要注意的是，key的写入时间，与任务的实行时间，不能出现太小的差距，否则就会出现重复进入的情况。</p><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><p>我们可以有多个这样的后台任务，在服务启动的时候进行注册，就可以自动启动了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Email.Report.API</span>;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> builder = WebApplication.CreateBuilder(args);<br><br>        <span class="hljs-comment">// Add services to the container.</span><br><br>        builder.Services.AddControllers();<br>        <span class="hljs-meta">#<span class="hljs-keyword">region</span> 定时任务</span><br>        builder.Services.AddDistributedMemoryCache(); <span class="hljs-comment">//缓存</span><br>        builder.Services.AddHostedService&lt;StatisticWeeklyDoWork&gt;();<br>        <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>        <span class="hljs-keyword">var</span> app = builder.Build();<br><br>        <span class="hljs-comment">// Configure the HTTP request pipeline.</span><br><br>        app.UseAuthorization();<br>        app.MapControllers();<br>        app.Run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有些时候再开发过程中会遇到定时执行任务的情况，这种需求功能很小，如果采用&lt;code&gt;hangfire&lt;/code&gt;或者&lt;code&gt;Quart</summary>
      
    
    
    
    <category term=".Net" scheme="https://oujun.work/categories/Net/"/>
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term=".Net Core" scheme="https://oujun.work/tags/Net-Core/"/>
    
    <category term="定时任务" scheme="https://oujun.work/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Github中的代码自动部署发布到nuget的流程</title>
    <link href="https://oujun.work/2022/02/07/github-to-nuget.html"/>
    <id>https://oujun.work/2022/02/07/github-to-nuget.html</id>
    <published>2022-02-07T05:26:41.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>时序图</p><pre><code class=" mermaid">sequenceDiagram  Dev -&gt;&gt;+ Github :拉取代码  Github --&gt;&gt;- Dev : git clone -b dev  Dev -&gt;&gt; Dev : code  Dev -&gt;&gt; Dev : commit  Dev -&gt;&gt; Github : push  Github -&gt;&gt; Github : pull request master  Github -&gt;&gt; Github : publish release  Github -&gt;&gt; Github : tag v.*.*.*  Github -&gt;&gt; Github Actions : on:   push:    tags:    - v*  Github Actions -&gt;&gt; Github Actions : actions/setup-dotnet@v1  Github Actions -&gt;&gt; Github Actions : dawidd6/action-get-tag@v1  Github Actions -&gt;&gt; Github Actions : dotnet build --configuration Release  Github Actions -&gt;&gt; Github Actions : dotnet pack  -p:PackageVersion=$&#123;&#123;steps.tag.outputs.tag&#125;&#125; -o  Github Actions -&gt;&gt; Github Actions : dotnet nuget push --api-key $&#123;&#123;secrets.NUGET_API_KEY&#125;&#125;</code></pre><p><code>.github\workflows</code>中加入<code>dotnet.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">.NET</span><br><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">v*</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>  <br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">.NET</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-dotnet@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">dotnet-version:</span> <span class="hljs-number">6.0</span><span class="hljs-number">.101</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">Tag</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">tag</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">dawidd6/action-get-tag@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># Optionally strip `v` prefix</span><br>        <span class="hljs-attr">strip_v:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">dotnet</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">dotnet</span> <span class="hljs-string">build</span> <span class="hljs-string">--configuration</span> <span class="hljs-string">Release</span> <span class="hljs-string">src/RabbitMQ.EventBus.AspNetCore</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pack</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">dotnet</span> <span class="hljs-string">pack</span> <span class="hljs-string">src/RabbitMQ.EventBus.AspNetCore</span> <span class="hljs-string">-c</span> <span class="hljs-string">Release</span> <span class="hljs-string">--include-symbols</span> <span class="hljs-string">--include-source</span>  <span class="hljs-string">-p:PackageVersion=$&#123;&#123;steps.tag.outputs.tag&#125;&#125;</span> <span class="hljs-string">-o</span> <span class="hljs-string">artifacts/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Publish</span> <span class="hljs-string">Symbols</span> <span class="hljs-string">to</span> <span class="hljs-string">NuGet</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">dotnet</span> <span class="hljs-string">nuget</span> <span class="hljs-string">push</span> <span class="hljs-string">artifacts/*.symbols.nupkg</span> <span class="hljs-string">--api-key</span> <span class="hljs-string">$&#123;&#123;secrets.NUGET_API_KEY&#125;&#125;</span> <span class="hljs-string">--source</span> <span class="hljs-string">https://api.nuget.org/v3/index.json</span><br></code></pre></td></tr></table></figure><p>开发人员从远程仓库拉取dev分支代码。<br>开发人员进行开发，并推送分支。<br>做dev到master分支的拉取请求。<br>拉取请求合并到master分支后，创建新的release并打标签 <code>v.*.*.*</code>。<br>github actions 的触发方式为打了tag且为v开头的。<br>下面就是进行编译、获取打的标签、打包、并推送到nuget，版本号就是前面打的tag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时序图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; mermaid&quot;&gt;sequenceDiagram
  Dev -&amp;gt;&amp;gt;+ Github :拉取代码
  Github --&amp;gt;&amp;gt;- Dev : git clone -b dev
  Dev -&amp;gt;</summary>
      
    
    
    
    
    <category term=".net" scheme="https://oujun.work/tags/net/"/>
    
    <category term="github" scheme="https://oujun.work/tags/github/"/>
    
    <category term="actions" scheme="https://oujun.work/tags/actions/"/>
    
    <category term="nuget" scheme="https://oujun.work/tags/nuget/"/>
    
  </entry>
  
  <entry>
    <title>常用的代码剪辑</title>
    <link href="https://oujun.work/2022/02/07/some-code-excerpts.html"/>
    <id>https://oujun.work/2022/02/07/some-code-excerpts.html</id>
    <published>2022-02-07T01:52:51.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="System-Text-Json-Serialization"><a href="#System-Text-Json-Serialization" class="headerlink" title="System.Text.Json.Serialization"></a>System.Text.Json.Serialization</h2><h3 id="JsonExtensionData-处理溢出-JSON"><a href="#JsonExtensionData-处理溢出-JSON" class="headerlink" title="JsonExtensionData 处理溢出 JSON"></a>JsonExtensionData 处理溢出 JSON</h3><p>反序列化时，可能会在 JSON 中收到不是由目标类型的属性表示的数据。可以将这些无法由目标类型的属性表示的数据储存在一个Dictionary&lt;string, JsonElement&gt;字典里面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 储存反序列化时候的溢出数据</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>[<span class="hljs-meta">JsonExtensionData</span>]<br><span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, JsonElement&gt; ExtensionData &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br></code></pre></td></tr></table></figure><h3 id="JsonInclude-包含特定public字段和非公共属性访问器"><a href="#JsonInclude-包含特定public字段和非公共属性访问器" class="headerlink" title="JsonInclude 包含特定public字段和非公共属性访问器"></a>JsonInclude 包含特定public字段和非公共属性访问器</h3><p>在序列化或反序列化时，使用 JsonSerializerOptions.IncludeFields 全局设置或 <code>[JsonInclude]</code> 特性来包含字段（必须是public），当应用于某个属性时，指示非公共的 getter 和 setter 可用于序列化和反序列化。 不支持非公共属性。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>[<span class="hljs-meta">JsonInclude</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">long</span> age = <span class="hljs-number">1000</span>;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>[<span class="hljs-meta">JsonInclude</span>]<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">private</span> <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; <br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h1&gt;&lt;h2 id=&quot;System-Text-Json-Serialization&quot;&gt;&lt;a href=&quot;#System-Text-Jso</summary>
      
    
    
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term="开发" scheme="https://oujun.work/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="CSharp" scheme="https://oujun.work/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>出行设计</title>
    <link href="https://oujun.work/2022/02/02/travel-design.html"/>
    <id>https://oujun.work/2022/02/02/travel-design.html</id>
    <published>2022-02-02T14:24:07.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<div class="markmap-container" style="height:768px">  <svg data="{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:1,&quot;p&quot;:{&quot;lines&quot;:[0,1]},&quot;v&quot;:&quot;选购&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[1,2]},&quot;v&quot;:&quot;要求&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[2,3]},&quot;v&quot;:&quot;通勤&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[3,4]},&quot;v&quot;:&quot;省力&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[4,5]},&quot;v&quot;:&quot;距离&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[5,6]},&quot;v&quot;:&quot;时间&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[6,7]},&quot;v&quot;:&quot;存放&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[7,8]},&quot;v&quot;:&quot;骑行&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[8,9]},&quot;v&quot;:&quot;出行方便&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[9,10]},&quot;v&quot;:&quot;健身效果&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[10,11]},&quot;v&quot;:&quot;短距旅游&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[11,12]},&quot;v&quot;:&quot;方便&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:5,&quot;p&quot;:{&quot;lines&quot;:[12,13]},&quot;v&quot;:&quot;距离&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[13,14]},&quot;v&quot;:&quot;长途&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:2,&quot;p&quot;:{&quot;lines&quot;:[14,15]},&quot;v&quot;:&quot;选择&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[15,16]},&quot;v&quot;:&quot;自行车&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[16,17]},&quot;v&quot;:&quot;特点&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[17,18]},&quot;v&quot;:&quot;不需要充电&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[18,19]},&quot;v&quot;:&quot;存放方便，跟共享单车停一起就可以&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[19,20]},&quot;v&quot;:&quot;但是有共享单车后是否还需要买一台&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[20,21]},&quot;v&quot;:&quot;天冷不方便&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[21,22]},&quot;v&quot;:&quot;高碳钢：便宜、重&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[22,23]},&quot;v&quot;:&quot;铝合金：&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[23,24]},&quot;v&quot;:&quot;碳纤维：轻，但是贵&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[24,25]},&quot;v&quot;:&quot;电动车&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[25,26]},&quot;v&quot;:&quot;特点&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[26,27]},&quot;v&quot;:&quot;省力&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[27,28]},&quot;v&quot;:&quot;需要充电&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[28,29]},&quot;v&quot;:&quot;上海需要上牌&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[29,30]},&quot;v&quot;:&quot;需要头盔&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[30,31]},&quot;v&quot;:&quot;价格其实与好一点的自行车差不多&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[31,32]},&quot;v&quot;:&quot;天冷也不方便&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[32,33]},&quot;v&quot;:&quot;品牌&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[33,34]},&quot;v&quot;:&quot;续航&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[34,35]},&quot;v&quot;:&quot;外观&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[35,36]},&quot;v&quot;:&quot;上牌&quot;}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[36,37]},&quot;v&quot;:&quot;摩托车&quot;},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:3,&quot;p&quot;:{&quot;lines&quot;:[37,38]},&quot;v&quot;:&quot;机动车&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[38,39]},&quot;v&quot;:&quot;汽油车&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[39,40]},&quot;v&quot;:&quot;选择性很多&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[40,41]},&quot;v&quot;:&quot;续航要比电动汽车长，充电桩还不是随处都有&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[41,42]},&quot;v&quot;:&quot;不用考虑气温因素，南方、东北都没问题&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[42,43]},&quot;v&quot;:&quot;部分城市很难拿到牌照&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[43,44]},&quot;v&quot;:&quot;需要考驾照&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[44,45]},&quot;v&quot;:&quot;手动挡驾照&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[45,46]},&quot;v&quot;:&quot;自动挡驾照&quot;}]}]},{&quot;t&quot;:&quot;heading&quot;,&quot;d&quot;:4,&quot;p&quot;:{&quot;lines&quot;:[46,47]},&quot;v&quot;:&quot;电动汽车&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[47,48]},&quot;v&quot;:&quot;选择性不是很多&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[48,49]},&quot;v&quot;:&quot;南方城市冬天不到零下，有充电桩就很方便，也经济实惠&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[49,50]},&quot;v&quot;:&quot;北方冬天不大适合&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[50,51]},&quot;v&quot;:&quot;大部分城市拿牌照容易&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:6,&quot;p&quot;:{&quot;lines&quot;:[51,52]},&quot;v&quot;:&quot;需要考驾照&quot;,&quot;c&quot;:[{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[52,53]},&quot;v&quot;:&quot;手动挡驾照&quot;},{&quot;t&quot;:&quot;list_item&quot;,&quot;d&quot;:8,&quot;p&quot;:{&quot;lines&quot;:[53,54]},&quot;v&quot;:&quot;自动挡驾照&quot;}]}]}]}]}]}"></svg></div>]]></content>
    
    
      
      
    <summary type="html">
&lt;div class=&quot;markmap-container&quot; style=&quot;height:768px&quot;&gt;
  &lt;svg data=&quot;{&amp;quot;t&amp;quot;:&amp;quot;heading&amp;quot;,&amp;quot;d&amp;quot;:1,&amp;quot;p&amp;quot;:{&amp;quot;l</summary>
      
    
    
    
    
    <category term="思维导图" scheme="https://oujun.work/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>我常用的工具</title>
    <link href="https://oujun.work/2021/12/30/tools.html"/>
    <id>https://oujun.work/2021/12/30/tools.html</id>
    <published>2021-12-30T07:35:02.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h1><h1 id="Azure-DevOps"><a href="#Azure-DevOps" class="headerlink" title="Azure DevOps"></a>Azure DevOps</h1><p><a href="https://docs.microsoft.com/zh-cn/azure/devops/?view=azure-devops">Azure DevOps 文档</a></p><h1 id="Net开发"><a href="#Net开发" class="headerlink" title=".Net开发"></a>.Net开发</h1><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/">.NET 微服务：适用于容器化 .NET 应用程序的体系结构</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/architecture/patterns/cqrs">CQRS 模式是什么？</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/">使用 DDD 和 CQRS 模式降低微服务中的业务复杂性</a></p><p><a href="https://github.com/dotnet-architecture/eShopOnContainers">微软的微服务架构示例</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/architecture/microservices/">微软微服务体系</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-application-layer-web-api-design">设计微服务应用层和 Web API</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/microservice-application-layer-implementation-web-api">使用 Web API 实现微服务应用层</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/architecture/guide/architecture-styles/event-driven">事件驱动的架构样式</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/architecture/microservices/microservice-ddd-cqrs-patterns/domain-events-design-implementation">域事件：设计和实现</a></p><p><a href="https://docs.microsoft.com/zh-cn/adaptive-cards/">自适应卡片</a></p><p><a href="https://adaptivecards.io/designer/">自适应卡片设计器</a></p><p><a href="https://www.infoq.cn/article/g6bk78djx_wukxps0kxm">当 DDD 遇上 DCI（Data, Context, Interactive）架构模式</a></p><h2 id="net-core-开发"><a href="#net-core-开发" class="headerlink" title=".net core 开发"></a>.net core 开发</h2><p><a href="https://docs.hangfire.io/en/latest/index.html">hangfire</a></p><p><a href="https://identityserver4docs.readthedocs.io/zh_CN/latest/index.html">identityserver4</a></p><p><a href="https://github.com/jbogard/MediatR/wiki">MediatR</a></p><p><a href="https://www.elastic.co/guide/en/elasticsearch/client/net-api/6.x/index.html">ElasticSearch.net API</a></p><p><a href="https://www.rabbitmq.com/dotnet.html">Rabbitmq.Net API</a></p><p><a href="https://docs.automapper.org/en/stable/Getting-started.html">AutoMapper</a></p><p><a href="https://ocelot.readthedocs.io/en/latest/introduction/gettingstarted.html">Ocelot</a></p><p><a href="https://miniprofiler.com/">miniprofiler</a></p><p><a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0&viewFallbackFrom=aspnetcore-2.1&tabs=visual-studio#queued-background-tasks">在 ASP.NET Core 中使用托管服务实现后台任务</a></p><p><a href="https://docs.microsoft.com/zh-cn/dotnet/standard/collections/thread-safe/how-to-create-an-object-pool">使用 ConcurrentBag 创建目标池</a></p><p><a href="https://github.com/microsoft/RulesEngine">RulesEngine,微软的规则引擎</a></p><p><a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/">约定式提交(一种用于给提交信息增加人机可读含义的规范)</a></p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><a href="https://help.aliyun.com/document_detail/99880.html">链路追踪</a></p><p><a href="https://docs.docker.com/get-started/">Docker</a></p><p><a href="https://kubernetes.io/zh/docs/home/">K8s</a></p><p><a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6">git-scm</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/devops/repos/git/gitworkflow?view=azure-devops">Azure Repos Git 教程</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><a href="https://benchmarkdotnet.org/">性能测试</a></p><p><a href="https://xunit.net/">xUnit单元测试</a></p><p><a href="https://www.cnblogs.com/selimsong/p/9306221.html">xUnit单元测试案例</a></p><p><a href="https://github.com/Moq/moq4/wiki/Quickstart">Moq</a></p><p><a href="https://github.com/MisterJames/GenFu">GenFu模拟数据生成</a></p><p><a href="https://playwright.dev/dotnet/docs/intro">微软开源的Web测试和自动化</a></p><p><a href="https://github.com/grafana/k6">k6.io 压力测试</a></p><h1 id="Visual-Code-插件"><a href="#Visual-Code-插件" class="headerlink" title="Visual Code 插件"></a>Visual Code 插件</h1><h2 id="Markmap"><a href="#Markmap" class="headerlink" title="Markmap"></a>Markmap</h2><p><a href="https://marketplace.visualstudio.com/items?itemName=gera2ld.markmap-vscode">Markmap</a></p><p><a href="https://github.com/gera2ld/markmap-vscode">markmap-vscode</a> 是一个将Markdown转换为思维导图的工具。</p><p><a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-mermaid">Markdown Preview Mermaid Support</a> 在MD文件中支持<a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a>，Mermaid是一个精美的图表工具</p><h1 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h1><h2 id="slidev-用markdown做ppt"><a href="#slidev-用markdown做ppt" class="headerlink" title="slidev 用markdown做ppt"></a>slidev 用markdown做ppt</h2><p><a href="https://cn.sli.dev/">slidev</a></p><blockquote><p>有很多功能丰富的、通用的、所见即所得的幻灯片制作工具，例如 微软 PowerPoint 或 苹果 Keynote. 它们在制作带有动画、图表和许多其他漂亮的幻灯片方面效果相当好，同时非常直观和容易学习。那么，为什么要费心制作 Slidev 呢？</p><p>Slidev 旨在为开发者提供灵活性和交互性，通过使用他们已经熟悉的工具和技术，使他们的演示文稿更加有趣、更具表现力和吸引力。</p><p>当使用所见即所得的编辑器时，人们很容易被样式选项所干扰。Slidev 通过分离内容和视觉效果来弥补这一点。这使你能够一次专注于一件事，同时也能够重复使用社区中的主题。Slidev 并不寻求完全取代其他幻灯片制作工具。相反，它专注于迎合开发者社区的需求。</p></blockquote><p><a href="https://cn.sli.dev/guide/why.html#slidev">文档</a></p><h2 id="mingrammer-com"><a href="#mingrammer-com" class="headerlink" title="mingrammer.com"></a>mingrammer.com</h2><p><a href="https://github.com/mingrammer/diagrams">https://github.com/mingrammer/diagrams</a></p><p>在Python代码中绘制云系统架构图。用来对新的系统架构设计进行原型设计或者描述现有的系统体系结构。</p><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h2><p><a href="https://mermaid-js.github.io/mermaid/#/">Mermaid</a></p><p>Mermaid 允许您使用文本和代码创建图表和可视化效果。</p><p>它是一个基于Javascript的图表工具，可以呈现Markdown启发的文本定义，以动态创建和修改图表。</p><pre><code class=" mermaid">classDiagram    Class01 &lt;|-- AveryLongClass : Cool    Class03 *-- Class04    Class05 o-- Class06    Class07 .. Class08    Class09 --&gt; C2 : Where am i?    Class09 --* C3    Class09 --|&gt; Class07    Class07 : equals()    Class07 : Object[] elementData    Class01 : size()    Class01 : int chimp    Class01 : int gorilla    Class08 &lt;--&gt; C2: Cool label</code></pre><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><p><a href="https://docs.microsoft.com/zh-cn/dotnet/machine-learning/tutorials/">Microsoft ML.NET 教程</a></p><h1 id="游戏-amp-媒体"><a href="#游戏-amp-媒体" class="headerlink" title="游戏&amp;媒体"></a>游戏&amp;媒体</h1><p><a href="https://dos.zczc.cz/">在线DOS游戏</a></p><p><a href="https://github.com/nilaoda/BBDown">一款命令行式哔哩哔哩下载器</a></p><p><a href="https://github.com/xingshaocheng/architect-awesome">后端架构师技术图谱</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;项目管理&quot;&gt;&lt;a href=&quot;#项目管理&quot; class=&quot;headerlink&quot; title=&quot;项目管理&quot;&gt;&lt;/a&gt;项目管理&lt;/h1&gt;&lt;h1 id=&quot;Azure-DevOps&quot;&gt;&lt;a href=&quot;#Azure-DevOps&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发日常</title>
    <link href="https://oujun.work/2021/10/16/DevelopmentDaily.html"/>
    <id>https://oujun.work/2021/10/16/DevelopmentDaily.html</id>
    <published>2021-10-16T01:28:34.000Z</published>
    <updated>2022-12-06T06:56:21.079Z</updated>
    
    <content type="html"><![CDATA[<p>业务方，产品，开发的互相认知总是不一样的。</p><p>0月15日 周一<br>开发：有需求可以提前说，这样能提前准备开发这边的排期。<br>产品：好的<br>0月19日 周五<br>产品：这个需求业务方已经提了两个月了，今天来催了，问怎么还没上线。<br>开发：开需求会了吗？<br>产品：今天下午开，这周要上线的。<br>……需求评审中……<br>预计工时40个小时，开发只有一个人可供排期</p><p>0月22日 周一<br>产品X：业务方需求提了两个月了，怎么还没上线，你们开发为什么没有产出？</p><hr><p>产品：这个很着急，业务方提了三个月了，天天问什么时候上线<br>开发：什么时候能评需求<br>产品：下周吧，下周能做完吧？<br>开发：下周不是才评需求吗？<br>产品：嗯下周评完就能做吧。<br>开发：嗯，评完就可以开工了。<br>产品To总监：下周上线</p><p>第二周周四评审<br>产品：这次的改动比较大，之前业务方验收后上线了，但是他们用了几天感觉不想要这样了，所以这次整个改一下，改动不大，就是几个调整<br>开发：涉及到哪些？<br>产品：涉及到业务线1里的一部分，和业务线2里的一部分，还有业务线3和4里的一部分，主要是修改业务线5，然后加了一个业务线6，顺便把业务线7里的数据在业务线1234里都展示一下，历史数据也要处理，并且这次的修改只针对A公司，其他的公司不能看到这些变更，很简单，就是针对A公司进行一下定制。<br>开发：业务方的预期上线时间是什么时候？<br>产品：最晚下周一。<br>开发：现在开发这边全占满了，没有人能现在处理。<br>产品：但是xxx说了，这个是这周必须要的。</p><hr><p>产品：帮我拉个数据<br>业务方：帮我拉个数据<br>产品：帮我来个数据，之前的那个就行，再加两个字段<br>业务方：帮我拉个数据，我要这个，这个，这个，这个，还有这个，给我放到一张表里，<br>    开发：这列数据我们没有，公司没给我们<br>    业务方：但是我们需要这个啊<br>    开发：你们可以提供给我们，然后我们给你放进去<br>    业务方：不行，这列数据挺敏感的不能给你们</p><hr><p>09:30<br>业务方：给我改个数据<br>开发：这个数据改完后会导致统计不准的<br>业务方：为啥？<br>开发：报表是已经出来的了，那部分是不能动的，XXX老师要看的。<br>业务方：哦，知道了，没问题，改吧。</p><p>10:00<br>业务方ToXXX老师：咱们开发的系统报表根本不能用，数据都对不上。</p><hr><p>XXX：我是xxx门店的，我有个合同的收款数填错了要改一下<br>开发：谁让你找我们改的？<br>XXX：你们不是后台吗？<br>开发：我们是开发，不是后台，有问题找你的中心总<br>XXX：哦，好。</p><p>XXXToXXX老师：咱们开发的系统不能用，填的数据都不对。</p><hr><p>中午<br>产品：我这有个表，你看一下咱们这上面的东西都有什么<br>开发：这个是要做什么的<br>产品：xxx那边要接数据，看一下咱们有什么，他们有什么对一下。<br>开发：好</p><p>下午<br>产品1：数据对接好了吗？能接过来吗？<br>开发：解释中……<br>产品1：这个公司那边很着急，已经两个月了，天天提，昨天有把我们骂了一顿问为什么还没接。<br>开发：是啊，为啥这么久了还没接啊？这块的产品谁跟的啊<br>产品1：这块是我跟的<br>开发：需求和设计呢？<br>产品1：这块还没出来呢，这个什么时候能接进来？<br>开发：我要直接接什么啊<br>产品1：我知道，这块的需求设计还没出来的，但是咱们什么时候能上线？<br>开发：我要看到具体需求后才能知道要做什么啊，数据能接，但是接到什么场景下我要知道啊。<br>产品1：那行我知道了<br>5分钟后<br>产品2：xxx那边的数据为啥接不了？<br>开发：谁说接不了？<br>产品2：刚才不是说接不了吗？<br>开发：没有啊，我说的是我要看到具体需求后才能知道要做什么啊，数据能接，但是接到什么场景下我要知道啊。<br>产品2：那我知道了<br>5分钟后<br>产品领导：xxx的数据为啥接不了，公司那边很着急，接不了你要给个理由啊。<br>开发：我没说接不了啊，我说的是我要看到具体需求后才能知道要做什么啊，数据能接，但是接到什么场景下我要知道啊。<br>产品领导：那这周能上吗？<br>开发：不一定，抓紧给我需求让我知道往哪接，接了后要干什么<br>产品领导：行，那我知道了<br>5分钟后<br>开发领导：xxx的数据怎么接不了？有什么问题吗？<br>开发：没需求<br>开发领导：需求不是早定了吗？<br>开发：刚才说还没出来呢。<br>开发领导：那你知道要做什么吗？<br>开发：产品也没说，就让我看了下能接哪些数据，也没说接到哪也没说接了要做什么。<br>开发领导：……</p><hr><p>假期中<br>业务方A：给我拉个数据<br>开发：我不在家，晚上才能回去，回去给你拉<br>业务方A：大概什么时候能回来？很着急<br>开发：不一定，我在外面很远<br>业务方A：那好<br>5分钟后<br>产品：给我拉个数据<br>开发：你这个怎么和业务方A要的一样，我在外面，晚上才能回去。<br>产品：就是那个<br>开发：他刚给我打的电话，我在外面，晚上才能回去<br>产品：……<br>5分钟后<br>产品领导：xxx给业务方A拉个数据<br>开发：我不在家，晚上才能回去<br>5分钟后<br>开发领导：业务方A要的啥<br>开发：解释数据<br>开发领导：你现在给拉一下<br>开发：我不在家，晚上才能回去，你也可以给他拉一下。<br>下午5点<br>业务方A：你什么时候回来<br>开发：如果快的话9点左右吧<br>5分钟后<br>产品：业务方A的数据给他拉了吗<br>开发：我还没到呢<br>开发：开发领导，你先帮他拉一下<br>开发领导：<br>9点半<br>开发：业务方A，我到了，给你数据。</p><hr><p>产品：我找你确认个事，就是咱们的业务1不满足A公司的需求，他们很多数据不填，要把这个地方改一下，可以吗？<br>开发：这个不行，咱们主打的就是数据真实性，这么模糊的填写，连买的东西是什么都看不出来，没法作业啊，而且，A公司的他们一共才10几个人，总不能为了这10几个人，让其他6000多人不用作业啊。<br>产品：他们这个数据拿不到，虽然有能拿到的，但是你只要把这个地方的限制去掉，然后把这4项删除，然后他们没有这两项，其他的都没变，业务1里的业务点1和3和4都不变，还有业务2里的2，3，5，6，7的能力放进来，然后再把数据源上加一个限制就行了，并且，业务1的后续关联的业务4业务5业务6业务7也这个也都要，但就是里面的内容跟这些不一样。<br>开发：不行，这个限制会导致业务1和业务2都不能用的，你这样的话是一个独立的业务，而且你这个定义和内容完全跟这两块业务没关系啊，完全就是个新业务，就按照新功能设计，这样能做到数据隔离，不影响现在的作业系统，而且开发周期也会快。<br>产品：哦，那我明白了，我去设计一个新的产品。<br>一周后<br>产品：我找你确认个事，我不那么做了，【指页面中业务1，业务2，业务3的后面】我就在这加个选项卡好加吧？别的都不动。<br>开发：那好加，那你这个选项卡里放什么啊？<br>产品：就是那天说的那个，因为他们这个数据拿不到，有能拿到的，但是你只要把业务1这个地方的限制去掉，然后把这4项删除，然后他们没有这两项，其他的我都不变，业务1里的业务点1和3和4都不变，我还要，还有业务2里的2，3，5，6，7的能力放进来，然后再把数据源上加一个限制就行了,限制不加也行，虽然他们现在也是这么用的，并且，业务1的后续关联的业务4业务5业务6业务7也这个也都要，但就是里面的内容跟这些不一样，这样是不是就简单了？<br>开发：那你这个东西放哪呢？<br>产品：就放这个啊，你再加个选项卡就行了，很简单的。<br>开发：对，但是你这不还是一个新的业务吗，跟业务1和业务2都不一样。<br>产品：对，但是我就要个选项卡给它放这就行了。<br>开发：你没明白，你这个选项卡叫什么，它不在业务1里，也不在业务2里，并且跟这俩的内容和限制条件也不一样，后续的流程也不不一样，我总要有个操作和数据存放的地方吧？<br>产品：你说底层实现啊<br>开发：就算不说底层的，你这个地方和其他的哪都不挨着，既不是业务1也不是业务2啊<br>产品：我以为放个选项卡就行了呢，你的意思还是要设计一套新的是吧。<br>开发：对啊，在不影响我业务1和业务2的使用的情况下，无法兼容你的这套东西，所以这肯定是一个新的产品。<br>产品：啊，这样啊，你这么说我就明白了。</p><p>开发2：这个产品不是带着设计聘过来的吗？<br>开发：设计呢？</p><hr><p>开发1：国内有哪个岛适合养老<br>开发2：我想回家放羊</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;业务方，产品，开发的互相认知总是不一样的。&lt;/p&gt;
&lt;p&gt;0月15日 周一&lt;br&gt;开发：有需求可以提前说，这样能提前准备开发这边的排期。&lt;br&gt;产品：好的&lt;br&gt;0月19日 周五&lt;br&gt;产品：这个需求业务方已经提了两个月了，今天来催了，问怎么还没上线。&lt;br&gt;开发：开需求会</summary>
      
    
    
    
    
    <category term="开发" scheme="https://oujun.work/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="日常" scheme="https://oujun.work/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="产品" scheme="https://oujun.work/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>给Hexo Theme Fluid 主题增加相册功能</title>
    <link href="https://oujun.work/2021/08/01/Hexo-Theme-Fluid-Add-Gallery.html"/>
    <id>https://oujun.work/2021/08/01/Hexo-Theme-Fluid-Add-Gallery.html</id>
    <published>2021-08-01T11:17:26.000Z</published>
    <updated>2022-12-06T06:56:21.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Fluid主题中与图集功能，但是直接用来做相册效果并不大好，不知道是不是我的用法的问题，使用了图集的相册页面fancybox会失效，但是hexo也没有相册插件，很多都是直接的相册主题，当然，主打轻盈的hexo用来做相册，也许违背了它的初衷。随后在Fluid的文档中发现了hexo 5的新功能，<a href="https://hexo.fluid-dev.com/posts/hexo-injector/">注入器</a></p><h1 id="注入器"><a href="#注入器" class="headerlink" title="注入器"></a>注入器</h1><p>Hexo 注入器是 Hexo 5 版本加入的一项新功能，注入器可以将静态代码片段注入生成的HTML 的 <head> 和 <body> 中。这部分不做过多的介绍了。</p><p>有了这个功能，便可以在不破坏原主题的情况下增加功能，而且以后即使更换主题也不受影响。</p><h2 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h2><p>在根目录下创建一个<code>scripts</code>文件夹，该文件夹与<code>source</code>和<code>themes</code>处于同一层级，然后在<code>scripts</code>目录下创建一个<code>injector.js</code>文件，其中编辑其内容为:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;head_end&#x27;</span>, <br><span class="hljs-string">`</span><br><span class="hljs-string">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css&quot;&gt;</span><br><span class="hljs-string">&lt;link rel=&quot;stylesheet&quot; href=&quot;/assets/justifiedGallery.min.css&quot; /&gt;</span><br><span class="hljs-string">`</span>,<br><span class="hljs-string">&#x27;gallery&#x27;</span>)<br>hexo.<span class="hljs-property">extend</span>.<span class="hljs-property">injector</span>.<span class="hljs-title function_">register</span>(<span class="hljs-string">&#x27;body_end&#x27;</span>, <br><span class="hljs-string">`</span><br><span class="hljs-string">  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/@fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;script src=&quot;/assets/jquery.justifiedGallery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">  &lt;script src=&quot;/assets/gallery.js&quot;&gt;&lt;/script&gt;</span><br><span class="hljs-string">`</span>,<br><span class="hljs-string">&#x27;gallery&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里的<code>/assets/</code>路径是我在<code>source</code>文件夹下创建的，里面用来放一些css文件和js文件。</p><p>最后一个参数<code>&#39;gallery&#39;</code>表示的是用在那个布局下，可以任意写，这个布局体现在<code>index.md</code>中的<code>layout:</code>,例如:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 相册<br>date: 2021-07-29 15:52:59<br><span class="hljs-section">layout: gallery</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><p>这段代码的意思是在<code>&lt;/head&gt;</code>前面插入两个css文件的引用和在<code>&lt;/body&gt;</code>前面插入三个js文件的引用，其中<a href="https://miromannino.github.io/Justified-Gallery/">justifiedGallery</a>是自动生成瀑布流的插件，下载下来后都放到<code>/source/assets</code>下，接下来编辑<code>gallery.js</code></p><h2 id="gallery-js"><a href="#gallery-js" class="headerlink" title="gallery.js"></a>gallery.js</h2><p>理想状态是自动读取目录下的图片，然后生成相册，后来发现那样有些麻烦，我的风格就是用最简单的方式快捷实现需求并且容易维护，所以采用了一些常见的使用json的方式来实现，这个文件中就是找到主题中的<code>&lt;article class=&quot;page-content&quot;&gt;</code>部分，然后使用js插入从json中读出来的照片，输出成a标签和图片表情，并支持fancybox图集的形式，然后调用前面引用的<code>justifiedGallery</code>来生成瀑布流。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    el = $(<span class="hljs-string">&quot;article.page-content&quot;</span>);<br>    <span class="hljs-keyword">if</span> (el !== <span class="hljs-literal">undefined</span>) &#123;<br>        el.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                galleryContent = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>                galleryContent.<span class="hljs-property">id</span> = <span class="hljs-string">&quot;gallery-content&quot;</span>;<br>                galleryContent.<span class="hljs-property">class</span> = <span class="hljs-string">&quot;justified-gallery&quot;</span>;<br>                <span class="hljs-keyword">function</span> <span class="hljs-title function_">renderGallery</span>(<span class="hljs-params">node</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (node.<span class="hljs-property">contents</span> !== <span class="hljs-literal">undefined</span> &amp;&amp; node.<span class="hljs-property">contents</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>                        node.<span class="hljs-property">contents</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">sd</span> =&gt;</span> &#123;<br>                            imgUrl = node.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;/&#x27;</span> + sd.<span class="hljs-property">name</span>;<br>                            imgThumbUrl = node.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;/thumbnails/thumb_&#x27;</span> + sd.<span class="hljs-property">name</span>;<br>                            galleryContent.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">`</span><br><span class="hljs-string">                                &lt;a  href=&quot;`</span>+ imgUrl + <span class="hljs-string">`&quot; data-fancybox=&quot;images&quot;&gt;</span><br><span class="hljs-string">                                    &lt;img src=&quot;`</span>+ imgThumbUrl + <span class="hljs-string">`&quot;&gt;</span><br><span class="hljs-string">                                &lt;/a&gt;</span><br><span class="hljs-string">                            `</span>;<br>                        &#125;);<br>                    &#125;<br>                &#125;<br>                data.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">d</span> =&gt;</span> <span class="hljs-title function_">renderGallery</span>(d) );<br>                el.<span class="hljs-title function_">append</span>(galleryContent);<br>                $(<span class="hljs-string">&#x27;#gallery-content&#x27;</span>).<span class="hljs-title function_">justifiedGallery</span>(&#123; <span class="hljs-attr">rowHeight</span>: <span class="hljs-number">150</span>, <span class="hljs-attr">margins</span>: <span class="hljs-number">5</span> &#125;);<br>            &#125;);<br>    &#125;<br>&#125;)();<br><br><br></code></pre></td></tr></table></figure><h1 id="相册的用法"><a href="#相册的用法" class="headerlink" title="相册的用法"></a>相册的用法</h1><h2 id="创建相册页面"><a href="#创建相册页面" class="headerlink" title="创建相册页面"></a>创建相册页面</h2><p>上面的准备工作基本上就做完了，接下来就是使用了，我们先创建一个<code>hexo new page gallery</code>,然后手动增加一行<code>layout: gallery</code>就是下面这个样子。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: 相册<br>date: 2021-07-29 15:52:59<br><span class="hljs-section">layout: gallery</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure><h2 id="添加相册缩略图"><a href="#添加相册缩略图" class="headerlink" title="添加相册缩略图"></a>添加相册缩略图</h2><p>然后我们在gallery下创建一个文件夹比如<code>harbin</code>然后将我们分类的照片都放进去，因为我使用的是github，而且，照片都是原图，一个页面中直接显示会特别的慢，于是我就自己创建缩略图，这是需要用到<code>apt install imagemagick</code>，然后再<code>harbin</code>文件夹中创建一个文件<code>convert_thumb.sh</code>填入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>for i in *.jpg<br>do<br>    echo &quot;生成缩略图 $i ...&quot;<br>    convert -thumbnail 480 $i ./thumbnails/thumb_$i<br>done<br></code></pre></td></tr></table></figure><p>每当harbin中新增图片的时候就执行一下它，就自动在<code>thumbnails</code>下创建了<code>thumb_</code>开头的缩略图了。</p><h2 id="生成data-json"><a href="#生成data-json" class="headerlink" title="生成data.json"></a>生成data.json</h2><p>我想到了<code>tree</code>正好新版本的有<code>tree -J</code> 可以直接生成<code>data.json</code>,在<code>gallery</code>文件夹下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tree 图片文件夹/ -I &#x27;*.sh&#x27; -J &gt; data.json<br></code></pre></td></tr></table></figure><p>我们得到了data.json文件，还需要稍微编辑一下，其实也可以直接用的，作为那种分类相册，我这里就直接编辑成单个相册的，所以去掉外层的没用信息，去掉非图片的内容，想下面这样的结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;directory&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;harbin&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;contents&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      ...<br>    <span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>我还去掉了缩略图文件的部分，因为也用不上。</p><h1 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h1><p>至此，发布后就可以使用了，默认展示瀑布流是用的缩略图，单击打开的fancybox使用的是原图，注入器这样还可以有更多的玩法的，并且，由于懒的原因，我也没有更加的细化，以后可能会将这个改造单页面中的分类相册的形式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Fluid主题中与图集功能，但是直接用来做相册效果并不大好，不知道是不是我的用法的问题，使用了图集的相册页面fancybox会失效，但是he</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://oujun.work/tags/Hexo/"/>
    
    <category term="主题" scheme="https://oujun.work/tags/%E4%B8%BB%E9%A2%98/"/>
    
    <category term="相册" scheme="https://oujun.work/tags/%E7%9B%B8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>powershell7的美化</title>
    <link href="https://oujun.work/2021/05/28/powershell7%E7%9A%84%E7%BE%8E%E5%8C%96.html"/>
    <id>https://oujun.work/2021/05/28/powershell7%E7%9A%84%E7%BE%8E%E5%8C%96.html</id>
    <published>2021-05-28T08:58:00.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Powershell</code>已经升级到7了，目前看上去很好用了，<code>windows10</code>到今天已经原生支持了<code>openssh</code>，而且，很多的linux中的命令也可以直接在<code>powershell</code>中使用，这样免去了我单独安装子系统的的情况，<code>wsl2</code>不知道为什么，在我家的电脑上会出现丢失系统的问题，这就导致了我维护集群的配置文件和kubeconfig丢失的问题，后来想到，反正有堡垒机，不如都放上去，使用<code>windows terminal</code>直接将选项卡配置成ssh，自动登录也就都解决了，但是不可否认的是，<code>powershell</code>虽然不是太好用，但是比命令提示行强大是肯定的，无非就是一个习惯的问题，坚持了几天，也就习惯了，但是丑是没办法的，所以有了这个美化过程，很容易的。</p><h1 id="安装Powershell-7"><a href="#安装Powershell-7" class="headerlink" title="安装Powershell 7"></a>安装Powershell 7</h1><p><a href="https://github.com/PowerShell/PowerShell">Powershell7 Github</a> 根据自己的喜好进行选择，我选择了msi的安装包，大概在14还是15年的时候接触过<a href="https://chocolatey.org/">Chocolatey</a>，当时角色终于在windows上也有程序包管理器了，但结果是，不好用，后来也没在关注过，这两年发现很多的地方都在推荐，其实可以尝试以下。</p><h1 id="开始美化"><a href="#开始美化" class="headerlink" title="开始美化"></a>开始美化</h1><p>一般来讲，操作步骤大同小异，我写这一篇也是因为换了新的电脑后找不到步骤了，有一个步骤一直报错，但是还想不起来怎么处理了，所以查找后找到了，也就顺手记录一下。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-executionpolicy</span> remotesigned<br><span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span> <span class="hljs-literal">-Scope</span> CurrentUser<br><span class="hljs-built_in">Install-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span> <span class="hljs-literal">-Scope</span> CurrentUser<br><span class="hljs-built_in">Install-Module</span> <span class="hljs-literal">-Name</span> PSReadLine <span class="hljs-literal">-Scope</span> CurrentUser <span class="hljs-literal">-Force</span> <span class="hljs-literal">-SkipPublisherCheck</span> <span class="hljs-comment"># 这个是自动提示的，看个人选择，一般用不上，因为自动提示后面总是会带上.exe扩展名，并且会在后面自动加一个空格，总是，我觉得不好用</span><br></code></pre></td></tr></table></figure><p>然后为了达到每次一次打开都是设置好的美化效果，所以需要把配置写道个人配置文件中</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">if</span> (!(<span class="hljs-built_in">Test-Path</span> <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> )) &#123; <span class="hljs-built_in">New-Item</span> <span class="hljs-literal">-Type</span> File <span class="hljs-literal">-Path</span> <span class="hljs-variable">$PROFILE</span> <span class="hljs-literal">-Force</span> &#125; notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>执行后会打开一个记事本，将下面内容写入到记事本中保存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs notepad">Install-Module posh-git<br>Install-Module oh-my-posh<br>Set-PoshPrompt Paradox<br></code></pre></td></tr></table></figure><p>查看所有配色方式的命令是<code>Get-PoshThemes</code></p><p>很多教程上将<code>Set-PoshPrompt Paradox</code>写成了<code>Set-Theme Paradox</code>，是因为老版本的是这么设置的，很多时候报错也是在这里。</p><p>如果不需要自动检查更新可以只写一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs notepad">Set-PoshPrompt Paradox<br></code></pre></td></tr></table></figure><p>这样，每次打开的时候会检查更新，就不会卡。</p><h1 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h1><p>上面的步骤就美化完成了，只不过看起来还是很难看，所以需要安装字体,根据<a href="https://ohmyposh.dev/docs/fonts">fonts</a>页面上的两种字体，自己选择一下就可以了，默认推荐的<code>MesloLGM NF</code>效果也不错，然后安装完字体后，默认的设置比较麻烦，所以我都是使用<code>terminal</code>的设置里找到<code>powershell</code>，然后外观中直接选字体。</p><p>在<code>terminal</code>的配置中，应该是这样的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fontFace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MesloLGM NF&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PowerShell&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.PowershellCore&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://ohmyposh.dev/docs/">ohmyposh</a></li><li><a href="https://ohmyposh.dev/docs/fonts">fonts</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Powershell&lt;/code&gt;已经升级到7了，目前看上去很好用了，&lt;code&gt;windows10&lt;/code&gt;到今天已经原生</summary>
      
    
    
    
    <category term="知识储备" scheme="https://oujun.work/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
    <category term="pwsh" scheme="https://oujun.work/tags/pwsh/"/>
    
    <category term="powershell" scheme="https://oujun.work/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>沈阳的生活开始了</title>
    <link href="https://oujun.work/2021/05/26/%E6%B2%88%E9%98%B3%E7%9A%84%E7%94%9F%E6%B4%BB%E5%BC%80%E5%A7%8B%E4%BA%86.html"/>
    <id>https://oujun.work/2021/05/26/%E6%B2%88%E9%98%B3%E7%9A%84%E7%94%9F%E6%B4%BB%E5%BC%80%E5%A7%8B%E4%BA%86.html</id>
    <published>2021-05-26T02:00:00.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>充分的体会到了什么叫落后，传统，思想陈旧，效率低下，异想天开。</p><p>先了解一下ENVI的用法，在了解Python的用法，然后再开展其他的，经过了四天，网线拉过来了。终于把电脑买回来了，显示器是借来的，还没买回来。</p><p>还好我的手机卡是无限流量的。</p><p>看起来，也不是个长远的打算。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;充分的体会到了什么叫落后，传统，思想陈旧，效率低下，异想天开。&lt;/p&gt;
&lt;p&gt;先了解一下ENVI的用法，在了解Python的用法，然后再开展其他的，经过了四天，网线拉过来了。终于把电脑买回来了，显示器是借来的，还没买回来。&lt;/p&gt;
&lt;p&gt;还好我的手机卡是无限流量的。&lt;/p&gt;</summary>
      
    
    
    
    <category term="收集" scheme="https://oujun.work/categories/%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="沈阳" scheme="https://oujun.work/tags/%E6%B2%88%E9%98%B3/"/>
    
  </entry>
  
  <entry>
    <title>关于在Windows中使用Terminal连接SSH登录远程机器中的docker容器中使用kubectl管理集群的那些事</title>
    <link href="https://oujun.work/2021/01/13/%E5%9C%A8docker%E4%B8%AD%E4%BD%BF%E7%94%A8kubectl.html"/>
    <id>https://oujun.work/2021/01/13/%E5%9C%A8docker%E4%B8%AD%E4%BD%BF%E7%94%A8kubectl.html</id>
    <published>2021-01-13T10:23:08.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<p>不知道为什么我的<code>Windows 10</code>安装了<code>wsl2</code>后，会莫名其妙的失踪，各种检查都没问题，我怀疑可能处在<code>软raid</code>的问题上，但是不的又不影响。但是这又影响到了我日常的工作，所以我就想，在<code>nas</code>上用<code>docker</code>部署一个<code>kubectl</code>，然后通过远程访问，这样不用在本地安装任何东西了。</p><p>经过将近一天的实验，终于搞定了，用W<code>indows Terminal</code>作为终端，远程通过<code>ssh</code>连接到<code>nas</code>运行<code>docker exec</code>进入容器的终端，中间经历了如何安装<code>bash-completion</code>的过程，最后几乎完美。</p><p>镜像选用<a href="https://hub.docker.com/_/bash">https://hub.docker.com/_&#x2F;bash</a>,13.6MB十分小巧。</p><p><code>kubectl</code>直接<a href="https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/">https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/</a>下载到<code>nas</code>的一个路径中例如我放在了<code>/nas/opt/kubectl/</code>下面。</p><h1 id="docker-compose-yaml的内容"><a href="#docker-compose-yaml的内容" class="headerlink" title="docker-compose.yaml的内容"></a>docker-compose.yaml的内容</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">kubectltest:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">bash:5.1.4</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">kubectltest</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-number">0</span><span class="hljs-string">:0</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KUBECONFIG=/.kube/config</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;apk add bash-completion &amp;&amp; echo &#x27;source /usr/share/bash-completion/bash_completion&#x27;&gt; ~/.bashrc &amp;&amp; mkdir /etc/bash_completion.d &amp;&amp; kubectl completion bash &gt;/etc/bash_completion.d/kubectl &amp;&amp; tail -f /dev/null&quot;</span>]<br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/opt/kubectl/config/test:/.kube</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/opt/kubectl/kubectl:/usr/local/bin/kubectl</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.1&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">32M</span><br>  <span class="hljs-attr">kubectlpre:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">bash:5.1.4</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">kubectlpre</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-number">0</span><span class="hljs-string">:0</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">KUBECONFIG=/.kube/config</span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;apk add bash-completion &amp;&amp; echo &#x27;source /usr/share/bash-completion/bash_completion&#x27;&gt; ~/.bashrc &amp;&amp; mkdir /etc/bash_completion.d &amp;&amp; kubectl completion bash &gt;/etc/bash_completion.d/kubectl &amp;&amp; tail -f /dev/null&quot;</span>]<br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/opt/kubectl/config/pre:/.kube</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/opt/kubectl/kubectl:/usr/local/bin/kubectl</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.1&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">32M</span><br></code></pre></td></tr></table></figure><p><code>bash</code>的镜像里竟然直接带了<code>apk</code>的包管理器这是我没想到的，真的小巧灵活好用，上面command里:</p><ol><li>装bash-completion</li><li>把source &#x2F;usr&#x2F;share&#x2F;bash-completion&#x2F;bash_completion写入到 ~&#x2F;.bashrc，每次登陆后就可以直接使用kubectl自动提示</li><li>创建目录 mkdir &#x2F;etc&#x2F;bash_completion.d 用来存放自动提示文件</li><li>kubectl completion bash &gt;&#x2F;etc&#x2F;bash_completion.d&#x2F;kubectl 写入自动提示</li><li>tail -f &#x2F;dev&#x2F;null 保持容器运行</li></ol><p><code>/nas/opt/kubectl/config/pre</code>存放的是<code>config</code>文件,我平时要管理多个集群，所以我这里又多个目录。</p><h1 id="Windows-Terminal-配置"><a href="#Windows-Terminal-配置" class="headerlink" title="Windows Terminal 配置"></a>Windows Terminal 配置</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2534&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测试环境&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ssh -t root@192.168.0.250 \&quot;/bin/docker exec -it kubectltest bash\&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;colorScheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vintage&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2535&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;预发布环境&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ssh -t root@192.168.0.250 \&quot;/bin/docker exec -it kubectlpre bash\&quot;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;colorScheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;One Half Light&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>重点在哪个<code>ssh -t</code>，不然会进不去，这样就完成了一个在本地打开终端直接进入到<code>nas</code>里的<code>docker</code>容器中进行<code>kubectl</code>管理集群的套娃操作。</p><h1 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h1><ol><li>远程连接的时候<code>ssh</code>的<code>-t</code>参数是<code>tty</code>的意思，不加这个参数后面的<code>docker exec -it</code>会报<code>the input device is not a TTY</code>错，进不去的。</li><li><code>docker-compose.yml</code>中的<code>command</code>节点中多条命令用<code>&amp;&amp;</code>分隔，如果是<code>&amp;</code>分隔，或造成命令并行执行，前一个还没结束，后一个就执行完了。</li></ol><h1 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h1><p>如果能用<code>webshell</code>直接使用<code>docker exec</code>就更好了，即节省了本地空间，又可以给组内的人一起使用。找到了一个<code>docker-exec-web-control</code>项目，是3年前的了，跑起来后并不能用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不知道为什么我的&lt;code&gt;Windows 10&lt;/code&gt;安装了&lt;code&gt;wsl2&lt;/code&gt;后，会莫名其妙的失踪，各种检查都没问题，我怀疑可能处在&lt;code&gt;软raid&lt;/code&gt;的问题上，但是不的又不影响。但是这又影响到了我日常的工作，所以我就想，在&lt;code</summary>
      
    
    
    
    <category term="DevOps" scheme="https://oujun.work/categories/DevOps/"/>
    
    
    <category term="Docker" scheme="https://oujun.work/tags/Docker/"/>
    
    <category term="kubectl" scheme="https://oujun.work/tags/kubectl/"/>
    
    <category term="远程管理" scheme="https://oujun.work/tags/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>家庭服务管理：NAS</title>
    <link href="https://oujun.work/2021/01/07/nas.html"/>
    <id>https://oujun.work/2021/01/07/nas.html</id>
    <published>2021-01-07T04:28:09.000Z</published>
    <updated>2021-01-07T04:28:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-一个NAS都应该能做什么"><a href="#1-一个NAS都应该能做什么" class="headerlink" title="1 一个NAS都应该能做什么"></a>1 一个NAS都应该能做什么</h1><p>我是一个经历了家庭互联网从无到有的人，小的时候家里有个电视就算是富裕家庭了，一般的家庭还仅限于有个收音机；后来逐渐的，电视，彩色电视，电话，录像机，那个时候还有一种叫录像厅的地方呢，又租录像带的地方，5毛钱一周；然后出现了VCD，DVD，大哥大，BB机，掌中宝娱乐的东西越来越丰富。</p><p>之后我到外面上高中，那是2002年，那个时候已经有网吧了，但是电脑还不是普通家庭可以承受的。</p><p>等到我上了大学的时候，就到了2005年，彼时，小灵通还有一席之地，网吧遍地开花，上网一个电话，车接车送，包夜5元还送面包和可乐。但是学校里有笔记本的同学依然是少数，很多时候大家还是用U盘和MP3，MP4来互相拷贝东西，移动硬盘由于造价比较高，并不普及，而且，120G的都算是大容量存储了。</p><p>等毕业后，移动硬盘算是比较普及的，但是依然不大，320G和500G的都算大容量了，因为那个年代，资源的体积也是很小的。</p><p>逐渐的，很多东西变成了消费品，手机的普及，家庭宽带的普及，3G的出现和4G的升级，互联网才开始完全平民化，我个人来讲，3G的出现时一个转折点，4G的出现让很多想法得以实现。资源的质量也越来越高，以前的120p的资源，到后来的480，然后进化到720p，1080p;后来之间开始普及的2k，4k，蓝光等。存储空间也开始越来越便宜，从1T的hdd到现在消费级别的1T的ssd。</p><p>手机，电视，电脑，这是家庭的网络基础互联装备，以前一个硬盘到处插不觉得麻烦，现在建个网路共享我都觉得不方便，所以逐渐的，开始了NAS的路线。</p><p>NAS所需的功能，和是否需要NAS都是看个人和家庭的需求是否有必要，否则就是吃灰的产品。那么一个NAS，对我来讲需要以下的功能。</p><h2 id="1-1-流媒体"><a href="#1-1-流媒体" class="headerlink" title="1.1 流媒体"></a>1.1 流媒体</h2><p>彼时靠文件夹来分辨是什么电影，什么电视剧等等，资源混在一起，或者分成不同目录，甚至不同的硬盘装不同的东西，但是看的时候依然麻烦，而且目前网页观看也成为了大家容易接收的方式，以前电脑必装的千千静听，realplayer,xmplaoer,potplayer等等播放器，如今也变的鲜少有人问津。所以，流媒体服务就成为了一个比较基础的功能，应该能够做到，海报，简介，自动下载字幕，播放，分类这些基础的功能，下面是能够满足这几项条件的推荐。</p><ul><li>Jellyfin</li></ul><p>免费，开源，.Net Core，有TV端，Android端，网页端，PC端，而且，都免费，但是有点小缺点，就是硬解，遇到不支持的格式的就会强制硬解，而且使用服务端硬解，而不会使用本地硬解。</p><ul><li>Emby</li></ul><p>Jellyfin就是从这分家的，因为Emby有收费订阅，TV端就需要订阅，其他的几乎一样。据说硬解能力比Jellyfin强。</p><ul><li>Plex</li></ul><p>这是个很强的产品，大部分都推荐的，但是，订阅后体检更好。TV，手机端都需要订阅后才能用，这个好像是本地硬解，不占用服务器资源，只用了一次，所以不是很确定。</p><ul><li>elfilm</li></ul><p><a href="http://getelfilm.com/">http://getelfilm.com/</a></p><h2 id="1-2-下载"><a href="#1-2-下载" class="headerlink" title="1.2 下载"></a>1.2 下载</h2><ul><li>qBittorrent</li></ul><p>同时满足了BT下载和挂PT的需求，以前一直都是使用aria2的，但是aria2下载BT和PT需要单独的配置，不能一个端直接满足，所以，最后还是使用了这个。</p><ul><li>aria2</li></ul><p>老牌下载工具</p><h2 id="1-3-Home-Assistant"><a href="#1-3-Home-Assistant" class="headerlink" title="1.3 Home Assistant"></a>1.3 Home Assistant</h2><p>基础的家庭物联网工具，我是比较早接触智能家居设备的，这也导致了我家的产品比较割裂，空气净化器是，空调是格力的，扫地机是小米的，电视是乐视的，可视猫眼是叮咚，门锁是美的，有了HomeAssistant后，可以将其中一部分整合到上面。</p><h2 id="1-4-旁路网关"><a href="#1-4-旁路网关" class="headerlink" title="1.4 旁路网关"></a>1.4 旁路网关</h2><p>流畅的网络体验。</p><h2 id="1-5-文件共享"><a href="#1-5-文件共享" class="headerlink" title="1.5 文件共享"></a>1.5 文件共享</h2><p>Linux下比较流行的就是SMB，但是现在看来，好像并不是常用的了。</p><h2 id="1-6-可扩展性"><a href="#1-6-可扩展性" class="headerlink" title="1.6 可扩展性"></a>1.6 可扩展性</h2><h3 id="1-6-1-Docker"><a href="#1-6-1-Docker" class="headerlink" title="1.6.1 Docker"></a>1.6.1 Docker</h3><h4 id="1-6-1-1-Home-Assistant"><a href="#1-6-1-1-Home-Assistant" class="headerlink" title="1.6.1.1 Home Assistant"></a>1.6.1.1 Home Assistant</h4><p>家庭物联网</p><h4 id="1-6-1-2-qBittorrent"><a href="#1-6-1-2-qBittorrent" class="headerlink" title="1.6.1.2 qBittorrent"></a>1.6.1.2 qBittorrent</h4><p>既满足bt又能满足pt</p><h4 id="1-6-1-3-Jellyfin"><a href="#1-6-1-3-Jellyfin" class="headerlink" title="1.6.1.3 Jellyfin"></a>1.6.1.3 Jellyfin</h4><p>多端免费的媒体管理，自动刮削，硬解。</p><h4 id="1-6-1-4-签到"><a href="#1-6-1-4-签到" class="headerlink" title="1.6.1.4 签到"></a>1.6.1.4 签到</h4><p>免去了每天手动签到的麻烦过程，但是gthub actions可以替代。</p><h4 id="1-6-1-5-百度云"><a href="#1-6-1-5-百度云" class="headerlink" title="1.6.1.5 百度云"></a>1.6.1.5 百度云</h4><h3 id="1-6-2-虚拟机"><a href="#1-6-2-虚拟机" class="headerlink" title="1.6.2 虚拟机"></a>1.6.2 虚拟机</h3><h4 id="1-6-2-1-windows"><a href="#1-6-2-1-windows" class="headerlink" title="1.6.2.1 windows"></a>1.6.2.1 windows</h4><p>挂游戏，一般来说我来玩传奇的时候会挂机。</p><h4 id="1-6-2-2-linux"><a href="#1-6-2-2-linux" class="headerlink" title="1.6.2.2 linux"></a>1.6.2.2 linux</h4><p>我用来ssh，远程管理k8s。其实nas本身就是Linux。</p><h2 id="1-7-云"><a href="#1-7-云" class="headerlink" title="1.7 云"></a>1.7 云</h2><ul><li>Nextcloud</li></ul><h2 id="1-8-ZeroTier"><a href="#1-8-ZeroTier" class="headerlink" title="1.8 ZeroTier"></a>1.8 ZeroTier</h2><ul><li>异地访问</li><li>VPN直连</li></ul><h2 id="frpc"><a href="#frpc" class="headerlink" title="frpc"></a>frpc</h2><ul><li>内网穿透</li></ul><h2 id="1-9-选用什么系统？"><a href="#1-9-选用什么系统？" class="headerlink" title="1.9 选用什么系统？"></a>1.9 选用什么系统？</h2><h3 id="1-9-1-群晖"><a href="#1-9-1-群晖" class="headerlink" title="1.9.1 群晖"></a>1.9.1 群晖</h3><h4 id="1-9-1-1-黑群晖"><a href="#1-9-1-1-黑群晖" class="headerlink" title="1.9.1.1 黑群晖"></a>1.9.1.1 黑群晖</h4><p>内网穿透、稳定的应用（也不一定）、同步、备份。<br>虽然免费，但是升级什么的比较麻烦。</p><h4 id="1-9-1-2-白群晖"><a href="#1-9-1-2-白群晖" class="headerlink" title="1.9.1.2 白群晖"></a>1.9.1.2 白群晖</h4><p>内网穿透、稳定的应用（也不一定）、同步、备份、稳定、可升级、贵。</p><p>我觉得性价比不高。</p><h3 id="1-9-2-ProxmoxVE（推荐★★★★★）"><a href="#1-9-2-ProxmoxVE（推荐★★★★★）" class="headerlink" title="1.9.2 ProxmoxVE（推荐★★★★★）"></a>1.9.2 ProxmoxVE（推荐★★★★★）</h3><p>其本质上是一个Debian系统，用起来熟悉。</p><h4 id="1-9-2-1-zfs存储"><a href="#1-9-2-1-zfs存储" class="headerlink" title="1.9.2.1 zfs存储"></a>1.9.2.1 zfs存储</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /dev/disk/by-id/<br>total 0<br>lrwxrwxrwx 1 root root  9 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000 -&gt; ../../sda<br>lrwxrwxrwx 1 root root 10 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000-part1 -&gt; ../../sda1<br>lrwxrwxrwx 1 root root 10 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000-part2 -&gt; ../../sda2<br>lrwxrwxrwx 1 root root 10 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000-part3 -&gt; ../../sda3<br>lrwxrwxrwx 1 root root  9 Dec 30 10:29 ata-ST99999999-******-****** -&gt; ../../sdc<br>lrwxrwxrwx 1 root root  9 Dec 30 10:29 ata-TOSHIBA_******_****** -&gt; ../../sdb<br><br><span class="hljs-comment">#raid-0</span><br>zpool create -f -o ashift=12 nas /dev/disk/by-id/ata-ST99999999-******-****** /dev/disk/by-id/ata-TOSHIBA_******_******<br><br><span class="hljs-comment"># 加新硬盘</span><br>zpool attach nas /dev/disk/by-id/ata-ST88888888-******-******<br></code></pre></td></tr></table></figure><p>上面完成后会在根目录下生成一个nas文件夹，就是存储池的空间了。</p><p>软raid<br>创建存储池<br>做为目录</p><h4 id="1-9-2-2-软路由"><a href="#1-9-2-2-软路由" class="headerlink" title="1.9.2.2 软路由"></a>1.9.2.2 软路由</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">qm importdisk 100 /nas/20201229-Ipv4P-Mini-x86-64-generic-squashfs-combined-efi.img nas-local<br></code></pre></td></tr></table></figure><h4 id="1-9-2-3-lxc"><a href="#1-9-2-3-lxc" class="headerlink" title="1.9.2.3 lxc"></a>1.9.2.3 lxc</h4><p>做软路由<br>虚拟机</p><h3 id="1-9-3-FreeNAS（推荐★★★）"><a href="#1-9-3-FreeNAS（推荐★★★）" class="headerlink" title="1.9.3 FreeNAS（推荐★★★）"></a>1.9.3 FreeNAS（推荐★★★）</h3><p>免费</p><h3 id="1-9-4-OMV（OpenMediaVault）"><a href="#1-9-4-OMV（OpenMediaVault）" class="headerlink" title="1.9.4 OMV（OpenMediaVault）"></a>1.9.4 OMV（OpenMediaVault）</h3><p>免费、功能过于基础。</p><h3 id="1-9-5-Windows-Server（推荐★★★★）"><a href="#1-9-5-Windows-Server（推荐★★★★）" class="headerlink" title="1.9.5 Windows Server（推荐★★★★）"></a>1.9.5 Windows Server（推荐★★★★）</h3><p>免费，这点可能很多人不知道，Windows Server Core是有免费版本的。只是没有桌面环境，但是已经Windows Server了，桌面环境除了浪费空间和资源外，真的就没什么用了。</p><p>HyperV可以直接使用<a href="https://www.microsoft.com/zh-cn/windows-server/windows-admin-center">Windows Admin Center</a>可以直接进行管理，也可以使用Windows10 的hyper-V远程管理。</p><p>硬件直通对硬件本身要求较高，但是一般也够用了。</p><p>用起来操作很熟悉。</p><h3 id="1-9-6-Ubuntu-Server"><a href="#1-9-6-Ubuntu-Server" class="headerlink" title="1.9.6 Ubuntu Server"></a>1.9.6 Ubuntu Server</h3><h3 id="1-9-7-UNRAID"><a href="#1-9-7-UNRAID" class="headerlink" title="1.9.7 UNRAID"></a>1.9.7 UNRAID</h3><p>据说硬件直通性能非常好，但是收费，虽然有破解版。</p><h3 id="1-9-8-ESXI"><a href="#1-9-8-ESXI" class="headerlink" title="1.9.8 ESXI"></a>1.9.8 ESXI</h3><p>老牌。</p><h2 id="1-10-硬件上最好有什么？"><a href="#1-10-硬件上最好有什么？" class="headerlink" title="1.10 硬件上最好有什么？"></a>1.10 硬件上最好有什么？</h2><h3 id="1-10-1-网卡"><a href="#1-10-1-网卡" class="headerlink" title="1.10.1 网卡"></a>1.10.1 网卡</h3><ul><li>千兆</li><li>万兆</li></ul><h3 id="1-10-2-Raid卡"><a href="#1-10-2-Raid卡" class="headerlink" title="1.10.2 Raid卡"></a>1.10.2 Raid卡</h3><ul><li>多硬盘，也可以用软raid</li></ul><h3 id="1-10-3-热插拔"><a href="#1-10-3-热插拔" class="headerlink" title="1.10.3 热插拔"></a>1.10.3 热插拔</h3><ul><li>多盘位</li></ul><h3 id="1-10-4-USB3"><a href="#1-10-4-USB3" class="headerlink" title="1.10.4 USB3"></a>1.10.4 USB3</h3><ul><li>打印机</li></ul><h3 id="1-10-5-DC电源"><a href="#1-10-5-DC电源" class="headerlink" title="1.10.5 DC电源"></a>1.10.5 DC电源</h3><ul><li>静音</li></ul><h3 id="1-10-6-1-N块硬盘"><a href="#1-10-6-1-N块硬盘" class="headerlink" title="1.10.6 1+N块硬盘"></a>1.10.6 1+N块硬盘</h3><ul><li>组RAID</li></ul><h1 id="2-NAS服务管理"><a href="#2-NAS服务管理" class="headerlink" title="2 NAS服务管理"></a>2 NAS服务管理</h1><h2 id="2-1-Jellyfin"><a href="#2-1-Jellyfin" class="headerlink" title="2.1 Jellyfin"></a>2.1 Jellyfin</h2><h3 id="2-1-1-电影多版本管理"><a href="#2-1-1-电影多版本管理" class="headerlink" title="2.1.1 电影多版本管理"></a>2.1.1 电影多版本管理</h3><p>以<code>Wonder Woman 1984</code>这部电影为例，我的电影都是放在<code>/nas/movies</code>里的,所以目录结构是这样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">movies/<br>└── Wonder.Woman.1984.2020<br>    ├── Wonder.Woman.1984.2020 - 1080P.mkv<br>    ├── Wonder.Woman.1984.2020 - 1080P.china.srt<br>    └── Wonder.Woman.1984.2020 - 2160p.mp4<br>    └── Wonder.Woman.1984.2020 - 8k.mp4<br>    └── Wonder.Woman.1984.2020 - 不是导演剪辑版.mp4<br>    └── Wonder.Woman.1984.2020 - 山寨版.mp4<br></code></pre></td></tr></table></figure><p>根据<code>jellyfin</code>文档显示，当多个不同格式的版本合并起来的时候，需要让文件名与文件夹名保持一直然后再后面加<code>&#123;空格&#125;&#123;连字符&#125;&#123;空格&#125;&#123;版本标签&#125;</code>的形式，这样jellyfin就可以进行识别，在电影的界面中就可以进行版本的切换选择，在这一点上不如plex方便了。 其中标签是可以自定义的，连字符不支持<code>.</code>和空格。</p><p>** 官方的文档中推荐的文件夹名是<code>Wonder.Woman.1984 (2020)</code> ，但是实际使用中我发现<code>Wonder.Woman.1984.2020</code>也是可以的，在文件管理上，名字中带有空格对我来讲会不大习惯，所以可以根据自己习惯选择对名称的管理。</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://jellyfin.org/docs/general/server/media/movies.html">https://jellyfin.org/docs/general/server/media/movies.html</a></li></ul><h3 id="2-1-2-字幕中的方块"><a href="#2-1-2-字幕中的方块" class="headerlink" title="2.1.2 字幕中的方块"></a>2.1.2 字幕中的方块</h3><p>一般的解决方式都是在字幕中进行设置，这种方式是使用转码烧录的形式，对cpu和内存都会进行消耗，对于性能比较低的nas来说，压力很大，比如我的j1900矿渣。目前有一个简单的解决办法，升级到<code>&gt;Jellyfin 10.7.0</code>的版本，目前还是<code>rc</code>版，这个版本支持加载自定义的字体了<code>控制台&gt;播放&gt;备用字体文件路径</code>，就解决了。</p><h2 id="2-2-docker-compose"><a href="#2-2-docker-compose" class="headerlink" title="2.2 docker-compose"></a>2.2 docker-compose</h2><h3 id="2-2-1-安装docker"><a href="#2-2-1-安装docker" class="headerlink" title="2.2 1 安装docker"></a>2.2 1 安装docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt install apt-transport-https<br>apt upgrade -y<br>curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;deb [arch=amd64] https://download.docker.com/linux/debian <span class="hljs-subst">$(lsb_release -cs)</span> stable&quot;</span> &gt; /etc/apt/sources.list.d/docker.list<br></code></pre></td></tr></table></figure><h4 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h4><ul><li><a href="https://docs.docker.com/engine/install/debian/">https://docs.docker.com/engine/install/debian/</a></li></ul><h3 id="2-2-2-安装docker-compose"><a href="#2-2-2-安装docker-compose" class="headerlink" title="2.2 2 安装docker-compose"></a>2.2 2 安装docker-compose</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt install docker-ce docker-compose<br></code></pre></td></tr></table></figure><h3 id="2-2-3-前期准备"><a href="#2-2-3-前期准备" class="headerlink" title="2.2 3 前期准备"></a>2.2 3 前期准备</h3><p>创建子网隔离，非必须。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker network create --subnet 10.10.10.0/24 pve-subnet<br></code></pre></td></tr></table></figure><p>该处的<code>pve-subnet</code>对应下面<code>docker-compose.yml</code>文件中<code>networks</code>节点下的<code>name</code>,可以忽略，<code>docker-compose</code>会自动建立。</p><h3 id="2-2-4-为什么使用docker-compose"><a href="#2-2-4-为什么使用docker-compose" class="headerlink" title="2.2 4 为什么使用docker-compose"></a>2.2 4 为什么使用docker-compose</h3><p>docker虽然部署与管理变的容易，但是当遇到版本升级的时候就需要重新使用命令行进行一次部署，然而很多时候我都懒得进行本分，目前工作中使用的是k8s，在家用nas上我觉得实在是没必要，于是比较传统的<code>docker-compose</code>就是一个很好的解决方案。<br>每当有版本升级的时候只要修改<code>docker-compose.yml</code>文件中对应的镜像标签，然后重新docker-compose up -d就自动进行拉取部署升级，不会影响其他未修改配置的镜像，就方便很多了。</p><h2 id="2-3-Home-Assistant"><a href="#2-3-Home-Assistant" class="headerlink" title="2.3 Home Assistant"></a>2.3 Home Assistant</h2><h3 id="2-3-1-调用本地图片"><a href="#2-3-1-调用本地图片" class="headerlink" title="2.3.1 调用本地图片"></a>2.3.1 调用本地图片</h3><p>在<code>configuration.yaml</code>文件的位置建立一个<code>www</code>文件夹，将要引用的文件放进去，在配置文件中使用<code>/local</code>对应的就是<code>www</code>文件夹中的文件，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"> blueprints<br>│   └── automation<br>│       └── homeassistant<br>│           ├── motion_light.yaml<br>│           └── notify_leaving_zone.yaml<br>├── configuration.yaml<br>├── deps<br>├── groups.yaml<br>├── home-assistant.log<br>├── home-assistant_v2.db<br>├── scenes.yaml<br>├── scripts.yaml<br>├── secrets.yaml<br>├── tts<br>└── www<br>    └── floorplan.png<br></code></pre></td></tr></table></figure><p>如果要在配置中调用<code>www/floorplan.png</code>则对应的配置文件为:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">type:</span> <span class="hljs-string">picture-elements</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">/local/floorplan.png</span><br><span class="hljs-attr">elements:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-badge</span><br>    <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.updater</span><br>    <span class="hljs-attr">style:</span><br>      <span class="hljs-attr">top:</span> <span class="hljs-number">65</span><span class="hljs-string">%</span><br>      <span class="hljs-attr">left:</span> <span class="hljs-number">38</span><span class="hljs-string">%</span><br></code></pre></td></tr></table></figure><h3 id="2-3-2-水位流量采集"><a href="#2-3-2-水位流量采集" class="headerlink" title="2.3.2 水位流量采集"></a>2.3.2 水位流量采集</h3><p>我在天气好的时候会出去钓鱼，但是松花江如果在汛期的时候涨水，有些地方就去不了了，为了不耽误时间，我发现松辽水利网每天8点会发布一次当前的水位流量，所以我进行了采集，这样出门前看一下水位和流速来判断可以去哪个地方钓鱼，避免白跑一趟。</p><p>在<code>configuration.yaml</code>下面加入下面的内容，就可以在面板中加载进来了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sensor:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">scrape</span><br>    <span class="hljs-attr">resource:</span> <span class="hljs-string">http://www.slwr.gov.cn/swjgzfw/sssq.asp</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">slwr</span> <span class="hljs-string">shuiwei</span><br>    <span class="hljs-attr">select:</span> <span class="hljs-string">&#x27;script&#x27;</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">1</span><br>    <span class="hljs-attr">scan_interval:</span> <span class="hljs-number">3600</span><br>    <span class="hljs-attr">value_template:</span> <span class="hljs-string">&gt;-</span><br><span class="hljs-string">      &#123;&#123; (value | replace (&quot;cvt(&quot;,&quot;&quot;) | replace (&quot;);&quot;,&quot;&quot;) | replace (&quot;&#x27;&quot;,&quot;&quot;) ) &#125;&#125;</span><br><span class="hljs-string"></span>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">scrape</span><br>    <span class="hljs-attr">resource:</span> <span class="hljs-string">http://www.slwr.gov.cn/swjgzfw/sssq.asp</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">slwr</span> <span class="hljs-string">liuliang</span><br>    <span class="hljs-attr">select:</span> <span class="hljs-string">&#x27;font&#x27;</span><br>    <span class="hljs-attr">index:</span> <span class="hljs-number">8</span><br>    <span class="hljs-attr">scan_interval:</span> <span class="hljs-number">3600</span><br></code></pre></td></tr></table></figure><h3 id="2-3-3-小米扫地机器人"><a href="#2-3-3-小米扫地机器人" class="headerlink" title="2.3.3 小米扫地机器人"></a>2.3.3 小米扫地机器人</h3><p>第一二代的小米扫地机，使用的是<code>Token</code>的方式加入的，目前有一个简单的工具<a href="https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor">https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor</a> 运行后输入账号密码就可以获取到局域网中的<code>IP</code>和<code>Token</code>、<code>设备Id</code>，我们这里使用<code>IP</code>和<code>Token</code>就够了。<br>获取到信息后，在<code>configuration.yaml</code>下面加入下面的内容，就可以在面板中加载进来了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">vacuum:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">xiaomi_miio</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.69</span><br>    <span class="hljs-attr">token:</span> <span class="hljs-string">**********************************</span><br></code></pre></td></tr></table></figure><h3 id="2-3-4-格力宁韵空调"><a href="#2-3-4-格力宁韵空调" class="headerlink" title="2.3.4 格力宁韵空调"></a>2.3.4 格力宁韵空调</h3><p><a href="https://github.com/RobHofmann/HomeAssistant-GreeClimateComponent">https://github.com/RobHofmann/HomeAssistant-GreeClimateComponent</a><br>下载最新版本解压后如下</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|   climate.yaml</span><br><span class="hljs-string">|   configuration.yaml</span><br><span class="hljs-string">|   info.md</span><br><span class="hljs-string">|   LICENSE</span><br><span class="hljs-string">|   README.md</span><br><span class="hljs-string">|</span><br>+---.github<br><span class="hljs-string">|   \---ISSUE_TEMPLATE</span><br><span class="hljs-string">|           bug_report.md</span><br><span class="hljs-string">|           feature_request.md</span><br><span class="hljs-string">|</span><br>\---custom_components<br>    \---gree<br>            climate.py<br>            manifest.json<br>            __init__.py<br></code></pre></td></tr></table></figure><p>如果<code>configuration.yaml</code>同级目录下没有<code>custom_components</code>则直接复制进去，如果已经存在，则复制下面的<code>gree</code>到<code>custom_components</code>下，然后在复制<code>climate.yaml</code>到<code>configuration.yaml</code>同级目录,之后编辑&#96;&#96;configuration.yaml<code>同级目录加入一行</code>climate: !include climate.yaml&#96;。</p><p>使用<code>格力+</code>接入空调，这样就能在路由器中看到空调的<code>IP</code>和<code>MAC</code>，下面会用到，虽然我是在苏宁购买的，但是苏宁的app实在是不好用，于是下载了<code>格力+</code>，在添加设备的时候直接选择<code>宁韵</code>，然后重置空调的<code>wifi</code>，就可以连接了，如果连不上，那么修改<code>wifi</code>里的<code>2.4G</code>的<code>无线模式</code>为<code>11gb</code>开头的模式。</p><p>之后编辑<code>climate.yaml</code>中的内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">platform:</span> <span class="hljs-string">gree</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">起一个名字，例如ningyun_ac</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">空调的IP地址</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br>  <span class="hljs-attr">mac:</span> <span class="hljs-string">&#x27;空调的MAC地址，可以是-分隔，也可以是:分隔&#x27;</span><br>  <span class="hljs-attr">target_temp_step:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">lights:</span> <span class="hljs-string">input_boolean.first_ac_lights</span><br>  <span class="hljs-attr">health:</span> <span class="hljs-string">input_boolean.first_ac_health</span><br>  <span class="hljs-attr">sleep:</span> <span class="hljs-string">input_boolean.first_ac_sleep</span><br>  <span class="hljs-attr">powersave:</span> <span class="hljs-string">input_boolean.first_ac_powersave</span><br></code></pre></td></tr></table></figure><h3 id="2-3-x-lovelace"><a href="#2-3-x-lovelace" class="headerlink" title="2.3.x lovelace"></a>2.3.x lovelace</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">保利·上城</span><br><span class="hljs-attr">views:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">panel:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">title:</span> <span class="hljs-string">Home</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;hass:home-assistant&#x27;</span><br>    <span class="hljs-attr">badges:</span> []<br>    <span class="hljs-attr">cards:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">vertical-stack</span><br>        <span class="hljs-attr">cards:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">&#x27;custom:weather-card&#x27;</span><br>            <span class="hljs-attr">entity:</span> <span class="hljs-string">weather.bao_li_shang_cheng</span><br>            <span class="hljs-attr">number_of_forecasts:</span> <span class="hljs-string">&#x27;5&#x27;</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">horizontal-stack</span><br>            <span class="hljs-attr">cards:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">entity</span><br>                <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.slwr_shuiwei</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">水位</span><br>                <span class="hljs-attr">unit:</span> <span class="hljs-string">米</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">entity</span><br>                <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.slwr_liuliang</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">流量</span><br>                <span class="hljs-attr">unit:</span> <span class="hljs-string">立方米</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">picture-elements</span><br>        <span class="hljs-attr">elements:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><br>            <span class="hljs-attr">entity:</span> <span class="hljs-string">vacuum.xiaomi_vacuum_cleaner</span><br>            <span class="hljs-attr">style:</span><br>              <span class="hljs-attr">top:</span> <span class="hljs-number">65</span><span class="hljs-string">%</span><br>              <span class="hljs-attr">left:</span> <span class="hljs-number">35</span><span class="hljs-string">%</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><br>            <span class="hljs-attr">entity:</span> <span class="hljs-string">climate.ningyun_ac</span><br>            <span class="hljs-attr">style:</span><br>              <span class="hljs-attr">top:</span> <span class="hljs-number">8</span><span class="hljs-string">%</span><br>              <span class="hljs-attr">left:</span> <span class="hljs-number">35</span><span class="hljs-string">%</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">/local/floorplan.png</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">vertical-stack</span><br>        <span class="hljs-attr">cards:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">thermostat</span><br>            <span class="hljs-attr">entity:</span> <span class="hljs-string">climate.ningyun_ac</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">格力宁韵</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">picture-glance</span><br>            <span class="hljs-attr">image:</span> <span class="hljs-string">/local/img/vacuum.png</span><br>            <span class="hljs-attr">entities:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">vacuum.xiaomi_vacuum_cleaner</span><br>            <span class="hljs-attr">tap_action:</span><br>              <span class="hljs-attr">action:</span> <span class="hljs-string">more-info</span><br>            <span class="hljs-attr">hold_action:</span><br>              <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><br>            <span class="hljs-attr">title:</span> <span class="hljs-string">小米</span><br>            <span class="hljs-attr">entity:</span> <span class="hljs-string">vacuum.xiaomi_vacuum_cleaner</span><br></code></pre></td></tr></table></figure><h2 id="2-4-syncthing"><a href="#2-4-syncthing" class="headerlink" title="2.4 syncthing"></a>2.4 syncthing</h2><p>资源占用小，内网发现，全球发现，内网穿透。</p><p>要注意的是从其他设备同步过来的文件夹，默认情况下会出现在<code>/config</code>下，</p><h2 id="2-5-frp"><a href="#2-5-frp" class="headerlink" title="2.5 frp"></a>2.5 frp</h2><p>如今我遭遇了无法在家的问题，但是手机里的资料还是要同步回家里的NAS，尝试了ngrok、autossh等方案之后，最后还是选定了老牌的frp，之前也用过，但是不知道是版本的问题还是配置的问题，会导致我的网络卡死，这次重新尝试后发现，很稳定，资源的消耗也变小了，在vps上使用nginx绑定泛域名到frps，然后再用frps绑定泛域名，之后直接使用子域名访问各个服务。</p><h3 id="2-5-1-服务端nginx配置-etc-nginx-conf-d-nas-conf"><a href="#2-5-1-服务端nginx配置-etc-nginx-conf-d-nas-conf" class="headerlink" title="2.5.1 服务端nginx配置/etc/nginx/conf.d/nas.conf"></a>2.5.1 服务端nginx配置<code>/etc/nginx/conf.d/nas.conf</code></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs ini">server &#123;<br>    listen 80<span class="hljs-comment">;</span><br>    server_name *.phub.ml<span class="hljs-comment">;</span><br>    return 301 https://$host$request_uri<span class="hljs-comment">;</span><br>&#125;<br><br>server &#123;<br><span class="hljs-comment">#    listen [::]:443 ssl ipv6only=on; # managed by Certbot</span><br>    listen 443 ssl http2<span class="hljs-comment">; # managed by Certbot</span><br>    server_name *.nas.com<span class="hljs-comment">;</span><br><br>    ssl_certificate /etc/letsencrypt/live/nas.com/fullchain.pem<span class="hljs-comment">; # managed by Certbot</span><br>    ssl_certificate_key /etc/letsencrypt/live/nas.com/privkey.pem<span class="hljs-comment">; # managed by Certbot</span><br>    include /etc/letsencrypt/options-ssl-nginx.conf<span class="hljs-comment">; # managed by Certbot</span><br><br>    client_max_body_size 500m<span class="hljs-comment">;</span><br>    client_body_buffer_size 256k<span class="hljs-comment">;</span><br>    client_header_timeout 3m<span class="hljs-comment">;</span><br>    client_body_timeout 3m<span class="hljs-comment">;</span><br>    send_timeout 3m<span class="hljs-comment">;</span><br>    proxy_connect_timeout 300s<span class="hljs-comment">;</span><br>    proxy_read_timeout 300s<span class="hljs-comment">;</span><br>    proxy_send_timeout 300s<span class="hljs-comment">;</span><br>    proxy_buffer_size 64k<span class="hljs-comment">;</span><br>    proxy_buffers 4 32k<span class="hljs-comment">;</span><br>    proxy_busy_buffers_size 64k<span class="hljs-comment">;</span><br>    proxy_temp_file_write_size 64k<span class="hljs-comment">;</span><br>    proxy_ignore_client_abort on<span class="hljs-comment">;</span><br>    gzip on<span class="hljs-comment">;</span><br>    gzip_min_length 1k<span class="hljs-comment">;</span><br>    gzip_buffers 4 16k<span class="hljs-comment">;</span><br>    <span class="hljs-comment">#gzip_http_version 1.0;</span><br>    gzip_comp_level 5<span class="hljs-comment">;</span><br>    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png<span class="hljs-comment">;</span><br>    gzip_vary off<span class="hljs-comment">;</span><br>    gzip_disable &quot;MSIE <span class="hljs-section">[1-6]</span>\.&quot;<span class="hljs-comment">;</span><br>    location /api/websocket &#123;<br>       proxy_pass http://127.0.0.1:27001/api/websocket<span class="hljs-comment">;</span><br>        proxy_read_timeout 60s<span class="hljs-comment">;</span><br>        proxy_set_header Host $host<span class="hljs-comment">;</span><br>        proxy_set_header X-Real_IP $remote_addr<span class="hljs-comment">;</span><br>        proxy_set_header X-Forwarded-for $remote_addr<span class="hljs-comment">;</span><br>        proxy_http_version 1.1<span class="hljs-comment">;</span><br>        proxy_set_header Upgrade $http_upgrade<span class="hljs-comment">;</span><br>        proxy_set_header Connection &#x27;Upgrade&#x27;<span class="hljs-comment">;</span><br>    &#125;<br>    location / &#123;<br>        proxy_pass http://127.0.0.1:27001<span class="hljs-comment">;</span><br>        proxy_set_header Host $host<span class="hljs-comment">;</span><br>        proxy_redirect off<span class="hljs-comment">;</span><br>        proxy_buffering off<span class="hljs-comment">;</span><br>        proxy_http_version 1.1<span class="hljs-comment">;</span><br>        proxy_ssl_server_name on<span class="hljs-comment">;</span><br>        proxy_set_header X-Real-IP $remote_addr<span class="hljs-comment">;</span><br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for<span class="hljs-comment">;</span><br>        proxy_set_header X-Forwarded-Proto $scheme<span class="hljs-comment">;</span><br>        proxy_set_header Upgrade $http_upgrade<span class="hljs-comment">;</span><br>        proxy_set_header Connection &quot;upgrade&quot;<span class="hljs-comment">;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-2-服务端的frps配置-etc-frp-frps-ini"><a href="#2-5-2-服务端的frps配置-etc-frp-frps-ini" class="headerlink" title="2.5.2 服务端的frps配置/etc/frp/frps.ini"></a>2.5.2 服务端的frps配置<code>/etc/frp/frps.ini</code></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">bind_addr</span> = <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br><span class="hljs-attr">bind_port</span> = <span class="hljs-number">7557</span><br><span class="hljs-attr">bind_udp_port</span> = <span class="hljs-number">5775</span><br><span class="hljs-attr">token</span> = ***************************<br><span class="hljs-attr">vhost_http_port</span> = <span class="hljs-number">27001</span><br><span class="hljs-attr">vhost_https_port</span> = <span class="hljs-number">5443</span><br><span class="hljs-attr">tcp_mux</span> = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="2-5-3-客户端的frpc配置frpc-ini"><a href="#2-5-3-客户端的frpc配置frpc-ini" class="headerlink" title="2.5.3 客户端的frpc配置frpc.ini"></a>2.5.3 客户端的frpc配置<code>frpc.ini</code></h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[common]</span><br><span class="hljs-attr">server_addr</span> = <span class="hljs-number">000.000</span>.<span class="hljs-number">000.000</span><br><span class="hljs-attr">server_port</span> = <span class="hljs-number">7557</span><br><span class="hljs-attr">tcp_mux</span>     = <span class="hljs-literal">true</span><br><span class="hljs-attr">token</span>       = *******************<br><br><span class="hljs-section">[ssh]</span><br><span class="hljs-attr">type</span> = tcp<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">22</span><br><span class="hljs-attr">remote_port</span> = <span class="hljs-number">20002</span><br><br><span class="hljs-section">[qBittorent]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8008</span><br><span class="hljs-attr">custom_domains</span> = bt.nas.com<br><br><span class="hljs-section">[syncthing]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8384</span><br><span class="hljs-attr">custom_domains</span> = sync.nas.com<br><br><span class="hljs-section">[images]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8698</span><br><span class="hljs-attr">custom_domains</span> = images.nas.com<br><br><span class="hljs-section">[openwrt]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_ip</span> = <span class="hljs-number">192.168</span>.<span class="hljs-number">0.253</span><br><span class="hljs-attr">local_port</span> = <span class="hljs-number">80</span><br><span class="hljs-attr">custom_domains</span> = gw.nas.com<br><br><span class="hljs-section">[movies]</span><br><span class="hljs-attr">type</span> = http<br><span class="hljs-attr">local_port</span> = <span class="hljs-number">8096</span><br><span class="hljs-attr">custom_domains</span> = movies.nas.com<br></code></pre></td></tr></table></figure><h3 id="2-5-4-重点内容"><a href="#2-5-4-重点内容" class="headerlink" title="2.5.4 重点内容"></a>2.5.4 重点内容</h3><ul><li>nginx中的<code>proxy_pass http://127.0.0.1:27001</code>对应到frps.ini中的<code>vhost_https_port = 5443</code></li><li>frps.ini中的<code>bind_port = 7557</code>对应到客户端中的<code>server_port = 7557</code></li><li>frpc中会出现<code>[E] [control.go:158] [c4426f709c4d9725] work connection closed before response StartWorkConn message: EOF</code>的错误信息，目前没找到解决办法，但是还没发现耽误使用的情况</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="linux下rename命令进行批量重命名"><a href="#linux下rename命令进行批量重命名" class="headerlink" title="linux下rename命令进行批量重命名"></a>linux下rename命令进行批量重命名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">rename <span class="hljs-string">&#x27;s///g&#x27;</span> *.mp4<br>例如<br>rename <span class="hljs-string">&#x27;s/cowboy\.bebop\.//g&#x27;</span> *.mkv<br>将cowboy.bebop替换为空，也就是删掉<br></code></pre></td></tr></table></figure><p>其中<code>s</code>为开始，第一个<code>/</code>后面写要查找的字符串,第二个<code>/</code>进行分隔，第三个<code>/</code>前面写替换的字符串，然后<code>g</code>结尾</p><p>特殊字符用<code>\</code>进行转义，包括<code>空格</code>和<code>[]&#123;&#125;().\</code>~!@#$%^&amp;*_+-&#x3D;;:’”&lt;&gt;,?&#96;之类的，总之就是会影响正则的都要进行转义</p><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">qbittorrent:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ghcr.io/linuxserver/qbittorrent:amd64-latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">qbittorrent</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">UMASK_SET=022</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WEBUI_PORT=8008</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/opt/qbittorrent/config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas:/downloads</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6969</span><span class="hljs-string">:6969</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6969</span><span class="hljs-string">:6969/udp</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8008</span><span class="hljs-string">:8008</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.5&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">200M</span><br>  <span class="hljs-attr">home-assistant:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">homeassistant/home-assistant:2020.12.1</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">home-assistant</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/etc/localtime:/etc/localtime:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/opt/home-assistant/config:/config</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">&#x27;host&#x27;</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.5&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">200M</span><br>  <span class="hljs-attr">syncthing:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">ghcr.io/linuxserver/syncthing</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">syncthing</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">syncthing</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/nas/syncthing:/config</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8384</span><span class="hljs-string">:8384</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">22000</span><span class="hljs-string">:22000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">21027</span><span class="hljs-string">:21027/udp</span><br>    <span class="hljs-attr">deploy:</span><br>      <span class="hljs-attr">resources:</span><br>        <span class="hljs-attr">limits:</span><br>          <span class="hljs-attr">cpus:</span> <span class="hljs-string">&#x27;0.5&#x27;</span><br>          <span class="hljs-attr">memory:</span> <span class="hljs-string">256M</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">default:</span><br>    <span class="hljs-attr">external:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">pve-subnet</span><br></code></pre></td></tr></table></figure><p>启动<code>start.sh</code>文件里，直接使用<code>bash start.sh</code>启动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose --compatibility -f docker-compose.yml up -d<br></code></pre></td></tr></table></figure><p>停止了<code>stop.sh</code>文件里，直接使用<code>bash stop.sh</code>停止。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose --compatibility down<br></code></pre></td></tr></table></figure><p>增加<code>--compatibility</code>参数是因为docker不是swam的模式的情况下，<code>deploy</code>节点下对资源的限制是不起作用的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-一个NAS都应该能做什么&quot;&gt;&lt;a href=&quot;#1-一个NAS都应该能做什么&quot; class=&quot;headerlink&quot; title=&quot;1 一个NAS都应该能做什么&quot;&gt;&lt;/a&gt;1 一个NAS都应该能做什么&lt;/h1&gt;&lt;p&gt;我是一个经历了家庭互联网从无到有的人，小的时</summary>
      
    
    
    
    <category term="家庭服务" scheme="https://oujun.work/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="NAS" scheme="https://oujun.work/tags/NAS/"/>
    
    <category term="Jellyfin" scheme="https://oujun.work/tags/Jellyfin/"/>
    
    <category term="Proxmox VE" scheme="https://oujun.work/tags/Proxmox-VE/"/>
    
    <category term="PVE" scheme="https://oujun.work/tags/PVE/"/>
    
    <category term="docker" scheme="https://oujun.work/tags/docker/"/>
    
    <category term="docker-compose" scheme="https://oujun.work/tags/docker-compose/"/>
    
    <category term="homeassistan" scheme="https://oujun.work/tags/homeassistan/"/>
    
    <category term="小米" scheme="https://oujun.work/tags/%E5%B0%8F%E7%B1%B3/"/>
    
    <category term="格力" scheme="https://oujun.work/tags/%E6%A0%BC%E5%8A%9B/"/>
    
    <category term="qBittorrent" scheme="https://oujun.work/tags/qBittorrent/"/>
    
    <category term="松花江" scheme="https://oujun.work/tags/%E6%9D%BE%E8%8A%B1%E6%B1%9F/"/>
    
  </entry>
  
  <entry>
    <title>架构蓝皮书(基础版)</title>
    <link href="https://oujun.work/2019/07/16/Architecture.html"/>
    <id>https://oujun.work/2019/07/16/Architecture.html</id>
    <published>2019-07-16T05:00:00.000Z</published>
    <updated>2022-12-06T06:56:21.079Z</updated>
    
    <content type="html"><![CDATA[<p>组织架构</p><p>DevOps</p><p>K8S</p><p>Docker</p><p>Git</p><h1 id="工欲善其事，必先利其器"><a href="#工欲善其事，必先利其器" class="headerlink" title="工欲善其事，必先利其器"></a>工欲善其事，必先利其器</h1><h2 id="云"><a href="#云" class="headerlink" title="云"></a>云</h2><p>首先，当一个团队开始的时候需要有装备，硬件装备是桌椅板凳电脑网络，开发过程中需要测试环境，代码管理工具等。此时，一个局域网内的私有云就够了。但是考虑到外出和在家办公的场景，那么<a href="https://www.aliyun.com/">Aliyun</a>、Google云等这类的线上云是一个更好的选择，而且，再做CI&#x2F;CD的时候会更方便一些。然而弊端就是需要额外的支出。</p><p>代码管理工具，一般是<a href="https://github.com/">GitHub</a>，<a href="https://about.gitlab.com/">GitLab</a>，<a href="https://azure.microsoft.com/zh-cn/services/devops/">Azure DevOps</a>，这里推荐Azure DevOps。</p><h2 id="敏捷"><a href="#敏捷" class="headerlink" title="敏捷"></a>敏捷</h2><p>一个团队，再项目进程中需要一个合理的管理，节点日期，任务管理分配，时间计算等，一个有效率的团队不应该是一个大的团队，即使有了大的团队，也应该根据不同的场景进行拆分，目前看来，一个敏捷团队再3人以上，7人一下应该是比较合理的，7人以上应该也没问题，但是个人感觉，效率可能会有个折扣。</p><p>敏捷团队要做什么？按照以往的文章与成书中描述，是透明，检验，适应。</p><h3 id="透明"><a href="#透明" class="headerlink" title="透明"></a>透明</h3><p>透明是指在开发环节中保持高度的可见性，所有的成员都应该知道和理解进度和要做的内容。</p><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><p>开发过程中要做到足够的检验，用以确保开发过程中能够及时的发现重大偏差以及错误。</p><h3 id="适应"><a href="#适应" class="headerlink" title="适应"></a>适应</h3><p>在上面的检验中发现了重大的偏差以及错误，那么应该即使的调整并纠正，来检查偏差以及错误带来的损失。</p><h3 id="敏捷怎么做"><a href="#敏捷怎么做" class="headerlink" title="敏捷怎么做"></a>敏捷怎么做</h3><p>敏捷中有3个角色，分别是PO（产品负责人），SM（敏捷大师），Dev（开发人员）。</p><h4 id="产品负责人"><a href="#产品负责人" class="headerlink" title="产品负责人"></a>产品负责人</h4><h4 id="开发团队"><a href="#开发团队" class="headerlink" title="开发团队"></a>开发团队</h4><h4 id="敏捷大师"><a href="#敏捷大师" class="headerlink" title="敏捷大师"></a>敏捷大师</h4><h4 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h4><p>敏捷模式不是万能的，而且不应该为了敏捷而敏捷，在开发过程中，应该根据团队自身情况对敏捷进行调整，例如由PO担任SM的角色也是可以的。</p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p>微服务，将业务划分为最小单位，彼此独立，充分的解耦，语言无关性，一个最小化的服务可以是任意的语言进行开发，采用http或者rpc在服务之间进行交互。部署简单，对某一个服务进行升级的时候不会影响整个环境，甚至在某些集群中可以做到无感切换。</p><p>敏捷是最适合微服务开发的一种模式。</p><h1 id="Azure-DevOps"><a href="#Azure-DevOps" class="headerlink" title="Azure DevOps"></a>Azure DevOps</h1><p><a href="https://azure.microsoft.com/zh-cn/services/devops/">Azure DevOps</a>免费提供线上的版本，好处是一直使用到最新的版本，但是没有足够的本地化，当然也免去了多余的费用。</p><p>另外，<a href="https://azure.microsoft.com/zh-cn/services/devops/">Azure DevOps</a>还提供了<a href="https://go.microsoft.com/fwlink/?LinkId=2041267&clcid=0x804">本地服务器版本</a>,下载后直接在本地的服务器安装就可以使用了。</p><blockquote><p>它能做什么</p><ol><li>它提供了交互较好的板管理，并且很大程度上可以进行自定义</li><li>它有完整的长篇故事，积压工作项，任务，bug的管理</li><li>并且仓储支持Git以及VSTS自身的仓储管理</li><li>而且可以安装很多插件</li><li>还有WebHook可以有一系列的事件触发</li><li>可以接入很多第三方服务</li></ol></blockquote><p>对于使用Visual Studio进行开发的团队，Azure DevOps是一个不二选择。</p><h1 id="DDD"><a href="#DDD" class="headerlink" title="DDD"></a>DDD</h1><p>DDD,被称作为领域驱动设计，做了这么久，其实最大的难点在于聚合根的设计上，总是会出现不恰当的存在。</p><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h1 id="CQRS"><a href="#CQRS" class="headerlink" title="CQRS"></a>CQRS</h1><h2 id="EventSource"><a href="#EventSource" class="headerlink" title="EventSource"></a>EventSource</h2><h1 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h1><h2 id="健康检查"><a href="#健康检查" class="headerlink" title="健康检查"></a>健康检查</h2><p>.Net Core默认已经支持了健康检查，只要在代码中开启功能就可以了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> IServiceProvider <span class="hljs-title">ConfigureServices</span>(<span class="hljs-params">IServiceCollection services</span>)</span>&#123;<br>    ...<br>    services.AddHealthChecks();<br>    ...<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Configure</span>(<span class="hljs-params">IApplicationBuilder app</span>)</span> &#123;<br>    ...<br>    app.UseHealthChecks(<span class="hljs-string">&quot;/hc&quot;</span>, <span class="hljs-keyword">new</span> HealthCheckOptions<br>    &#123;<br>        ResultStatusCodes =<br>        &#123;<br>            [<span class="hljs-meta">Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Healthy</span>] = StatusCodes.Status200OK,<br>            [<span class="hljs-meta">Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Degraded</span>] = StatusCodes.Status200OK,<br>            [<span class="hljs-meta">Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy</span>] = StatusCodes.Status503ServiceUnavailable<br>        &#125;<br>    &#125;);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endregion</span>    ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CQRS-1"><a href="#CQRS-1" class="headerlink" title="CQRS"></a>CQRS</h2><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h2 id="多版本API"><a href="#多版本API" class="headerlink" title="多版本API"></a>多版本API</h2><h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h2 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h2><h3 id="消息中心"><a href="#消息中心" class="headerlink" title="消息中心"></a>消息中心</h3><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><h2 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h2><h2 id="kubernetes"><a href="#kubernetes" class="headerlink" title="kubernetes"></a>kubernetes</h2><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://github.com/ojdev/NetCoreTemplate">一个框架</a> 它不一定是对的，但是它有参考价值。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;组织架构&lt;/p&gt;
&lt;p&gt;DevOps&lt;/p&gt;
&lt;p&gt;K8S&lt;/p&gt;
&lt;p&gt;Docker&lt;/p&gt;
&lt;p&gt;Git&lt;/p&gt;
&lt;h1 id=&quot;工欲善其事，必先利其器&quot;&gt;&lt;a href=&quot;#工欲善其事，必先利其器&quot; class=&quot;headerlink&quot; title=&quot;工欲善其事，必先</summary>
      
    
    
    
    <category term="DevOps" scheme="https://oujun.work/categories/DevOps/"/>
    
    
    <category term="架构" scheme="https://oujun.work/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>windows-terminal</title>
    <link href="https://oujun.work/2019/06/25/windows-terminal.html"/>
    <id>https://oujun.work/2019/06/25/windows-terminal.html</id>
    <published>2019-06-25T06:04:35.000Z</published>
    <updated>2022-12-06T06:56:21.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="windows-terminal"><a href="#windows-terminal" class="headerlink" title="windows-terminal"></a>windows-terminal</h2><p>windows-terminal发布了，虽然只是预览版，目前还是很简单的部分功能，从windows商店中直接搜windows-terminal就能安装，前提是windows10已经升级1903.</p><h2 id="1903-中的-wsl"><a href="#1903-中的-wsl" class="headerlink" title="1903 中的 wsl"></a>1903 中的 wsl</h2><p>经过一个下午的摸索，大致了解了一些简单的用法，推荐安装wsl版的debian或者ubuntu，开启linux子系统后在windows商店中搜索ubuntu或者debian安装就可以了。安装完成后启动一下，推荐debian，小巧，一共73m，ubuntu18要200多m。</p><p>wsl终端体验也很好，cmd中使用ssh登录经常会出现乱行的问题，wsl中则没有这个现象，而且，目前的wsl中很多操作可以对windows本身进行修改。缺什么也可以指直接使用linux的方式安装，而写windows的秋季更新中的wsl 2.0docker可以与windows中的互通。</p><p>这样一来也免了安装cygwin或者chocolatey了。</p><p>新版的vscode好像也只是直接使用wsl来进行控制台操作了，不过目前好像还是预览版中的功能。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>因为目前没有配置界面，所有的设置都是一个json文档，所以这里稍微的解释一下配置方法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs json"><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;$schema&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://aka.ms/terminal-profiles-schema&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;actions&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;copy&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;singleLine&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+c&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;find&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+shift+f&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;paste&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ctrl+v&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;action&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;splitPane&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;split&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;auto&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;splitMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;duplicate&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;keys&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;alt+shift+d&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;copyFormatting&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;none&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;copyOnSelect&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;defaultProfile&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;launchMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;defaults&quot;</span><span class="hljs-punctuation">:</span> <br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;acrylicOpacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.43209999999999998</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;font&quot;</span><span class="hljs-punctuation">:</span> <br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;face&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Cascadia Code PL&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;suppressApplicationTitle&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;useAcrylic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <br>        <span class="hljs-punctuation">[</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell.exe&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows PowerShell&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmd.exe&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;\u547d\u4ee4\u63d0\u793a\u7b26&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;font&quot;</span><span class="hljs-punctuation">:</span> <br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;face&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MesloLGM NF&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PowerShell&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.PowershellCore&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Azure Cloud Shell&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.Azure&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ssh root@192.168.0.250&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pve-local&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;font&quot;</span><span class="hljs-punctuation">:</span> <br>                <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;face&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Cascadia Code PL&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2530&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debian&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.Wsl&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;colorScheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Vintage&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wsl.exe -d Debian -u root&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;icon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Debian (root)&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;startingDirectory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;%USERPROFILE%&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;theme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dark&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;useAcrylicInTabRow&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;windows-terminal&quot;&gt;&lt;a href=&quot;#windows-terminal&quot; class=&quot;headerlink&quot; title=&quot;windows-terminal&quot;&gt;&lt;/a&gt;windows-terminal&lt;/h2&gt;&lt;p&gt;windows-termin</summary>
      
    
    
    
    <category term="收集" scheme="https://oujun.work/categories/%E6%94%B6%E9%9B%86/"/>
    
    
    <category term="windows-terminal" scheme="https://oujun.work/tags/windows-terminal/"/>
    
    <category term="wsl" scheme="https://oujun.work/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>在AzureDevops中集成SonarQube</title>
    <link href="https://oujun.work/2019/06/12/SonarQube.html"/>
    <id>https://oujun.work/2019/06/12/SonarQube.html</id>
    <published>2019-06-12T02:48:13.000Z</published>
    <updated>2022-12-06T06:56:21.079Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.sonarqube.org/">SonarQube</a>是管理代码质量的一个平台，有商业版也可以本地部署。</p><h2 id="部署SonarQube"><a href="#部署SonarQube" class="headerlink" title="部署SonarQube"></a>部署SonarQube</h2><blockquote><p><a href="http://www.sonarqube.org/">SonarQube</a>需要Jdk的支持；</p><p>ElasticSearch是可选的；</p><p>数据库使用jdbc；</p></blockquote><p>本内容使用Docker进行部署</p><h2 id="docker-compose-yaml"><a href="#docker-compose-yaml" class="headerlink" title="docker-compose.yaml"></a>docker-compose.yaml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">CodeQuality.SonarQube:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">sonarqube:lts</span>  <span class="hljs-comment">##新版，7.x只能对master分支进行分析，需要商业授权</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">codequality-sonarqube</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SONARQUBE_JDBC_USERNAME=$&#123;DB_POSTGRESQL_USER&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SONARQUBE_JDBC_PASSWORD=$&#123;DB_POSTGRESQL_PASS&#125;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">SONARQUBE_JDBC_URL=jdbc:postgresql://$&#123;DB_POSTGRESQL_URL_AND_PORT&#125;/sonar</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2303:9000&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;2302:9002&quot;</span>    <br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/timezone:/etc/timezone&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/etc/localtime:/etc/localtime&quot;</span>          <br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br></code></pre></td></tr></table></figure><p>这里使用了pgsql。</p><p>部署完成后要进行配置，用admin进行登录，点击右上角头像，选择我的账户-&gt;安全</p><p>在令牌下输入一个令牌名选择”生成”,复制生成的令牌。<br><img src="/images/2019/06/12/1.png"></p><h2 id="AzureDevops"><a href="#AzureDevops" class="headerlink" title="AzureDevops"></a>AzureDevops</h2><p>在AzureDevops中安装<a href="https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarqube">SonarQube</a></p><p>进入azure devops中，进入项目，进入到设置中的服务连接，新建服务连接中找到SonarQube服务连接，输入任意的名称，Server Url输入http:&#x2F;&#x2F;[部署的地址]:2303,Token输入刚刚生成的令牌，保存即可。<br><img src="/images/2019/06/12/2.png"><br>以.net core生成PR审阅的时候顺便做代码质量检测举例，其他的项目有些麻烦。</p><ol><li>在生成定义中添加任务<code>Prepare Analysis Configuration</code></li><li>在<code>SonarQube Server Endpoint</code>中选择我们刚刚创建的服务连接</li><li>ProjectKey中填入一个名字，推荐使用<code>$(Build.Repository.Name)</code>用仓储的名字</li><li>Project Name可以留空</li><li>Project Version写一个版本号，推荐使用<code>PR$(Build.BuildNumber)</code><br>以上推荐做成任务组。</li></ol><p>继续添加.net core生成过程，Restore、Build、Test、项目路径要选择成解决方案文件。</p><p>然后添加任务<code>Run Code Analysis</code></p><p>添加任务<code>Publish Quality Gate Result</code></p><p>这样，在每次PR生成的时候就会自动去做代码质量检测，商业版授权，会将检测中的不合理内容直接更新到PR中，非商业代理则需要登录SonarQube去查看。</p><p>一下是实际的应用</p><h2 id="定义任务组"><a href="#定义任务组" class="headerlink" title="定义任务组"></a>定义任务组</h2><p><img src="/images/2019/06/12/3.png"><br><img src="/images/2019/06/12/4.png"></p><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p><img src="/images/2019/06/12/5.png"><br><img src="/images/2019/06/12/6.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://www.sonarqube.org/&quot;&gt;SonarQube&lt;/a&gt;是管理代码质量的一个平台，有商业版也可以本地部署。&lt;/p&gt;
&lt;h2 id=&quot;部署SonarQube&quot;&gt;&lt;a href=&quot;#部署SonarQube&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="DevOps" scheme="https://oujun.work/categories/DevOps/"/>
    
    
    <category term="DevOps" scheme="https://oujun.work/tags/DevOps/"/>
    
    <category term="Azure DevOps" scheme="https://oujun.work/tags/Azure-DevOps/"/>
    
    <category term="SonarQube" scheme="https://oujun.work/tags/SonarQube/"/>
    
  </entry>
  
</feed>
