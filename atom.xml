<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>后山</title>
  
  
  <link href="https://oujun.work/atom.xml" rel="self"/>
  
  <link href="https://oujun.work/"/>
  <updated>2024-07-12T14:13:00.000Z</updated>
  <id>https://oujun.work/</id>
  
  <author>
    <name>欧俊</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>实现抽卡功能的蓄水池抽样算法分析</title>
    <link href="https://oujun.work/2024/07/12/gacha-reservoir-sampling.html"/>
    <id>https://oujun.work/2024/07/12/gacha-reservoir-sampling.html</id>
    <published>2024-07-12T14:13:00.000Z</published>
    <updated>2024-07-12T14:13:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在游戏开发中，抽卡系统是一种常见的随机事件模拟，其背后的随机算法直接影响到玩家体验和游戏平衡性。本文将介绍如何使用蓄水池抽样算法实现抽卡功能，并通过C#代码示例进行详细解析。</p><h2 id="蓄水池抽样算法简介"><a href="#蓄水池抽样算法简介" class="headerlink" title="蓄水池抽样算法简介"></a>蓄水池抽样算法简介</h2><p>蓄水池抽样算法是一种用于从动态数据集合中随机抽取固定大小样本的算法。在抽卡系统中，我们希望能够根据卡片的概率分布，实现按照不同稀有度抽取卡片的功能，并确保在一定次数内抽取到保底稀有度的卡片。</p><h2 id="实现代码分析"><a href="#实现代码分析" class="headerlink" title="实现代码分析"></a>实现代码分析</h2><p>以下是使用C#实现的抽卡系统代码示例：</p><h3 id="定义卡片"><a href="#定义卡片" class="headerlink" title="定义卡片"></a>定义卡片</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 卡片</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;name&quot;&gt;</span>卡名字<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;token&quot;&gt;</span>用于标识卡片类型<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;probability&quot;&gt;</span>用于存储卡片的概率<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Card</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> name, <span class="hljs-built_in">string</span> token, <span class="hljs-built_in">double</span> probability</span>)</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 卡名字</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Name &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; = name;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 用于标识卡片类型</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> Token &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; = token;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 用于存储卡片的概率</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> Probability &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125; = probability;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽卡结果"><a href="#抽卡结果" class="headerlink" title="抽卡结果"></a>抽卡结果</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 抽卡结果</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">class</span> <span class="hljs-title">DrawResult</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 抽卡信息</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> Card DrawnCard &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 剩余保底次数</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; RemainingGuarantees &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="抽卡"><a href="#抽卡" class="headerlink" title="抽卡"></a>抽卡</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">Gacha</span><br>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;Card&gt; cards = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; drawCounters = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; guarantees = <span class="hljs-keyword">new</span>();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Gacha</span>(<span class="hljs-params">Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; guaranteeConfig</span>)</span><br>    &#123;<br>        <span class="hljs-comment">// 初始化保底次数配置</span><br>        guarantees = guaranteeConfig;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> guarantees.Keys)<br>        &#123;<br>            drawCounters[key] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">AddCard</span>(<span class="hljs-params">Card card</span>)</span><br>    &#123;<br>        cards.Add(card);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> DrawResult <span class="hljs-title">DrawCard</span>()</span><br>    &#123;<br>        Card drawnCard = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> token <span class="hljs-keyword">in</span> guarantees.Keys)<br>        &#123;<br>            drawCounters[token]++;<br>            <span class="hljs-keyword">if</span> (drawCounters[token] &gt;= guarantees[token])<br>            &#123;<br>                drawCounters[token] = <span class="hljs-number">0</span>;<br>                drawnCard = GetCardByToken(token);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (drawnCard == <span class="hljs-literal">null</span>)<br>        &#123;<br>            <span class="hljs-comment">// 执行蓄水池抽样算法</span><br>            <span class="hljs-built_in">double</span> totalProbability = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> card <span class="hljs-keyword">in</span> cards)<br>            &#123;<br>                totalProbability += card.Probability;<br>            &#125;<br><br>            <span class="hljs-built_in">double</span> randomPoint = <span class="hljs-keyword">new</span> Random().NextDouble() * totalProbability;<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> card <span class="hljs-keyword">in</span> cards)<br>            &#123;<br>                <span class="hljs-keyword">if</span> (randomPoint &lt; card.Probability)<br>                &#123;<br>                    drawnCard = card;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    randomPoint -= card.Probability;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (drawnCard != <span class="hljs-literal">null</span> &amp;&amp; drawCounters.ContainsKey(drawnCard.Token))<br>        &#123;<br>            drawCounters[drawnCard.Token] = <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DrawResult<br>        &#123;<br>            DrawnCard = drawnCard,<br>            RemainingGuarantees = GetRemainingGuarantees()<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-comment">// 省略了其他辅助方法的具体实现</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Card <span class="hljs-title">GetCardByToken</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> token</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> card <span class="hljs-keyword">in</span> cards)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (card.Token == token)<br>            &#123;<br>                <span class="hljs-keyword">return</span> card;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt; <span class="hljs-title">GetRemainingGuarantees</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> remainingGuarantees = <span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;();<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> token <span class="hljs-keyword">in</span> guarantees.Keys)<br>        &#123;<br>            remainingGuarantees[token] = guarantees[token] - drawCounters[token];<br>        &#125;<br>        <span class="hljs-keyword">return</span> remainingGuarantees;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp">Gacha gacha = <span class="hljs-keyword">new</span> Gacha(<span class="hljs-keyword">new</span> Dictionary&lt;<span class="hljs-built_in">string</span>, <span class="hljs-built_in">int</span>&gt;<br>        &#123;<br>            &#123; <span class="hljs-string">&quot;SSR&quot;</span>, <span class="hljs-number">80</span> &#125;,<br>            <span class="hljs-comment">//&#123; &quot;SR&quot;, 10 &#125;</span><br>        &#125;);<br><br><span class="hljs-comment">// 添加卡片及其概率</span><br><br>gacha.AddCard(<span class="hljs-keyword">new</span> Card(<span class="hljs-string">&quot;SSR Card&quot;</span>, <span class="hljs-string">&quot;SSR&quot;</span>, <span class="hljs-number">0.01</span>));  <span class="hljs-comment">// 1% 概率</span><br>gacha.AddCard(<span class="hljs-keyword">new</span> Card(<span class="hljs-string">&quot;SR Card&quot;</span>, <span class="hljs-string">&quot;SR&quot;</span>, <span class="hljs-number">0.05</span>));   <span class="hljs-comment">// 5% 概率</span><br>gacha.AddCard(<span class="hljs-keyword">new</span> Card(<span class="hljs-string">&quot;R Card&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-number">0.15</span>));    <span class="hljs-comment">// 15% 概率</span><br>gacha.AddCard(<span class="hljs-keyword">new</span> Card(<span class="hljs-string">&quot;N Card&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-number">0.79</span>));    <span class="hljs-comment">// 79% 概率</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p = <span class="hljs-number">0</span>; p &lt; <span class="hljs-number">10</span>; p++)<br>&#123;<br>    <span class="hljs-comment">// 抽卡</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        <span class="hljs-keyword">var</span> drawResult = gacha.DrawCard();<br>        Console.Write(<span class="hljs-string">$&quot;抽到一张\t<span class="hljs-subst">&#123;drawResult.DrawnCard.Name&#125;</span>&quot;</span>);<br><br>        Console.Write(<span class="hljs-string">&quot;\t保底次数:&quot;</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-keyword">var</span> guarantee <span class="hljs-keyword">in</span> drawResult.RemainingGuarantees)<br>        &#123;<br>            Console.Write(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;guarantee.Key&#125;</span>: <span class="hljs-subst">&#123;guarantee.Value&#125;</span> 剩余抽卡\t&quot;</span>);<br>        &#125;<br>        Console.WriteLine();<br>    &#125;<br>    Console.WriteLine(<span class="hljs-string">&quot;=====================================&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs shell">抽到一张        SR Card 保底次数:SSR: 79 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 78 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 77 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 76 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 75 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 74 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 73 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 72 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 71 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 70 剩余抽卡<br>=====================================<br>抽到一张        N Card  保底次数:SSR: 69 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 68 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 67 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 66 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 65 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 64 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 63 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 62 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 61 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 60 剩余抽卡<br>=====================================<br>抽到一张        R Card  保底次数:SSR: 59 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 58 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 57 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 56 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 55 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 54 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 53 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 52 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 51 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 50 剩余抽卡<br>=====================================<br>抽到一张        N Card  保底次数:SSR: 49 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 48 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 47 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 46 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 45 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 44 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 43 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 42 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 41 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 40 剩余抽卡<br>=====================================<br>抽到一张        N Card  保底次数:SSR: 39 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 38 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 37 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 36 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 35 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 34 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 33 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 32 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 31 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 30 剩余抽卡<br>=====================================<br>抽到一张        R Card  保底次数:SSR: 29 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 28 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 27 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 26 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 25 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 24 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 23 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 22 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 21 剩余抽卡<br>抽到一张        SR Card 保底次数:SSR: 20 剩余抽卡<br>=====================================<br>抽到一张        R Card  保底次数:SSR: 19 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 18 剩余抽卡<br>抽到一张        SR Card 保底次数:SSR: 17 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 16 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 15 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 14 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 13 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 12 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 11 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 10 剩余抽卡<br>=====================================<br>抽到一张        N Card  保底次数:SSR: 9 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 8 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 7 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 6 剩余抽卡<br>抽到一张        SR Card 保底次数:SSR: 5 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 4 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 3 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 2 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 1 剩余抽卡<br>抽到一张        SSR Card        保底次数:SSR: 80 剩余抽卡<br>=====================================<br>抽到一张        N Card  保底次数:SSR: 79 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 78 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 77 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 76 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 75 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 74 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 73 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 72 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 71 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 70 剩余抽卡<br>=====================================<br>抽到一张        N Card  保底次数:SSR: 69 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 68 剩余抽卡<br>抽到一张        R Card  保底次数:SSR: 67 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 66 剩余抽卡<br>抽到一张        SSR Card        保底次数:SSR: 80 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 79 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 78 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 77 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 76 剩余抽卡<br>抽到一张        N Card  保底次数:SSR: 75 剩余抽卡<br>=====================================<br></code></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本文介绍了如何利用蓄水池抽样算法实现游戏中的抽卡系统。通过动态计算卡片的概率分布并结合保底机制，确保玩家在一定抽卡次数内能够获得期望的稀有度卡片。这种算法不仅简单高效，而且能够有效控制抽卡结果的随机性，为游戏开发者提供了一种可靠的实现方案。</p><p>在实际开发中，开发者可以根据游戏的具体需求调整算法细节，如调整保底次数和卡片的概率分布，以实现更符合游戏平衡性和玩家期待的抽卡系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在游戏开发中，抽卡系统是一种常见的随机事件模拟，其背后的随机算法直接影响到玩家体验和游戏平衡性。本文将介绍如何使用蓄水池抽样算法实现抽卡功能，并通过C#代码示例进行详细解析。&lt;/p&gt;
&lt;h2 id=&quot;蓄水池抽样算法简介&quot;&gt;&lt;a href=&quot;#蓄水池抽样算法简介&quot; class</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term="抽卡" scheme="https://oujun.work/tags/%E6%8A%BD%E5%8D%A1/"/>
    
    <category term="蓄水池抽样算法" scheme="https://oujun.work/tags/%E8%93%84%E6%B0%B4%E6%B1%A0%E6%8A%BD%E6%A0%B7%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="https://oujun.work/2024/06/11/Jenkins.html"/>
    <id>https://oujun.work/2024/06/11/Jenkins.html</id>
    <published>2024-06-11T02:16:00.000Z</published>
    <updated>2024-06-12T09:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">jenkins:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">jenkins/jenkins:lts-jdk21</span><br>    <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">jenkins</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">DOCKER_TLS_CERTDIR=/certs</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">privileged:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">50000</span><span class="hljs-string">:50000</span><br>    <span class="hljs-attr">working_dir:</span> <span class="hljs-string">/var/jenkins_home</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">jenkins-data:/var/jenkins_home</span><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">jenkins-data:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">jenkins-data</span><br></code></pre></td></tr></table></figure><h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p><code>docker compose up -d</code></p><h1 id="查看密码"><a href="#查看密码" class="headerlink" title="查看密码"></a>查看密码</h1><p>仅在第一次启动容器后使用查看日志<code>docker logs jenkins-blueocean</code></p><p>日志中出现如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs logs">*************************************************************<br>*************************************************************<br>*************************************************************<br><br>Jenkins initial setup is required. An admin user has been created and a password generated.<br>Please use the following password to proceed to installation:<br><br>这里的就是管理员密码<br><br>This may also be found at: /var/jenkins_home/secrets/initialAdminPassword<br><br>*************************************************************<br>*************************************************************<br>*************************************************************<br></code></pre></td></tr></table></figure><p>如果忘记了admin密码，那么进入容器，使用cat进行查询。</p><p><code>docker exec -it jenkins-blueocean bash</code><br><code>cat /var/jenkins_home/secrets/initialAdminPassword</code></p><h1 id="Jenkins-更新地址镜像修改"><a href="#Jenkins-更新地址镜像修改" class="headerlink" title="Jenkins 更新地址镜像修改"></a>Jenkins 更新地址镜像修改</h1><p>进入到容器内部，修改 <code>/var/jenkins_home/updates/default.json</code> ,将其中的<code>updates.jenkins-ci.org/download</code> 替换为 <code>mirrors.tuna.tsinghua.edu.cn/jenkins</code></p><p>或者直接使用sed修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/https:\/\/updates.jenkins.io\/download/http:\/\/mirrors.aliyun.com\/jenkins/g&#x27; default.json<br></code></pre></td></tr></table></figure><p>有些版本是如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sed -i &#x27;s/https:\/\/updates.jenkins-ci.org\/download/http:\/\/mirrors.aliyun.com\/jenkins/g&#x27; default.json<br></code></pre></td></tr></table></figure><p>然后重启服务。</p><h1 id="Jenkins-初始化"><a href="#Jenkins-初始化" class="headerlink" title="Jenkins 初始化"></a>Jenkins 初始化</h1><p>随后使用浏览器访问<code>ip:8080</code> 填入管理员密码，点击<code>继续</code>，选择<code>安装推荐的插件</code>等待安装完成。</p><h1 id="插件更新地址镜像修改"><a href="#插件更新地址镜像修改" class="headerlink" title="插件更新地址镜像修改"></a>插件更新地址镜像修改</h1><p>进入 <code>Manage Jenkins</code> -&gt; <code>Manage Plugin</code> -&gt; <code>Advanced</code> 最下面有 <code>Update Site</code>，设置为：<code>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="运维" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Jenkins" scheme="https://oujun.work/tags/Jenkins/"/>
    
    <category term="CICD" scheme="https://oujun.work/tags/CICD/"/>
    
    <category term="DevOps" scheme="https://oujun.work/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>DDD是什么</title>
    <link href="https://oujun.work/2024/06/11/ddd.html"/>
    <id>https://oujun.work/2024/06/11/ddd.html</id>
    <published>2024-06-11T01:33:00.000Z</published>
    <updated>2024-06-11T01:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>DDD是领域（Domain）驱动（Driven）设计（Design）的简写，是一种战略设计，先绘制业务领域的关系图，同时定义与模型的边界上下文。</p><h1 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h1><p>实体是一直保持唯一标识的对象，是一个类，一般的事情情况是对应到数据库中的一张表，也就是OOP里的对象，抽象出来的一个对象。唯一标识，也可以理解成主键，通过这个主键可以在系统中找到它，这个主键还可以跨越多个边界的上下文，也就是关系，一对多，多对多，一对一这样的关系，实体的属性可以随时变化，但是标识不能改变。</p><h1 id="值对象"><a href="#值对象" class="headerlink" title="值对象"></a>值对象</h1><p>值对象没有标识，这是与实体的区别，它只有属性而且也是不可变的，如果需要改变，那么就需要创建一个新实例来替换旧实例。</p><h1 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h1><p>聚合定义了一个或多个实体的一致性边界，一个聚合包含一个根实体，可以使用过实体的标识符执行查找，聚合的作用是为了事务的不变性建模，现实中的操作是复杂的，一次动作可能包含了多个实体的变更，也就是为了数据一致性的操作，但是有一个弊端就是在分布式应用中通常是不可行的，</p><p>给可以包含单个实体且不包含子实体，聚合的定义由事务边界确定。</p><h1 id="领域服务和应用服务"><a href="#领域服务和应用服务" class="headerlink" title="领域服务和应用服务"></a>领域服务和应用服务</h1><p>在DDD的设计中，服务是实现某种逻辑且不保存任何状态的对象，这个理解为中间的中转，例如饭店的服务员，服务员来了，点餐，服务员带着订单到后厨交给其他人处理。</p><h1 id="领域事件"><a href="#领域事件" class="headerlink" title="领域事件"></a>领域事件</h1><p>发生某种情况的时候，使用领域事件来通知给其他的部件，比如在<code>表中插入一条记录不是领域事件</code>，但是<code>订单取消是领域事件</code>。</p><h1 id="DDD-相比-MVC"><a href="#DDD-相比-MVC" class="headerlink" title="DDD 相比 MVC"></a>DDD 相比 MVC</h1><table><thead><tr><th>MVC</th><th>DDD</th></tr></thead><tbody><tr><td>解决应用程序结构的问题</td><td>解决业务复杂度的问题</td></tr><tr><td>适用于比较简单的业务逻辑</td><td>适用于比较复杂的业务逻辑</td></tr><tr><td>自上而下的设计，从用户界面到数据存储，强调分层开发</td><td>自下而上的设计，从业务建模出发到应用和基础设施，强调的是领域驱动开发</td></tr><tr><td>讲系统分为模型、视图、控制器，前后端分离</td><td>将系统分为领域层、应用层、基础设施层、用户接口层、强调业务逻辑与技术徐虎额的分离</td></tr><tr><td>一般设计中MVC中的实体或者模型都是贫血模式(只有属性)</td><td>实体或者模型中采用充血设计（有属性，有方法）</td></tr></tbody></table><h1 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h1><p>并不是DDD一定比MVC好，而是要根据业务场景也成本来选择，我个人认为，DDD通常来讲，时间成本、人力成本和学习成本都是高于MVC的，前期战术设计阶段就需要人力和时间来对业务进行建模来确定边界，进行设计，而MVC则可以通过用户的交互方式来直接做设计。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DDD是领域（Domain）驱动（Driven）设计（Design）的简写，是一种战略设计，先绘制业务领域的关系图，同时定义与模型的边界上下文。&lt;/p&gt;
&lt;h1 id=&quot;实体&quot;&gt;&lt;a href=&quot;#实体&quot; class=&quot;headerlink&quot; title=&quot;实体&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="概念" scheme="https://oujun.work/tags/%E6%A6%82%E5%BF%B5/"/>
    
    <category term="DDD" scheme="https://oujun.work/tags/DDD/"/>
    
  </entry>
  
  <entry>
    <title>MVC是什么</title>
    <link href="https://oujun.work/2024/06/11/mvc.html"/>
    <id>https://oujun.work/2024/06/11/mvc.html</id>
    <published>2024-06-11T01:00:00.000Z</published>
    <updated>2024-06-11T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>经常提到的MVC，大家都知道的是，M（Model）V（View）C(Controller)的缩写，翻译过来就是模型-视图-控制器，是用来开发web应用的框架，这样的设计目的是为了实现关注点分离，那么关注点分离又是什么？</p><h1 id="关注点分离"><a href="#关注点分离" class="headerlink" title="关注点分离"></a>关注点分离</h1><p>关注点分离是一种开发时的指导，它主张了更改根据软件执行的工作类型将软件进行分离，摘抄微软体系结构原则，时这样写的<br>&#96;<br>分离关注点是开发时的指导原则。 此原则主张应根据软件执行的工作类型将软件分离。 例如，假设应用程序中包含两个逻辑，其中一个逻辑标识要显示给用户的注意事项，另一个以特定方式设置这些注意事项的格式，使其更加显眼。 负责选择为哪些事项设置格式的行为应与负责设置格式的行为区分开，因为这两种行为只是碰巧彼此相关联的独立关注点。</p><p>从体系结构上来说，按此原则有逻辑地构建应用程序应将核心业务行为与基础结构及用户界面逻辑区分开。 理想情况下，业务规则和逻辑应单独位于一个项目中，且该项目不依赖于应用程序中的其他项目。 此区分操作可帮助确保该业务模型易于测试，且可在不与低级别实现详细信息紧密耦合的情况下逐步改进（如果基础结构问题取决于业务层中定义的抽象时，这也有帮助）。 在应用程序体系结构的使用层背后，关注点分离是核心设计思想。<br>&#96;</p><h1 id="回到MVC"><a href="#回到MVC" class="headerlink" title="回到MVC"></a>回到MVC</h1><p>以我通俗的理解，View（视图）是与用户交互的层面，也就是前端的部分，Model（模型）就是前端所需要的字段。Controller（控制器）就是与前端部分进行教育的webapi，当然后端与数据库交互的部分依然有Model，所以就是，数据库-&gt;后端处理-&gt;后端Model-&gt;Controller-&gt;前端Model-&gt;View。</p><p>视图和控制器都是依赖模型的，但是<code>模型是独立的，既不依赖视图，也不会依赖控制器</code>，这样也属于一种前后端分离的表现，因为都可以进行独立的测试了。</p><h2 id="模型的责任"><a href="#模型的责任" class="headerlink" title="模型的责任"></a>模型的责任</h2><p>模型的表现，是<code>应用程序</code>和任何<code>应由其执行的业务逻辑</code>或者<code>操作的状态</code>。这里解释一下什么叫<code>业务逻辑</code>和<code>操作状态</code>，业务逻辑就是接口、方法，叫法不一但是都一样，逻辑包含了计算，处理等动作；操作状态就是属性，属性会产生变化，可以推进业务；方法（业务逻辑）对属性（操作状态）新型操作，来完成特定的业务。但是在设计的时候，一般来讲都是将业务逻辑和操作状态分离的，确保代码的可维护性和可重用性。这里就涉及到充血模式和贫血模式的问题了，但是跟人认为，实际情况应该根据场景和架构模式以及业务需求进行不同的处理。</p><h2 id="视图的责任"><a href="#视图的责任" class="headerlink" title="视图的责任"></a>视图的责任</h2><p>就是给用户展示的内容，用户通过视图来对业务进行交互、动作，达到对业务处理的目的。</p><h2 id="控制器的责任"><a href="#控制器的责任" class="headerlink" title="控制器的责任"></a>控制器的责任</h2><p>用户通过视图进行了操作，那么操作的业务逻辑与状态就通过模型传递给控制器，控制器再通过用户的动作对业务逻辑与操作状态进行处理并反馈给用户。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经常提到的MVC，大家都知道的是，M（Model）V（View）C(Controller)的缩写，翻译过来就是模型-视图-控制器，是用来开发web应用的框架，这样的设计目的是为了实现关注点分离，那么关注点分离又是什么？&lt;/p&gt;
&lt;h1 id=&quot;关注点分离&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="概念" scheme="https://oujun.work/tags/%E6%A6%82%E5%BF%B5/"/>
    
    <category term="MVC" scheme="https://oujun.work/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>猫国建设者作弊</title>
    <link href="https://oujun.work/2024/01/22/%E7%8C%AB%E5%9B%BD%E5%BB%BA%E8%AE%BE%E8%80%85%E4%BD%9C%E5%BC%8A.html"/>
    <id>https://oujun.work/2024/01/22/%E7%8C%AB%E5%9B%BD%E5%BB%BA%E8%AE%BE%E8%80%85%E4%BD%9C%E5%BC%8A.html</id>
    <published>2024-01-22T01:08:16.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改资源"><a href="#修改资源" class="headerlink" title="修改资源"></a>修改资源</h1><p>用浏览器玩游戏的时候，按F12，进入浏览器的控制台，猫国建设者运行的时候是JavaScript脚本的，其起源都在<code>this.gamePage.resPool</code>对象中，直接输出就能看到资源的相关属性和值，我们就可以对它直接进行修改，例如修改资源数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>.<span class="hljs-property">length</span>;i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>[i].<span class="hljs-property">unlocked</span>==<span class="hljs-literal">true</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>[i].<span class="hljs-property">name</span>).<span class="hljs-property">value</span>+=<span class="hljs-number">9999999999999999999999999999999999999999999999999999999999999999999</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里为了游戏体验，做了资源是否已经解锁的限制<code>.unlocked==true</code>,防止直接刷出所有资源，<code>.value+=9999999999999999999999999999999999999999999999999999999999999999999</code>这里可以进行修改增加多少或者是资源&#x3D;多少<code>.value=9999999999999999999999999999999999999999999999999999999999999999999</code></p><p>此外，还有一个就是将资源修改到当前限制的最大值的方法，但是有一个弊端，就是工坊里的一些资源会变成0；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>.<span class="hljs-property">length</span>;i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>[i].<span class="hljs-property">unlocked</span>==<span class="hljs-literal">true</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-title function_">get</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>[i].<span class="hljs-property">name</span>).<span class="hljs-property">value</span>=<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">resources</span>[i].<span class="hljs-property">maxValue</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="修改建筑数量"><a href="#修改建筑数量" class="headerlink" title="修改建筑数量"></a>修改建筑数量</h1><p><strong>不建议使用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">game</span>.<span class="hljs-property">bld</span>.<span class="hljs-property">meta</span>[<span class="hljs-number">0</span>].<span class="hljs-property">meta</span>.<span class="hljs-property">length</span>;i++)<br>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">game</span>.<span class="hljs-property">bld</span>.<span class="hljs-property">meta</span>[<span class="hljs-number">0</span>].<span class="hljs-property">meta</span>[i].<span class="hljs-property">unlocked</span>==<span class="hljs-literal">true</span>)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">game</span>.<span class="hljs-property">bld</span>.<span class="hljs-property">meta</span>[<span class="hljs-number">0</span>].<span class="hljs-property">meta</span>[i].<span class="hljs-property">on</span>+=<span class="hljs-number">100</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">game</span>.<span class="hljs-property">bld</span>.<span class="hljs-property">meta</span>[<span class="hljs-number">0</span>].<span class="hljs-property">meta</span>[i].<span class="hljs-property">togglable</span>==<span class="hljs-literal">true</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">gamePage</span>.<span class="hljs-property">resPool</span>.<span class="hljs-property">game</span>.<span class="hljs-property">bld</span>.<span class="hljs-property">meta</span>[<span class="hljs-number">0</span>].<span class="hljs-property">meta</span>[i].<span class="hljs-property">val</span>+=<span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同样增加了建筑是否解锁的判断<code>.unlocked==true</code>,如果解锁了，就增加100个，也就是<code>.on+=100</code>;同时判断是否是又开关的<code>.togglable==true</code>有的话就直接增加<code>.val+=100</code>,就是建筑上的那种’100&#x2F;100’。</p><p>但是有一点小问题就是即使你的资源不够，建筑依然能升级，所以不如直接修改游戏<code>选项</code>中的<code>更多设置</code>-<code>批处理次数（Ctrl+单击）</code>，然后按住ctrl点建筑的升级方式。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;修改资源&quot;&gt;&lt;a href=&quot;#修改资源&quot; class=&quot;headerlink&quot; title=&quot;修改资源&quot;&gt;&lt;/a&gt;修改资源&lt;/h1&gt;&lt;p&gt;用浏览器玩游戏的时候，按F12，进入浏览器的控制台，猫国建设者运行的时候是JavaScript脚本的，其起源都在&lt;code&gt;</summary>
      
    
    
    
    <category term="知识储备" scheme="https://oujun.work/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
    <category term="游戏" scheme="https://oujun.work/tags/%E6%B8%B8%E6%88%8F/"/>
    
    <category term="作弊" scheme="https://oujun.work/tags/%E4%BD%9C%E5%BC%8A/"/>
    
    <category term="猫国建设者" scheme="https://oujun.work/tags/%E7%8C%AB%E5%9B%BD%E5%BB%BA%E8%AE%BE%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>将微信文件夹下的dat转回图片</title>
    <link href="https://oujun.work/2023/07/02/%E5%B0%86%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84dat%E8%BD%AC%E5%9B%9E%E5%9B%BE%E7%89%87.html"/>
    <id>https://oujun.work/2023/07/02/%E5%B0%86%E5%BE%AE%E4%BF%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84dat%E8%BD%AC%E5%9B%9E%E5%9B%BE%E7%89%87.html</id>
    <published>2023-07-02T01:24:00.000Z</published>
    <updated>2023-07-02T01:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>into_path = <span class="hljs-string">r&#x27;E:\Documents\WeChat Files\luacloud\FileStorage\Image\\&#x27;</span>[:-<span class="hljs-number">1</span>]  <span class="hljs-comment">#请将想导入的dat文件的路径复制到引号里面，修改此处代码</span><br>out_path = <span class="hljs-string">r&quot;D:\WeixinImages\\&quot;</span>[:-<span class="hljs-number">1</span>]  <span class="hljs-comment">#运行代码前记得修改导出路径</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">imageDecode</span>(<span class="hljs-params">f, fn</span>):<br>    dat_read = <span class="hljs-built_in">open</span>(f, <span class="hljs-string">&quot;rb&quot;</span>)  <br>    xo = Format(f)  <br>    out = out_path + fn + <span class="hljs-string">&quot;.jpg&quot;</span>  <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;导出文件的路径&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(out), end=<span class="hljs-string">&#x27;\n\n&#x27;</span>)<br>    png_write = <span class="hljs-built_in">open</span>(out, <span class="hljs-string">&quot;wb&quot;</span>)  <br>    dat_read.seek(<span class="hljs-number">0</span>)  <br><br>    <span class="hljs-keyword">for</span> now <span class="hljs-keyword">in</span> dat_read:  <br>        <span class="hljs-keyword">for</span> nowByte <span class="hljs-keyword">in</span> now:<br>            newByte = nowByte ^ xo  <br>            png_write.write(<span class="hljs-built_in">bytes</span>([newByte])) <br><br>    dat_read.close()<br>    png_write.close()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findFile</span>(<span class="hljs-params">f</span>):<br>    fsdir = os.listdir(f)  <br>    <span class="hljs-comment"># print(fsdir)</span><br>    <span class="hljs-keyword">for</span> finfo <span class="hljs-keyword">in</span> fsdir:  <br>        <span class="hljs-built_in">print</span>(into_path + finfo)<br>        fsinfo = os.listdir(into_path + finfo) <br>        <span class="hljs-keyword">for</span> fn <span class="hljs-keyword">in</span> fsinfo:  <br>            temp_path = os.path.join(into_path + finfo, fn)  <br>            <span class="hljs-keyword">if</span> os.path.isfile(temp_path):  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;导入的文件路径是&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(temp_path))<br>                fn = fn[:-<span class="hljs-number">4</span>]  <br>                imageDecode(temp_path, fn)  <br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">pass</span> <br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Format</span>(<span class="hljs-params">f</span>):<br>    dat_r = <span class="hljs-built_in">open</span>(f, <span class="hljs-string">&quot;rb&quot;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        a = [(<span class="hljs-number">0x89</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x4e</span>), (<span class="hljs-number">0x47</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x46</span>), (<span class="hljs-number">0xff</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0xff</span>)]<br>        <span class="hljs-keyword">for</span> now <span class="hljs-keyword">in</span> dat_r:<br>            <span class="hljs-keyword">for</span> xor <span class="hljs-keyword">in</span> a:<br>                i = <span class="hljs-number">0</span><br>                res = []<br>                nowg = now[:<span class="hljs-number">3</span>]<br>                <span class="hljs-keyword">for</span> nowByte <span class="hljs-keyword">in</span> nowg:<br>                    res.append(nowByte ^ xor[i])<br>                    i += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> res[<span class="hljs-number">0</span>] == res[<span class="hljs-number">1</span>] == res[<span class="hljs-number">2</span>]:<br>                    <span class="hljs-keyword">return</span> res[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">finally</span>:<br>        dat_r.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    findFile(into_path)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas</summary>
      
    
    
    
    <category term="知识储备" scheme="https://oujun.work/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"/>
    
    
    <category term="python" scheme="https://oujun.work/tags/python/"/>
    
    <category term="微信" scheme="https://oujun.work/tags/%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="图片" scheme="https://oujun.work/tags/%E5%9B%BE%E7%89%87/"/>
    
    <category term="解密" scheme="https://oujun.work/tags/%E8%A7%A3%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Linux中开启samba</title>
    <link href="https://oujun.work/2023/06/30/Linux%E4%B8%AD%E5%BC%80%E5%90%AFsamba.html"/>
    <id>https://oujun.work/2023/06/30/Linux%E4%B8%AD%E5%BC%80%E5%90%AFsamba.html</id>
    <published>2023-06-30T06:46:09.000Z</published>
    <updated>2023-06-30T06:46:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新与安装"><a href="#更新与安装" class="headerlink" title="更新与安装"></a>更新与安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt update<br>apt upgrade -y<br>apt install nano samba -y<br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>切换目录到<code>/etc/samba</code>,编辑配置文件<code>nano smb.conf</code>,在文件的最后添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs conf">[datacenter]<br>    comment = 描述<br>    path  = /路径<br>    guest ok = no  ;或yes<br>    browsable = no ;或yes<br>    ;write list = root<br></code></pre></td></tr></table></figure><p>保存后添加账户<code>smbpasswd -a root</code>输入新的密码，然后重启服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl restart smdb<br>systemctl restart samba<br>systemctl <span class="hljs-built_in">enable</span> --now smbd<br></code></pre></td></tr></table></figure><h1 id="添加新账号"><a href="#添加新账号" class="headerlink" title="添加新账号"></a>添加新账号</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">useradd user1<br><br>smbpasswd -a user1<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;更新与安装&quot;&gt;&lt;a href=&quot;#更新与安装&quot; class=&quot;headerlink&quot; title=&quot;更新与安装&quot;&gt;&lt;/a&gt;更新与安装&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;</summary>
      
    
    
    
    <category term="家庭服务" scheme="https://oujun.work/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="NAS" scheme="https://oujun.work/tags/NAS/"/>
    
    <category term="Jellyfin" scheme="https://oujun.work/tags/Jellyfin/"/>
    
    <category term="Proxmox VE" scheme="https://oujun.work/tags/Proxmox-VE/"/>
    
    <category term="PVE" scheme="https://oujun.work/tags/PVE/"/>
    
  </entry>
  
  <entry>
    <title>用chatgpt做架构设计</title>
    <link href="https://oujun.work/2023/03/01/%E7%94%A8chatgpt%E5%81%9A%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html"/>
    <id>https://oujun.work/2023/03/01/%E7%94%A8chatgpt%E5%81%9A%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html</id>
    <published>2023-03-01T15:00:00.000Z</published>
    <updated>2023-03-01T15:01:00.000Z</updated>
    
    <content type="html"><![CDATA[<p> 用chatgpt做架构设计</p><h1 id="用户故事"><a href="#用户故事" class="headerlink" title="用户故事"></a>用户故事</h1><blockquote><p>我们要开发一个系统，我们从用户故事开始，需要设计一个管理系统的模型，其中包括用户账号的基本信息实体，手机号验证实体，登录记录实体，设备绑定信息实体，用户的角色实体，用户的组织机构实体以及变更记录实体。</p></blockquote><hr><p>好的，让我帮您分析和设计这个系统。</p><p>首先，我们需要了解用户的需求和用户故事，然后根据这些需求和故事设计实体和其属性。基于您提供的信息，我们可以设计出以下实体和其属性：</p><ol><li>用户账号实体</li></ol><ul><li>ID</li><li>用户名</li><li>密码</li><li>姓名</li><li>电子邮件</li><li>创建时间</li><li>上次修改时间</li></ul><ol start="2"><li>手机号验证实体</li></ol><ul><li>ID</li><li>手机号</li><li>验证码</li><li>创建时间</li></ul><ol start="3"><li>登录记录实体</li></ol><ul><li>ID</li><li>用户ID</li><li>IP地址</li><li>登录时间</li></ul><ol start="4"><li>设备绑定信息实体</li></ol><ul><li>ID</li><li>用户ID</li><li>设备名称</li><li>设备ID</li><li>绑定时间</li></ul><ol start="5"><li>用户角色实体</li></ol><ul><li>ID</li><li>角色名称<br>· 描述</li></ul><ol start="6"><li>用户组织机构实体</li></ol><ul><li>ID</li><li>组织机构名称</li><li>描述</li><li>父节点ID</li></ul><ol start="7"><li>变更记录实体</li></ol><ul><li>ID</li><li>实体名称</li><li>实体ID</li><li>变更前属性值</li><li>变更后属性值</li><li>变更人</li><li>变更时间</li></ul><p>以上实体和属性是根据您提供的信息进行设计的。您可以根据具体情况进行调整和完善。</p><p>接下来，我们需要根据实体之间的关系设计出模型。以下是一个简单的模型示意图：</p><p>在这个模型中，用户账号实体是核心实体，其他实体都是围绕用户账号实体而建立的。手机号验证实体、登录记录实体和设备绑定信息实体都是用户账号的附属信息，用户角色实体和用户组织机构实体则是用于管理用户账号的角色和组织机构信息，变更记录实体用于记录实体属性的变更历史。</p><p>希望这个设计可以对您有所帮助。</p><hr><blockquote><p>用户组织机构实体中还要增加层级、编号、是否隐藏</p></blockquote><hr><p>好的，根据您的需求，我们可以将用户组织机构实体的属性扩展为：</p><ol><li>用户组织机构实体</li></ol><ul><li>ID</li><li>组织机构名称</li><li>描述</li><li>父节点ID</li><li>层级</li><li>编号</li><li>是否隐藏</li></ul><p>这样设计可以更好地支持组织机构之间的层级关系，并且可以通过编号快速定位和查找组织机构。同时，是否隐藏属性可以支持对某些敏感的组织机构进行隐藏和保护。</p><hr><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><blockquote><p>好，将上面的设计转化为数据模型，字段使用英文字段与中文注释，数据库采用postgresql，使用markdown表格的形式来描述输出，并直接给出markdown代码</p></blockquote><hr><p>好的，以下是根据您提供的信息设计的PostgreSQL数据库的数据模型。您可以将以下Markdown代码复制到Markdown编辑器中进行查看和编辑。</p><h2 id="用户账号实体"><a href="#用户账号实体" class="headerlink" title="用户账号实体"></a>用户账号实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>用户账号ID</td></tr><tr><td>username</td><td>varchar(50)</td><td>用户名</td></tr><tr><td>password</td><td>varchar(50)</td><td>密码</td></tr><tr><td>name</td><td>varchar(50)</td><td>姓名</td></tr><tr><td>email</td><td>varchar(50)</td><td>电子邮件</td></tr><tr><td>created_at</td><td>timestamp</td><td>创建时间</td></tr><tr><td>last_modified_at</td><td>timestamp</td><td>上次修改时间</td></tr></tbody></table><h2 id="手机号验证实体"><a href="#手机号验证实体" class="headerlink" title="手机号验证实体"></a>手机号验证实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>手机号验证ID</td></tr><tr><td>user_id</td><td>integer</td><td>用户账号ID</td></tr><tr><td>phone_number</td><td>varchar(20)</td><td>手机号</td></tr><tr><td>verification_code</td><td>varchar(10)</td><td>验证码</td></tr><tr><td>created_at</td><td>timestamp</td><td>创建时间</td></tr></tbody></table><h2 id="登录记录实体"><a href="#登录记录实体" class="headerlink" title="登录记录实体"></a>登录记录实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>登录记录ID</td></tr><tr><td>user_id</td><td>integer</td><td>用户账号ID</td></tr><tr><td>ip_address</td><td>varchar(20)</td><td>IP地址</td></tr><tr><td>login_time</td><td>timestamp</td><td>登录时间</td></tr></tbody></table><h2 id="设备绑定信息实体"><a href="#设备绑定信息实体" class="headerlink" title="设备绑定信息实体"></a>设备绑定信息实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>设备绑定信息ID</td></tr><tr><td>user_id</td><td>integer</td><td>用户账号ID</td></tr><tr><td>device_name</td><td>varchar(50)</td><td>设备名称</td></tr><tr><td>device_id</td><td>varchar(50)</td><td>设备ID</td></tr><tr><td>binding_time</td><td>timestamp</td><td>绑定时间</td></tr></tbody></table><h2 id="用户角色实体"><a href="#用户角色实体" class="headerlink" title="用户角色实体"></a>用户角色实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>用户角色ID</td></tr><tr><td>role_name</td><td>varchar(50)</td><td>角色名称</td></tr><tr><td>description</td><td>varchar(255)</td><td>描述</td></tr></tbody></table><h2 id="用户组织机构实体"><a href="#用户组织机构实体" class="headerlink" title="用户组织机构实体"></a>用户组织机构实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>用户组织机构ID</td></tr><tr><td>organization_name</td><td>varchar(50)</td><td>组织机构名称</td></tr><tr><td>description</td><td>varchar(255)</td><td>描述</td></tr><tr><td>parent_id</td><td>integer</td><td>父节点ID</td></tr><tr><td>level</td><td>integer</td><td>层级</td></tr><tr><td>number</td><td>varchar(50)</td><td>编号</td></tr><tr><td>is_hidden</td><td>boolean</td><td>是否隐藏</td></tr></tbody></table><h2 id="变更记录实体"><a href="#变更记录实体" class="headerlink" title="变更记录实体"></a>变更记录实体</h2><table><thead><tr><th>字段名</th><th>数据类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td>serial</td><td>变更记录ID</td></tr><tr><td>entity_name</td><td>varchar(50)</td><td>实体名称</td></tr><tr><td>entity_id</td><td>integer</td><td>实体ID</td></tr><tr><td>before_change_value</td><td>varchar(255)</td><td>变更前属性值</td></tr><tr><td>after_change_value</td><td>varchar(255)</td><td>变更后属性值</td></tr><tr><td>change_by</td><td>varchar(50)</td><td>变更人</td></tr><tr><td>change_time</td><td>timestamp</td><td>变更时间</td></tr></tbody></table><p>以上是一个简单的数据模型示例，您可以根据具体的业务需求进行调整和完善。注意，这里采用了PostgreSQL的数据类型和字段命名方式，您可以根据具体的数据库类型和规范进行调整。</p><hr><h1 id="关系图"><a href="#关系图" class="headerlink" title="关系图"></a>关系图</h1><blockquote><p>输出类之间的关系图，用markdown的格式，输出符合Mermaid的脚本代码</p></blockquote><hr><p>好的，以下是使用Mermaid的脚本代码，用Markdown输出用户账号实体、用户角色实体、用户组织机构实体之间的关系图：</p><pre><code class=" mermaid">classDiagram    Account --|&gt; PhoneNumberVerification    Account --|&gt; LoginRecord    Account --|&gt; DeviceBindingInformation    Account --* Role    Account --* Organization    Account --|&gt; ChangeRecord    class Account&#123;        +id: int        +username: string        +password: string        +name: string        +email: string        +created_at: timestamp        +last_modified_at: timestamp    &#125;    class PhoneNumberVerification&#123;        +id: int        +user_id: int        +phone_number: string        +verification_code: string        +created_at: timestamp    &#125;    class LoginRecord&#123;        +id: int        +user_id: int        +ip_address: string        +login_time: timestamp    &#125;    class DeviceBindingInformation&#123;        +id: int        +user_id: int        +device_name: string        +device_id: string        +binding_time: timestamp    &#125;    class Role&#123;        +id: int        +role_name: string        +description: string    &#125;    class Organization&#123;        +id: int        +organization_name: string        +description: string        +parent_id: int        +level: int        +number: string        +is_hidden: boolean    &#125;    class ChangeRecord&#123;        +id: int        +entity_name: string        +entity_id: int        +before_change_value: string        +after_change_value: string        +change_by: string        +change_time: timestamp    &#125;</code></pre><p>以上是一个简单的类之间关系图的示例，您可以根据具体的业务需求进行调整和完善。注意，这里采用了Mermaid的语法，您需要将其复制到Mermaid编辑器中进行查看和编辑。</p><hr><h1 id="序列图"><a href="#序列图" class="headerlink" title="序列图"></a>序列图</h1><blockquote><p>帮我输出序列图图，用markdown的格式，输出符合Mermaid的脚本代码</p></blockquote><hr><p>以下是符合Mermaid的脚本代码，用于输出序列图，您可以将其复制到Mermaid编辑器中进行查看和编辑。</p><pre><code class=" mermaid">sequenceDiagram    participant User    participant System    participant Database    User-&gt;&gt;+System: Login Request    System-&gt;&gt;+Database: Query User Information    Database--&gt;&gt;-System: Return User Information    alt Invalid Username or Password        System-&gt;&gt;+User: Show Error Message    else Valid Username and Password        System-&gt;&gt;+User: Show Home Page        User-&gt;&gt;+System: Browse Organization Information        System-&gt;&gt;+Database: Query Organization Information        Database--&gt;&gt;-System: Return Organization Information        System--&gt;&gt;-User: Show Organization Information    end    User-&gt;&gt;+System: Logout Request    System-&gt;&gt;+Database: Update User Status    Database--&gt;&gt;-System: Update Success    System--&gt;&gt;-User: Redirect to Login Page</code></pre><p>以上是一个简单的序列图的示例，模拟了用户登录系统、浏览组织机构信息和退出系统的过程。您可以根据具体的业务需求进行调整和完善。注意，这里采用了Mermaid的语法，您需要将其复制到Mermaid编辑器中进行查看和编辑。</p><hr><h1 id="状态图"><a href="#状态图" class="headerlink" title="状态图"></a>状态图</h1><h1 id="产品积压项"><a href="#产品积压项" class="headerlink" title="产品积压项"></a>产品积压项</h1><blockquote></blockquote><p>使用敏捷开发的形式对这个系统进行产品积压项拆解</p><hr><p>好的，我们可以使用敏捷开发的形式来对这个系统进行产品积压项拆解。以下是一些可能的产品积压项，您可以根据实际情况进行适当调整和完善。</p><ol><li>用户账号管理功能</li></ol><ul><li>用户账号的创建、修改、删除等基本操作</li><li>用户密码的加密、解密和重置等操作</li><li>用户个人信息的编辑和展示功能</li><li>用户权限管理和角色分配功能</li><li>用户登录日志和设备绑定信息的记录和查询功能</li><li>用户账号变更记录的记录和查询功能</li></ul><ol start="2"><li>手机号验证功能</li></ol><ul><li>手机号的验证和保存功能</li><li>手机号的验证码发送和验证功能</li><li>手机号的修改和删除功能</li></ul><ol start="3"><li>组织机构管理功能</li></ol><ul><li>组织机构的创建、修改、删除等基本操作</li><li>组织机构的层级结构和编号的展示和维护功能</li><li>组织机构的隐藏和显示功能</li><li>组织机构成员的添加、删除和查询功能</li><li>组织机构变更记录的记录和查询功能</li></ul><ol start="4"><li>角色管理功能</li></ol><ul><li>角色的创建、修改、删除等基本操作</li><li>角色的权限分配和管理功能</li><li>角色成员的添加、删除和查询功能</li></ul><ol start="5"><li>变更记录管理功能</li></ol><ul><li>系统各项实体的变更记录的记录和查询功能</li><li>变更记录的导出和打印功能</li></ul><p>以上是一些可能的产品积压项，您可以根据实际情况进行适当调整和完善。在实际开发过程中，可以将这些积压项分解成更小的任务，便于团队成员协作和实现敏捷开发。</p><hr><h1 id="任务拆解"><a href="#任务拆解" class="headerlink" title="任务拆解"></a>任务拆解</h1><blockquote><p>对情景用户账号管理功能进行开发任务拆解</p></blockquote><hr><p>好的，下面是对情景用户账号管理功能进行开发任务拆解的一些可能的任务：</p><ol><li>创建用户账号</li></ol><ul><li>设计用户账号创建界面和交互流程</li><li>实现用户账号创建逻辑和数据验证</li><li>实现用户密码加密和存储逻辑</li><li>实现用户权限和角色分配逻辑</li></ul><ol start="2"><li>修改用户账号</li></ol><ul><li>设计用户账号编辑界面和交互流程</li><li>实现用户账号编辑逻辑和数据验证</li><li>实现用户密码修改逻辑和数据验证</li><li>实现用户权限和角色分配逻辑</li></ul><ol start="3"><li>删除用户账号</li></ol><ul><li>设计用户账号删除界面和交互流程</li><li>实现用户账号删除逻辑和数据验证</li><li>实现用户相关信息（如登录记录、设备绑定信息、变更记录等）的删除逻辑</li></ul><ol start="4"><li>用户个人信息管理</li></ol><ul><li>设计用户个人信息界面和交互流程</li><li>实现用户个人信息的展示逻辑</li><li>实现用户个人信息的编辑逻辑和数据验证</li></ul><ol start="5"><li>用户权限管理</li></ol><ul><li>设计用户权限管理界面和交互流程</li><li>实现用户权限和角色分配逻辑</li><li>实现权限和角色的查询和删除逻辑</li></ul><ol start="6"><li>用户登录日志和设备绑定信息管理</li></ol><ul><li>设计用户登录日志和设备绑定信息界面和交互流程</li><li>实现用户登录日志和设备绑定信息的查询和删除逻辑</li><li>实现登录日志和设备绑定信息的导出和打印逻辑</li></ul><ol start="7"><li>用户账号变更记录管理</li></ol><ul><li>设计用户账号变更记录界面和交互流程</li><li>实现用户账号变更记录的查询和删除逻辑</li><li>实现用户账号变更记录的导出和打印逻辑</li></ul><p>以上是一些可能的开发任务，您可以根据实际情况进行适当调整和完善。在实际开发过程中，可以将这些任务进一步拆分为更小的子任务，便于团队成员协作和实现敏捷开发。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 用chatgpt做架构设计&lt;/p&gt;
&lt;h1 id=&quot;用户故事&quot;&gt;&lt;a href=&quot;#用户故事&quot; class=&quot;headerlink&quot; title=&quot;用户故事&quot;&gt;&lt;/a&gt;用户故事&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们要开发一个系统，我们从用户故事开始，需要设计一个管</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="架构" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构设计" scheme="https://oujun.work/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="chatgpt" scheme="https://oujun.work/tags/chatgpt/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL导出数据库文档</title>
    <link href="https://oujun.work/2023/02/24/PostgreSQL%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3.html"/>
    <id>https://oujun.work/2023/02/24/PostgreSQL%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3.html</id>
    <published>2023-02-24T12:16:00.000Z</published>
    <updated>2023-02-24T12:16:00.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql">DO $$ <span class="hljs-keyword">DECLARE</span><br>tab RECORD;<br>rec RECORD;<br><span class="hljs-keyword">BEGIN</span><br><br><span class="hljs-keyword">FOR</span>  tab <span class="hljs-keyword">IN</span> <span class="hljs-keyword">SELECT</span> schemaname<span class="hljs-operator">||</span><span class="hljs-string">&#x27;.&#x27;</span><span class="hljs-operator">||</span><span class="hljs-string">&#x27;&quot;&#x27;</span><span class="hljs-operator">||</span>tablename<span class="hljs-operator">||</span><span class="hljs-string">&#x27;&quot;&#x27;</span> <span class="hljs-keyword">AS</span> &quot;TBName&quot;,t.tablename,obj_description(c.oid) <span class="hljs-keyword">AS</span> &quot;Description&quot; <span class="hljs-keyword">FROM</span> pg_tables t <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> pg_class c <span class="hljs-keyword">ON</span> t.tablename <span class="hljs-operator">=</span> c.relname <span class="hljs-keyword">WHERE</span> t.schemaname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;public&#x27;</span> <span class="hljs-keyword">AND</span> t.tablename<span class="hljs-operator">!=</span><span class="hljs-string">&#x27;__EFMigrationsHistory&#x27;</span> LOOP<br>  RAISE NOTICE <span class="hljs-string">&#x27;表名：%&#x27;</span>,tab.&quot;TBName&quot;;<br>RAISE NOTICE <span class="hljs-string">&#x27;&#x27;</span>;<br>RAISE NOTICE <span class="hljs-string">&#x27;&gt; %&#x27;</span>,tab.&quot;Description&quot;;<br>RAISE NOTICE <span class="hljs-string">&#x27;&#x27;</span>;<br>RAISE notice <span class="hljs-string">&#x27;| 序号 | 字段名称 | 类型及长度 | 是否可空 | 注释 |&#x27;</span>;<br>    RAISE notice <span class="hljs-string">&#x27;|----|----|----|----|----|&#x27;</span>;<br><span class="hljs-keyword">FOR</span> rec <span class="hljs-keyword">IN</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">ROW_NUMBER</span> ( ) <span class="hljs-keyword">OVER</span> ( ) <span class="hljs-keyword">AS</span> 序号, A.attname <span class="hljs-keyword">AS</span> 字段名称, format_type ( A.atttypid, A.atttypmod ) <span class="hljs-keyword">AS</span> 类型及长度, A.attnotnull <span class="hljs-keyword">AS</span> 是否可空, col_description ( A.attrelid, A.attnum ) <span class="hljs-keyword">AS</span> 注释 <span class="hljs-keyword">FROM</span> pg_class <span class="hljs-keyword">AS</span> C, pg_attribute <span class="hljs-keyword">AS</span> A <span class="hljs-keyword">WHERE</span> C.relname <span class="hljs-operator">=</span> tab.&quot;tablename&quot; <span class="hljs-keyword">AND</span> A.attrelid <span class="hljs-operator">=</span> C.oid <span class="hljs-keyword">AND</span> A.attnum <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span><br>LOOP<br>RAISE notice <span class="hljs-string">&#x27;| % | % | % | % | % |&#x27;</span>, rec.&quot;序号&quot;, rec.&quot;字段名称&quot;, rec.&quot;类型及长度&quot;, rec.&quot;是否可空&quot;, rec.&quot;注释&quot;;<br><span class="hljs-keyword">END</span> LOOP;<br>RAISE NOTICE <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">END</span> LOOP;<br><span class="hljs-keyword">END</span>;<br>$$ <span class="hljs-keyword">LANGUAGE</span> plpgsql;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="运维" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="PostgreSQL" scheme="https://oujun.work/tags/PostgreSQL/"/>
    
    <category term="数据库文档" scheme="https://oujun.work/tags/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch查询group by maxdate的一个写法</title>
    <link href="https://oujun.work/2023/02/14/ElasticSearch.01.html"/>
    <id>https://oujun.work/2023/02/14/ElasticSearch.01.html</id>
    <published>2023-02-14T02:19:02.000Z</published>
    <updated>2023-02-14T02:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ElasticSearch如果只是用来做查询当然是很好的，但是往往还有很多需要用来做统计的地方，然而对于了解不深的人来说，有些查询很难去写，比如我们的一个需求是这样的</p><table><thead><tr><th>date</th><th>exportData.交易类型</th><th>exportData.业绩类型.keyword</th><th>jYCode</th><th>brokerId</th><th>exportData.订单总应收</th><th>exportData.成交价格</th><th>exportData.分边业绩</th></tr></thead><tbody><tr><td>2022-01-02</td><td>二手</td><td>正业绩</td><td>0000001</td><td>人员1</td><td>10086</td><td>1000000</td><td>100</td></tr><tr><td>2022-01-01</td><td>二手</td><td>正业绩</td><td>0000001</td><td>人员1</td><td>10088</td><td>1000000</td><td>150</td></tr><tr><td>2022-01-02</td><td>二手</td><td>正业绩</td><td>0000001</td><td>人员2</td><td>10086</td><td>1000000</td><td>8</td></tr><tr><td>2022-01-01</td><td>二手</td><td>正业绩</td><td>0000001</td><td>人员2</td><td>10088</td><td>1000000</td><td>0.5</td></tr></tbody></table><p>统计要求是这样的，先按照人员为分组单位，然后将业绩累加，然后按照时间倒序取最新一条的总计，这就涉及到一个group by 和group by 内部的查询，起初我用了scripted_metric，但是当我取10年的数据时如果是单字段还好，但是需求中涉及到20多个字段，那么就有了性能问题。</p><p>而且由于是 ElasticSearch6.x的限制，很多7以上的新API也无法使用，查阅多方资料加上ChatGPT进行修正后得到了一个性能相对好一些的写法。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs json">GET trans_performance_day_snapshot/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;companyId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2000-10-01&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2077-01-01&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;time_zone&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;+08:00&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;format&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yyyy-MM-dd&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;brokerId&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;brokerId&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">99999</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;brokerInfo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;top_hits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>              <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;_source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>              <span class="hljs-string">&quot;userOrganization.brokerName&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.storeName&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.storeLeaderName&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.regionId&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.regionName&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.regionLeaderName&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.bigRegionId&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.bigRegionName&quot;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-string">&quot;userOrganization.bigRegionLeaderName&quot;</span><br>            <span class="hljs-punctuation">]</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;trade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;exportData.交易类型.keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;performanceType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;exportData.业绩类型.keyword&quot;</span><br>              <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>              <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;performance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;sum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;exportData.分边业绩&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                  <span class="hljs-attr">&quot;cardinality&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jYCode&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;listingCommission&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">1</span> 这里，按照订单编号分组<br>                  <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jYCode&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;group_by_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">2</span> 在按照时间分组<br>                      <span class="hljs-attr">&quot;terms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                          <span class="hljs-attr">&quot;max_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                      <span class="hljs-attr">&quot;aggs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;max_date&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">3</span> 聚合出最大的日期的那条数据<br>                          <span class="hljs-attr">&quot;max&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;date&quot;</span><br>                          <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;sum_order_receivable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">4</span> 累加，但是因为只有一条数据，其实就是取值<br>                          <span class="hljs-attr">&quot;sum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;exportData.订单总应收&quot;</span><br>                          <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;sum_transaction_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">4</span> 累加，但是因为只有一条数据，其实就是取值<br>                          <span class="hljs-attr">&quot;sum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                            <span class="hljs-attr">&quot;field&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;exportData.成交价格&quot;</span><br>                          <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">&#125;</span><br>                      <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sum_order_receivable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">5</span> 将这里是为了外层的统计，虽然也是累加，但是取值依然是订单编号中最新的那条数据的值<br>                      <span class="hljs-attr">&quot;sum_bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;buckets_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;group_by_date&gt;sum_order_receivable&quot;</span><br>                      <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;sum_transaction_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">5</span> 将这里是为了外层的统计，虽然也是累加，但是取值依然是订单编号中最新的那条数据的值<br>                      <span class="hljs-attr">&quot;sum_bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;buckets_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;group_by_date&gt;sum_transaction_price&quot;</span><br>                      <span class="hljs-punctuation">&#125;</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;sum_order_receivable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">6</span> 在这里，才是是按照exportData.业绩类型.keyword 分组后  将改人员涉及到的每个订单中的最新一条数据中的值累加起来的和<br>                  <span class="hljs-attr">&quot;sum_bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;buckets_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;listingCommission&gt;sum_order_receivable&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;sum_transaction_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">6</span> 在这里，才是是按照exportData.业绩类型.keyword 分组后 将改人员涉及到的每个订单中的最新一条数据中的值累加起来的和<br>                  <span class="hljs-attr">&quot;sum_bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                    <span class="hljs-attr">&quot;buckets_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;listingCommission&gt;sum_transaction_price&quot;</span><br>                  <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">&#125;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sum_order_receivable&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  ## <span class="hljs-number">7</span> 在这里，是按照exportData.交易类型.keyword 分组后的 ##<span class="hljs-number">6</span> 这个步骤的值的和<br>              <span class="hljs-attr">&quot;sum_bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;buckets_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;performanceType&gt;sum_order_receivable&quot;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;sum_transaction_price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> ## <span class="hljs-number">7</span> 在这里，是按照exportData.交易类型.keyword 分组后的 ##<span class="hljs-number">6</span> 这个步骤的值的和<br>              <span class="hljs-attr">&quot;sum_bucket&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;buckets_path&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;performanceType&gt;sum_transaction_price&quot;</span><br>              <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><p>上面内容的aggs与之对应的C#部分的代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">async</span> Task&lt;AggregationDictionary&gt; <span class="hljs-title">GenerateAggregationDictionary</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> groupByName, Field field, <span class="hljs-built_in">int</span> skip, <span class="hljs-built_in">int</span> take</span>)</span><br>&#123;<br>    <span class="hljs-keyword">var</span> aggs = <span class="hljs-keyword">new</span> AggregationDictionary();<br>    <span class="hljs-keyword">await</span> _elastic.IndexPutAsync&lt;StringResponse&gt;(IndexTypeName.PerformanceDaySnapshot, <span class="hljs-string">&quot;_settings&quot;</span>, PostData.String(<span class="hljs-string">&quot;&#123;\&quot;index.max_result_window\&quot;:99999,\&quot;index.max_inner_result_window\&quot;:99999&#125;&quot;</span>));<br>    <span class="hljs-keyword">await</span> _elastic.IndexPutAsync&lt;StringResponse&gt;(<span class="hljs-string">&quot;/_cluster&quot;</span>, <span class="hljs-string">&quot;_settings&quot;</span>, PostData.String(<span class="hljs-string">&quot;&#123; \&quot;persistent\&quot;: &#123; \&quot;search.max_buckets\&quot;: 99999 &#125;&#125;&quot;</span>));<br>    <span class="hljs-keyword">var</span> c_group = <span class="hljs-keyword">new</span> AggregationDictionary<br>    &#123;<br>        &#123;<br>            <span class="hljs-string">&quot;brokerInfo&quot;</span>,<br>                <span class="hljs-keyword">new</span> TopHitsAggregation(<span class="hljs-string">&quot;brokerInfo&quot;</span>)<br>                &#123;<br>                    Size = <span class="hljs-number">1</span>,<br>                    Sort = <span class="hljs-keyword">new</span> List&lt;ISort&gt;<br>                    &#123;<br>                        <span class="hljs-keyword">new</span> SortField &#123; Field = Infer.Field&lt;PerformanceDaySnapshot&gt;(p =&gt; p.Date), Order = SortOrder.Descending &#125;<br>                    &#125;,<br>                    Source = <span class="hljs-keyword">new</span> SourceFilter<br>                    &#123;<br>                        Includes = <span class="hljs-keyword">new</span>[] &#123;<br>                            <span class="hljs-string">&quot;userOrganization.brokerName&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.storeId&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.storeName&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.storeLeaderName&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.regionId&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.regionName&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.regionLeaderName&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.bigRegionId&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.bigRegionName&quot;</span>,<br>                            <span class="hljs-string">&quot;userOrganization.bigRegionLeaderName&quot;</span><br>                        &#125;<br>                    &#125;<br>                &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;trade&quot;</span>,<br>                <span class="hljs-keyword">new</span> TermsAggregation(<span class="hljs-string">&quot;trade&quot;</span>)<br>                &#123;<br>                    Field = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;exportData.交易类型.keyword&quot;</span>),<br>                    Aggregations = <span class="hljs-keyword">new</span> TermsAggregation(<span class="hljs-string">&quot;performanceType&quot;</span>)<br>                    &#123;<br>                        Field = <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;exportData.业绩类型.keyword&quot;</span>),<br>                        Aggregations =<br>                            <span class="hljs-keyword">new</span> SumAggregation(<span class="hljs-string">&quot;performance&quot;</span>, <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;exportData.分边业绩&quot;</span>)) &#123; Missing = <span class="hljs-number">0</span> &#125;<br>                            &amp;&amp; <span class="hljs-keyword">new</span> CardinalityAggregation(<span class="hljs-string">&quot;totalCount&quot;</span>, Infer.Field&lt;PerformanceDaySnapshot&gt;(f=&gt;f.JYCode))<br>                            &amp;&amp; <span class="hljs-keyword">new</span> TermsAggregation(<span class="hljs-string">&quot;listingCommission&quot;</span>)<br>                            &#123;<br>                                Field = Infer.Field&lt;PerformanceDaySnapshot&gt;(f=&gt;f.JYCode),<br>                                Aggregations = <span class="hljs-keyword">new</span> TermsAggregation(<span class="hljs-string">&quot;group_by_date&quot;</span>)<br>                                &#123;<br>                                    Field = Infer.Field&lt;PerformanceDaySnapshot&gt;(f=&gt;f.Date),<br>                                    Order = <span class="hljs-keyword">new</span> TermsOrder[]<br>                                    &#123;<br>                                        <span class="hljs-keyword">new</span> TermsOrder &#123; Key = <span class="hljs-string">&quot;max_date&quot;</span>, Order = SortOrder.Descending &#125;<br>                                    &#125;,<br>                                    Aggregations = <span class="hljs-keyword">new</span> MaxAggregation(<span class="hljs-string">&quot;max_date&quot;</span>, Infer.Field&lt;PerformanceDaySnapshot&gt;(f=&gt;f.Date))<br>                                                   &amp;&amp; <span class="hljs-keyword">new</span> SumAggregation(<span class="hljs-string">&quot;sum_order_receivable&quot;</span>, <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;exportData.订单总应收&quot;</span>))<br>                                                   &amp;&amp; <span class="hljs-keyword">new</span> SumAggregation(<span class="hljs-string">&quot;sum_transaction_price&quot;</span>, <span class="hljs-keyword">new</span> Field(<span class="hljs-string">&quot;exportData.成交价格&quot;</span>))<br>                                &#125;<br>                                &amp;&amp; <span class="hljs-keyword">new</span> SumBucketAggregation(<span class="hljs-string">&quot;sum_order_receivable&quot;</span>, <span class="hljs-keyword">new</span> SingleBucketsPath(<span class="hljs-string">&quot;group_by_date&gt;sum_order_receivable&quot;</span>))<br>                                &amp;&amp; <span class="hljs-keyword">new</span> SumBucketAggregation(<span class="hljs-string">&quot;sum_transaction_price&quot;</span>, <span class="hljs-keyword">new</span> SingleBucketsPath(<span class="hljs-string">&quot;group_by_date&gt;sum_transaction_price&quot;</span>))<br>                            &#125;<br>                            &amp;&amp; <span class="hljs-keyword">new</span> SumBucketAggregation(<span class="hljs-string">&quot;commission&quot;</span>, <span class="hljs-keyword">new</span> SingleBucketsPath(<span class="hljs-string">&quot;listingCommission&gt;sum_order_receivable&quot;</span>))<br>                            &amp;&amp; <span class="hljs-keyword">new</span> SumBucketAggregation(<span class="hljs-string">&quot;transactionPrice&quot;</span>, <span class="hljs-keyword">new</span> SingleBucketsPath(<span class="hljs-string">&quot;listingCommission&gt;sum_transaction_price&quot;</span>))<br>                    &#125;<br>                &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;c_bucket_sort&quot;</span>,<br>            <span class="hljs-keyword">new</span> BucketSortAggregation(<span class="hljs-string">&quot;c_bucket_sort&quot;</span>)<br>            &#123;<br>                From = skip, <span class="hljs-comment">//分页skip</span><br>                Size = take  <span class="hljs-comment">//分页take</span><br>            &#125;<br>        &#125;<br>    &#125;;<br><br>    aggs.Add(<span class="hljs-string">&quot;item_count&quot;</span>, <span class="hljs-keyword">new</span> CardinalityAggregation(<span class="hljs-string">&quot;item_count&quot;</span>, <span class="hljs-keyword">new</span> Field(groupByName))); <span class="hljs-comment">//group by 中的totalCount</span><br>    aggs.Add(groupByName, <span class="hljs-keyword">new</span> TermsAggregation(groupByName)<br>    &#123;<br>        Field = field,<span class="hljs-comment">//group by 的列</span><br>        Size = <span class="hljs-number">10000</span>,<br>        Aggregations = c_group<br>    &#125;);<br>    <span class="hljs-keyword">return</span> aggs;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ElasticSearch如果只是用来做查询当然是很好的，但是往往还有很多需要用来做统计的地方，然而对于了解不深的人来说，有些查询很难去写，比如我们的一个需求是这样的&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;date&lt;/th&gt;
&lt;th&gt;exportData</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term=".Net" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/"/>
    
    <category term="小技巧" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="ElasticSearch" scheme="https://oujun.work/tags/ElasticSearch/"/>
    
    <category term="聚合桶" scheme="https://oujun.work/tags/%E8%81%9A%E5%90%88%E6%A1%B6/"/>
    
  </entry>
  
  <entry>
    <title>Freenow申请的域名申请letsencrypt证书的方法</title>
    <link href="https://oujun.work/2022/12/23/freenom-and-letsencrypt.html"/>
    <id>https://oujun.work/2022/12/23/freenom-and-letsencrypt.html</id>
    <published>2022-12-23T06:24:02.000Z</published>
    <updated>2022-12-29T03:07:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>freenow申请的域名，直接使用进行<code>cloudflare</code>解析是可以的，但是申请证书的时候却无法直接使用<code>certbot/dns-cloudflare</code>选择dns的方式直接通过api申请和续期。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs log">Saving debug log to /var/log/letsencrypt/letsencrypt.log<br><br>How would you like to authenticate with the ACME CA?<br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>1: Obtain certificates using a DNS TXT record (if you are using Cloudflare for<br>DNS). (dns-cloudflare)<br>2: Spin up a temporary webserver (standalone)<br>3: Place files in webroot directory (webroot)<br>- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -<br>Select the appropriate number [1-3] then [enter] (press &#x27;c&#x27; to cancel): 1<br>Requesting a certificate for *.****.**<br>Encountered CloudFlareAPIError adding TXT record: 1038 You cannot use this API for domains with a .cf, .ga, .gq, .ml, or .tk TLD (top-level domain). To configure the DNS settings for this domain, use the Cloudflare Dashboard.<br>Error communicating with the Cloudflare API: You cannot use this API for domains with a .cf, .ga, .gq, .ml, or .tk TLD (top-level domain). To configure the DNS settings for this domain, use the Cloudflare Dashboard.<br>Ask for help or search for solutions at https://community.letsencrypt.org. See the logfile /var/log/letsencrypt/letsencrypt.log or re-run Certbot with -v for more details.<br></code></pre></td></tr></table></figure><p>只能通过手动添加txt解析记录的方式进行证书申请。</p><p>我选择了使用acme的申请方式进行申请，但是依然无法做到全自动，因为上面提到了，cloudflare的api不能对<code>.cf, .ga, .gq, .ml, or .tk TLD (top-level domain).</code>顶级域名进行api申请。</p><p>由于不喜欢在服务器上安装东西，所以还是采用docker的方式。</p><h1 id="第一步：编写docker-compose-yml"><a href="#第一步：编写docker-compose-yml" class="headerlink" title="第一步：编写docker-compose.yml"></a>第一步：编写docker-compose.yml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">nginx:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">nginx:alpine</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config/nginx/nginx/nginx.conf:/etc/nginx/nginx.conf:ro</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config/nginx/nginx/conf.d:/etc/nginx/conf.d</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config/nginx/www/html:/usr/share/nginx/html</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./letsencrypt/etc/:/etc/letsencrypt/</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/shm/:/dev/shm/</span><br>  <span class="hljs-attr">acme.sh:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">neilpang/acme.sh:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">acme.sh</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">daemon</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./acmeout:/acme.sh</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config/nginx/www/html:/www</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./letsencrypt/etc/live:/letsencrypt</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br></code></pre></td></tr></table></figure><p><code>nginx</code>容器挂载的解释：</p><ul><li><code>./config/nginx/nginx/nginx.conf:/etc/nginx/nginx.conf:ro</code> 是默认的<code>nginx.conf</code>文件的映射</li><li><code>./config/nginx/nginx/conf.d:/etc/nginx/conf.d</code> 是网站配置文件的路径，也就是nginx.conf 中include部分的路径</li><li><code>./config/nginx/www/html:/usr/share/nginx/html</code> 默认的网页文件存放路径</li><li><code>./letsencrypt/etc/:/etc/letsencrypt/</code> 证书存放路径</li></ul><p><code> acme.sh</code>容器挂载的解释：</p><ul><li><code>./acmeout:/acme.sh</code> acme.sh 执行文件的路径</li><li><code>./config/nginx/www/html:/www</code> nginx中网页文件的路径，申请证书时使用<code>--webroot</code>方便</li><li><code>- ./letsencrypt/etc/live:/letsencrypt</code> 证书路径，方便存放</li></ul><h1 id="第二步：启动容器"><a href="#第二步：启动容器" class="headerlink" title="第二步：启动容器"></a>第二步：启动容器</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose up -d<br>docker exec acme.sh --set-default-ca --server letsencrypt<br></code></pre></td></tr></table></figure><h1 id="第三步：申请证书"><a href="#第三步：申请证书" class="headerlink" title="第三步：申请证书"></a>第三步：申请证书</h1><p>由于acme.sh不会自动创建路径，所以我们在申请证书前需要手动创建路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ./letsencrypt/etc/live/google.域名<br></code></pre></td></tr></table></figure><p>然后再申请证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec acme.sh --issue -d google.域名 --standalone /www --key-file /letsencrypt/google.域名/privkey.pem --fullchain-file /letsencrypt/google.域名/fullchain.pem --keylength 4096<br></code></pre></td></tr></table></figure><p>为了方便申请，我们写一个脚本来执行上面的两个步骤</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ./letsencrypt/etc/live/$1<br>docker exec acme.sh --issue -d $1 --standalone /www --key-file /letsencrypt/$1/privkey.pem --fullchain-file /letsencrypt/$1/fullchain.pem --keylength 4096<br></code></pre></td></tr></table></figure><p>保存为<code>regssl.sh</code>,我们再使用的时候就可以<code>bash regssl.sh google.域名</code>的方式使用了。<br>[update] 这里申请方式用webroot修改为standalone，我把nginx的80端口映射去掉了，我的nginx只开放443端口，从而把80端口留给acme来专门申请证书使用。</p><h1 id="第四步：编写网站的conf文件"><a href="#第四步：编写网站的conf文件" class="headerlink" title="第四步：编写网站的conf文件"></a>第四步：编写网站的conf文件</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>    server_name google.域名;<br>    listen 443 ssl http2;<br>    ssl_certificate /etc/letsencrypt/live/google.域名/fullchain.pem; <br>    ssl_certificate_key /etc/letsencrypt/live/google.域名/privkey.pem; <br>    location / &#123;<br>        proxy_pass https://www.google.com;<br>        proxy_redirect https://www.google.com https://google.域名;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后重启nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart nginx<br></code></pre></td></tr></table></figure><h1 id="第五步：设置自动更新证书"><a href="#第五步：设置自动更新证书" class="headerlink" title="第五步：设置自动更新证书"></a>第五步：设置自动更新证书</h1><p><code>crontab -e</code><br>添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cron">44 0 * * * docker exec acme.sh --cron<br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>不能申请泛域名证书</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;freenow申请的域名，直接使用进行&lt;code&gt;cloudflare&lt;/code&gt;解析是可以的，但是申请证书的时候却无法直接使用&lt;code&gt;certbot/dns-cloudflare&lt;/code&gt;选择dns的方式直接通过api申请和续期。&lt;/p&gt;
&lt;figure cla</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="运维" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Freenom" scheme="https://oujun.work/tags/Freenom/"/>
    
    <category term="SSL证书" scheme="https://oujun.work/tags/SSL%E8%AF%81%E4%B9%A6/"/>
    
    <category term="letsencrypt" scheme="https://oujun.work/tags/letsencrypt/"/>
    
    <category term="免费顶级域名" scheme="https://oujun.work/tags/%E5%85%8D%E8%B4%B9%E9%A1%B6%E7%BA%A7%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>C# 遗传算法：文字匹配</title>
    <link href="https://oujun.work/2022/12/06/WordMatchGeneticAlgorithm.html"/>
    <id>https://oujun.work/2022/12/06/WordMatchGeneticAlgorithm.html</id>
    <published>2022-12-06T06:06:02.000Z</published>
    <updated>2022-12-06T06:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h1><blockquote><p>遗传算法（Genetic Algorithm，GA）最早是由美国的 John holland于20世纪70年代提出,该算法是根据大自然中生物体进化规律而设计提出的。是模拟达尔文生物进化论的自然选择和遗传学机理的生物进化过程的计算模型，是一种通过模拟自然进化过程搜索最优解的方法。该算法通过数学的方式,利用计算机仿真运算,将问题的求解过程转换成类似生物进化中的染色体基因的交叉、变异等过程。在求解较为复杂的组合优化问题时,相对一些常规的优化算法,通常能够较快地获得较好的优化结果。遗传算法已被人们广泛地应用于组合优化、机器学习、信号处理、自适应控制和人工生命等领域。</p><p>————摘自《<a href="https://baike.baidu.com/item/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/838140">百度百科</a>》</p></blockquote><p>有一个有趣的小趣闻，一只猴子在打字机上乱敲，如果可以时间无限，那么他可能在某一个时间点，敲出来一套完整的《莎士比亚》全集，猴子敲键盘有随机性的，那么我们增加猴子的数量，就有可能缩短时间。</p><p>我们不需要一套完整的《莎士比亚》，使用编程，我们可以用一个简单的句子来模拟这个实验。</p><h1 id="遗传算法的步骤"><a href="#遗传算法的步骤" class="headerlink" title="遗传算法的步骤"></a>遗传算法的步骤</h1><pre><code class=" mermaid">flowchart TD  A[编码] --&gt; B[初始化种群]  B --&gt; C[评估种群中的个体适应度]  C --&gt; D[选择优秀个体]  D --&gt; E[杂交]  E --&gt; F[变异]  F --&gt; G&#123;种群中的最优个体&#125;  G -- 不匹配 --&gt;C  G -- 完全匹配 --&gt;Q[结束]</code></pre><h1 id="创造猴子"><a href="#创造猴子" class="headerlink" title="创造猴子"></a>创造猴子</h1><p>种群中的每一个个体都是一个猴子，也可以说是一个染色体，染色体中的基因片段就是猴子敲出来的随机字符，我们给定了基因片段的长度，让猴子每次只能敲出这些字符，算出适应度，也就是匹配度。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">GAConsoleApp</span>;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 染色体（猴子）</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Chromosome</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 基因片段</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">char</span>[] Genes &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 适应度</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">double</span> Fitness &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;length&quot;&gt;</span>基因长度<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Chromosome</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> length</span>)</span><br>    &#123;<br>        Genes = <span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span>[length];<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;target&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CalcFitness</span>(<span class="hljs-params">Func&lt;Chromosome, <span class="hljs-built_in">double</span>&gt; action</span>)</span><br>    &#123;<br>        Fitness = action.Invoke(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="初始化种群"><a href="#初始化种群" class="headerlink" title="初始化种群"></a>初始化种群</h1><p>种群数量，也就是要有多少只猴子，种群，就是把这些猴子都集中到一起，然后把种群进行初始化，创建出一定数量的猴子。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 种群数量</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _populationSize;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 种群</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; Population &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> DNA长度</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _dnaSize;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 从匹配度中选中匹配度最高的多少个作为下一代的父母</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _selectionCount;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Random random;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">char</span>[] _target;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 文字匹配遗传算法</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;populationSize&quot;&gt;</span>种群数量，越多匹配出的越快（人多力量大），但是速度越慢（人多不好统计）<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;target&quot;&gt;</span>要匹配出的目标字符串<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;selectionCount&quot;&gt;</span>每次进化选出多少个作为父母种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WordMatchGeneticAlgorithm</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> populationSize, <span class="hljs-built_in">string</span> target, <span class="hljs-built_in">int</span> selectionCount = <span class="hljs-number">50</span></span>)</span><br>&#123;<br>    _populationSize = populationSize;<br>    Population = <span class="hljs-keyword">new</span> List&lt;Chromosome&gt;();<br>    _dnaSize = target.Length;<br>    _target = target.ToArray();<br>    random = <span class="hljs-keyword">new</span> Random();<br>    _selectionCount = selectionCount;<br>    InitialPopulation();<br>&#125;<br><br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 种群初始化</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitialPopulation</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>        Population.Add(<span class="hljs-keyword">new</span> Chromosome(_dnaSize)<br>        &#123;<br>            Genes = Enumerable.Range(<span class="hljs-number">0</span>, _dnaSize).Select((t, i) =&gt; Gene).ToArray()<br>        &#125;);<br>&#125;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 基因</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">char</span> Gene =&gt; (<span class="hljs-built_in">char</span>)random.Next(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>);<br></code></pre></td></tr></table></figure><h1 id="评估适应度"><a href="#评估适应度" class="headerlink" title="评估适应度"></a>评估适应度</h1><p>文字匹配是遗传算法中我个人认为最简单的一种了，适应度匹配也就是让基因片段与我们的目标片段每一个位置都能对应上，对应上的数量越多，匹配度就越高。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 计算匹配度</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Fitness</span>()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>        Population[i].CalcFitness(t =&gt; t.Genes.Select((d, idx) =&gt; d == _target[idx]).Where(t =&gt; t).Count());<br>    <span class="hljs-keyword">return</span> Population;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p> 选出匹配度最高的N个个体作为接下来交叉使用的群体。也就是选出猴子敲出来的字符里面与目标最接近的个体。</p> <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 选择最优种群</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Selection</span>()</span><br>&#123;<br>    <span class="hljs-keyword">return</span> Fitness().OrderByDescending(t =&gt; t.Fitness).Skip(<span class="hljs-number">0</span>).Take(_selectionCount).ToList();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="交叉"><a href="#交叉" class="headerlink" title="交叉"></a>交叉</h1><p>这里采用的是随机取基因中的某个片段进行交叉生成一个新的个体，注释的部分是有些算法中带有这个交叉概率，模拟更真实的进化。所作的就是把猴子敲出来的最好的个体中随机取出两个，把他们中间的一些字符对调成一个新的内容。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 随机交叉（杂交）</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parents&quot;&gt;</span>筛选出的最优种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">CrossOver</span>(<span class="hljs-params">List&lt;Chromosome&gt; parents</span>)</span><br>&#123;<br>    List&lt;Chromosome&gt; children = <span class="hljs-keyword">new</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; _populationSize; k++)<br>    &#123;<br>        <span class="hljs-comment">//if (random.NextDouble() &lt; 0.04) //交叉概率</span><br>        <span class="hljs-comment">//&#123;</span><br>        Chromosome f = parents[random.Next(_selectionCount)];<br>        Chromosome m = parents[random.Next(_selectionCount)];<br><br>        Chromosome newChild = <span class="hljs-keyword">new</span>(_dnaSize);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _dnaSize; i++)<br>            newChild.Genes[i] = random.Next(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">1</span> ? f.Genes[i] : m.Genes[i];<br>        children.Add(newChild);<br>        <span class="hljs-comment">//&#125;</span><br>        <span class="hljs-comment">//else</span><br>        <span class="hljs-comment">//&#123;</span><br>        <span class="hljs-comment">//    children.Add(Population[k]);</span><br>        <span class="hljs-comment">//&#125;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="变异"><a href="#变异" class="headerlink" title="变异"></a>变异</h1><p>我们人为的把猴子敲出的字符中的某一个换成一个新的随机字符，让它有几率更接近我们的目标。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 变异</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;children&quot;&gt;</span>杂交后的新种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Mutation</span>(<span class="hljs-params">List&lt;Chromosome&gt; children</span>)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; children.Count; i++)<br>        <span class="hljs-keyword">if</span> (random.NextDouble() &lt;= <span class="hljs-number">0.1</span>)<br>            children[i].Genes[random.Next(_dnaSize)] = Gene;<br>    <span class="hljs-keyword">return</span> children;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="进化过程"><a href="#进化过程" class="headerlink" title="进化过程"></a>进化过程</h1><p>这个过程就是，选择-&gt;交叉-&gt;变异。不断的重复。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 进化</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Evolve</span>()</span><br>&#123;<br>    <span class="hljs-keyword">var</span> parents = Selection();<br>    <span class="hljs-keyword">var</span> children = CrossOver(parents);<br>    Population = Mutation(children);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="完整的代码"><a href="#完整的代码" class="headerlink" title="完整的代码"></a>完整的代码</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 文字匹配遗传算法</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">WordMatchGeneticAlgorithm</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 种群数量</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _populationSize;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 种群</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">public</span> List&lt;Chromosome&gt; Population &#123; <span class="hljs-keyword">get</span>; <span class="hljs-keyword">set</span>; &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> DNA长度</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _dnaSize;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 从匹配度中选中匹配度最高的多少个作为下一代的父母</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">int</span> _selectionCount;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Random random;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> <span class="hljs-built_in">char</span>[] _target;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 文字匹配遗传算法</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;populationSize&quot;&gt;</span>种群数量，越多匹配出的越快（人多力量大），但是速度越慢（人多不好统计）<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;target&quot;&gt;</span>要匹配出的目标字符串<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;selectionCount&quot;&gt;</span>每次进化选出多少个作为父母种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">WordMatchGeneticAlgorithm</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> populationSize, <span class="hljs-built_in">string</span> target, <span class="hljs-built_in">int</span> selectionCount = <span class="hljs-number">50</span></span>)</span><br>    &#123;<br>        _populationSize = populationSize;<br>        Population = <span class="hljs-keyword">new</span> List&lt;Chromosome&gt;();<br>        _dnaSize = target.Length;<br>        _target = target.ToArray();<br>        random = <span class="hljs-keyword">new</span> Random();<br>        _selectionCount = selectionCount;<br>        InitialPopulation();<br>    &#125;<br><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 种群初始化</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">InitialPopulation</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>            Population.Add(<span class="hljs-keyword">new</span> Chromosome(_dnaSize)<br>            &#123;<br>                Genes = Enumerable.Range(<span class="hljs-number">0</span>, _dnaSize).Select((t, i) =&gt; Gene).ToArray()<br>            &#125;);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">char</span> Gene =&gt; (<span class="hljs-built_in">char</span>)random.Next(<span class="hljs-number">32</span>, <span class="hljs-number">127</span>);<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 计算匹配度</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Fitness</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _populationSize; i++)<br>            Population[i].CalcFitness(t =&gt; t.Genes.Select((d, idx) =&gt; d == _target[idx]).Where(t =&gt; t).Count());<br>        <span class="hljs-keyword">return</span> Population;<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 选择最优种群</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Selection</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Fitness().OrderByDescending(t =&gt; t.Fitness).Skip(<span class="hljs-number">0</span>).Take(_selectionCount).ToList();<br>    &#125;<br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 随机交叉（杂交）</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;parents&quot;&gt;</span>筛选出的最优种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">CrossOver</span>(<span class="hljs-params">List&lt;Chromosome&gt; parents</span>)</span><br>    &#123;<br>        List&lt;Chromosome&gt; children = <span class="hljs-keyword">new</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> k = <span class="hljs-number">0</span>; k &lt; _populationSize; k++)<br>        &#123;<br>            <span class="hljs-comment">//if (random.NextDouble() &lt; 0.04) //交叉概率</span><br>            <span class="hljs-comment">//&#123;</span><br>            Chromosome f = parents[random.Next(_selectionCount)];<br>            Chromosome m = parents[random.Next(_selectionCount)];<br><br>            Chromosome newChild = <span class="hljs-keyword">new</span>(_dnaSize);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; _dnaSize; i++)<br>                newChild.Genes[i] = random.Next(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>) == <span class="hljs-number">1</span> ? f.Genes[i] : m.Genes[i];<br>            children.Add(newChild);<br>            <span class="hljs-comment">//&#125;</span><br>            <span class="hljs-comment">//else</span><br>            <span class="hljs-comment">//&#123;</span><br>            <span class="hljs-comment">//    children.Add(Population[k]);</span><br>            <span class="hljs-comment">//&#125;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> children;<br>    &#125;<br><br><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 变异</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;children&quot;&gt;</span>杂交后的新种群<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Chromosome&gt; <span class="hljs-title">Mutation</span>(<span class="hljs-params">List&lt;Chromosome&gt; children</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; children.Count; i++)<br>            <span class="hljs-keyword">if</span> (random.NextDouble() &lt;= <span class="hljs-number">0.1</span>)<br>                children[i].Genes[random.Next(_dnaSize)] = Gene;<br>        <span class="hljs-keyword">return</span> children;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 最优解</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> <span class="hljs-title">Best</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> fitness = Population.OrderByDescending(x =&gt; x.Fitness).First();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Concat(fitness.Genes);<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 进化</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Evolve</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> parents = Selection();<br>        <span class="hljs-keyword">var</span> children = CrossOver(parents);<br>        Population = Mutation(children);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="模拟开始"><a href="#模拟开始" class="headerlink" title="模拟开始"></a>模拟开始</h1><p>创建一个10000只猴子的种群，每次选择取1&#x2F;3的最优个体，进行10000次的进化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">using</span> System.Diagnostics;<br>Stopwatch stopwatch = Stopwatch.StartNew();<br><br><span class="hljs-keyword">var</span> target = <span class="hljs-string">&quot;It was the best of times, it was blurst of times (It was the best of times, it was worst of times) .&quot;</span>;<br><br>WordMatchGeneticAlgorithm ga = <span class="hljs-keyword">new</span>(<span class="hljs-number">10000</span>, target, <span class="hljs-number">10000</span> / <span class="hljs-number">3</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++)<br>&#123;<br>    <span class="hljs-keyword">var</span> gen = i + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">var</span> best = ga.Best();<br>    <span class="hljs-keyword">if</span> (best == target)<br>    &#123;<br>        Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;gen&#125;</span>\t<span class="hljs-subst">&#123;best&#125;</span>\t成功&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    Console.WriteLine(<span class="hljs-string">$&quot;<span class="hljs-subst">&#123;gen&#125;</span>\t<span class="hljs-subst">&#123;best&#125;</span>&quot;</span>);<br>    ga.Evolve();<br>&#125;<br>stopwatch.Stop();<br>Console.WriteLine(<span class="hljs-string">$&quot;耗时:<span class="hljs-subst">&#123;stopwatch.ElapsedMilliseconds / <span class="hljs-number">1000.0</span>&#125;</span>秒&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-number">1</span>       ;`&lt;jGnQ$Jy%zTc$:aZ+f]P-*FNah1_=,PeV`N)&lt;zf*~xP!jl&#125;<span class="hljs-number">4v</span>$nYIbHN7IL&gt;W`A+E)o&gt;FXNbe15G&lt;~@Ga?eb9%<span class="hljs-number">5E</span>,dngGW6ed~<br><span class="hljs-number">2</span>       [`Ei,&lt;T6SK6N6AeY:y, !SVta&#123;[aIFRR kE;k<span class="hljs-comment">#7liT|]~+G:Pp&#125;^@h@zw%o`JmCjiJ]KUXO6OEeLJ|0V_ZjVX5vh&lt;@1FgDQ&lt;|oZP</span><br><span class="hljs-number">3</span>       .rxh)<span class="hljs-number">2</span>&#125;<span class="hljs-number">5</span>%n!$ba_EM99r)m1M7OS_=w&#123;gv[?ursgL^c4HFHIf<span class="hljs-string">&quot;I.F,2p7Z`m:p/\1\78dg 5l&amp;s6cML9zr8 1v:/L-on|ag&#125;s LYg</span><br><span class="hljs-string">4       t&amp;0PF3XF9IXb9a%&#x27;Yfs~PP+qJ &gt;&lt;mTZ&#125;ccl-zDnKxdK&lt;\Ii3q%6&gt;R`&#125;ny&#125;o!tSfhj7S-0.jU8qy(Y(]3-5I-8&gt;`txSU2Cim~&gt;\@q</span><br><span class="hljs-string">5       Ib X$d[.7JY4&amp;Ut Rm=O*Yd.m=UM&#x27;?AsM:lhl*bKlJ&lt;RIT&quot;</span>&lt;r&gt;H5M :sJ9&#123;`=gL,t<span class="hljs-string">\[D7w[4a</span> p<span class="hljs-string">&#x27;&#125;B n&lt;s73!bI0e1&#125;xJoZK&gt;\L&#125;</span><br><span class="hljs-string">6       6!l&quot;?2Mg(4BlEIC[o;*Ns]&#x27;</span> $_veeUt&lt;IzyEalQt+f&gt;!smkW (,s<span class="hljs-string">\+x6Z,KiG66swPt^(&#x27;&#125;~irLpisHdHx,8Tr-A</span> ,&#125;cn0O@Mx<span class="hljs-comment">#2</span><br><span class="hljs-number">7</span>       -u9:T <span class="hljs-number">5</span>XLOV%&gt;Lef3f(mitAc hJO@<span class="hljs-string">&#x27;N&#125; o?u\w&amp;:JC&amp;,6jfTB8dt=w;os!h#:!2&gt;+ e,0)ibk(-dtV )gfQ[e@&#x27;</span>KT7-q&gt;iX&gt;VtWY<br><span class="hljs-number">8</span>       oL-Ym%V7g/^V`ZtSjO.r<span class="hljs-comment">#C:A,p:HYhT/4RBKrR]%Q^%AAT$N &gt;r~\&quot;&quot;mFdA%nC.&gt;7r*fpeF-jN,3gIbwa,\^,Bm%UQ -oP&#123;e`) Y</span><br><span class="hljs-number">9</span>       s:o<span class="hljs-string">&quot;a5n9z1~wS&gt;UdoP&gt;v&amp;H&lt;oqp?S;|a64tyuEJz&lt;=[hiN&#123;w&#123;C&#123;\~hBKmQnhJKTc h xf5tYEOa1 q5;Qnnx%o6#,P.WE]_m&lt;k) \</span><br><span class="hljs-string">10      ItF&#x27;@/-tGe y|WttOogqX*e,jvi5 /f)gG&quot;</span>.<span class="hljs-number">7sy</span>[-D6[du3~:(yt Iws&#123;tRh|GWsz=q<span class="hljs-string">\</span> qUc]s$q:yfQs9b6ErP&#125;+<span class="hljs-keyword">of</span>/PONemcMR<br><span class="hljs-number">11</span>      N?BwEE-&lt;hf7b$(t<span class="hljs-string">\of</span> kAveUc %HG&#125;aJ co.rnsKoP?<span class="hljs-number">8xde</span>Z /WrtwOsFm`emr&amp; <span class="hljs-number">3</span>!M4Ti6;eM,rZg <span class="hljs-string">&quot;o9# EWs.&#123;%,ht]Igr)go</span><br><span class="hljs-string">12      Y``ww_[9%eVx;vtCoc Z4OVy3e:v /=O M[Mr[B of(t?4)sp(It &amp;ms Tho&gt;&lt;eQbHXv =ames/Dut*FfiVNoysU )%:t]meKX &amp;</span><br><span class="hljs-string">13      &amp;t!has[a&#125;T~bY0t df tiUzgbb[G wa3jw[qt7t[q2 &#x27;$A*s 9I&lt; wnbYtC+$9e&quot;</span>;?<span class="hljs-number">4</span>S dAme&#123;x4P  iasK:B2Jt7o4T9,~es)C~<br><span class="hljs-number">14</span>      &amp;k dalB^<span class="hljs-number">4e</span>Nbe2Sgop6+?mfgR.&amp;u uf@g~ST&lt;sgko;ptH]<span class="hljs-number">9</span>$B(<span class="hljs-number">2t</span>LP!sb<span class="hljs-string">&quot;|,jx4s% o&#125;1tfOOfT 30 nLs :o4Zt&lt;ExR0%F]sz .</span><br><span class="hljs-string">15      $1-was&#125;Jh|Nbes! ofE&gt;im0s7&#x27;<span class="hljs-subst">#tf</span>!-;/bl_rsM`iY t6me*\ottM*1? ~hj7bev[ ot tGmeDf Stewa&amp;!FoBs;\p@S;i^~sr3.</span><br><span class="hljs-string">16      y] Mayz`h3 b1at ov timeK, TeXHa^BKlX6st 6f4-d$esvdIt ,&#x27;oqthe &lt;qstck# FJmeF,oiTjTa,kw=rst 7f tPdeaTO&#123;</span><br><span class="hljs-string">17      wtlnxs*th( b^dt 11H&quot;</span>iVeA7 <span class="hljs-number">5t</span>6cBRM59u&#125;sSvTfBtlmesaB=Gsww-Vt+e.Hesg Lfp-tqbZ<span class="hljs-comment">#`it :asN&#x27;Mrst ~f&amp;yRm_6( .</span><br><span class="hljs-number">18</span>      ntWt!s HLe bdrJ opctiCe],U0t wa8jklwuIt O_ wEme8 AUt wbsK=X&#125; <span class="hljs-number">9e</span>Tr zA ji+es,^gA &#125;a/awFXstjFI B=meZ) z<br><span class="hljs-number">19</span>      IQkwas thg ueUtb<span class="hljs-string">&#x27;f tikes, 3S UaJfS5urC&quot;qef&#125;\4m]e ?It was the]b\&quot;~ oJ ti&#123;eJFMi$iwLsKmAAOt7\B timHs)/.</span><br><span class="hljs-string">20      I4Bwas the bO\tTzf 5ime&gt;, it~wT* &#123;lur*tRofntimes (&#x27;</span>t wWs <span class="hljs-number">9ne</span> be5a oD ylGes<span class="hljs-string">\</span> /H Ta$&gt;Gou*tp,fUtiBm8wy.<br><span class="hljs-number">21</span>      It wavSthe beNtjof ti.e(, <span class="hljs-literal">it</span> waApblrrs?^<span class="hljs-keyword">of</span> tgf-[ <span class="hljs-number">0</span>,t ya&#123;)Uhe se8u rf timesm;;tqna0.wo@sE YN <span class="hljs-comment">#ames)|:</span><br><span class="hljs-number">22</span>      Ir w6s th; bOs&amp; o_9time0, |J was91lur<span class="hljs-comment">#. of&gt;tqmesE(et was q?e be&#125;/ oE times,4iGLPashwdrst/]f (imes) .</span><br><span class="hljs-number">23</span>      It<span class="hljs-string">\fFs</span> t^( yOs&#125; o9%timesK]iQ8wassbluUst <span class="hljs-keyword">of</span> t`mer (st<span class="hljs-string">&#x27;was t&lt;e b&gt;sc o6 ti$\s, it ]asGworbt of tikbs) .</span><br><span class="hljs-string">24      St w+s the b-sX=of tiUds, it das &#123;lurst of 9imeH (_t was qhe best Et3timus,Tie w&amp;s&gt;worst ,&#125; tim=rP .</span><br><span class="hljs-string">25      It was tS7qbe~V=of tKmes, 8t wasp~luvst Lf tim9sD(St w$s the bes: ,@Tti/es, it wasSworstGof tiHesw .</span><br><span class="hljs-string">26      It -asIthe Mpwt ol uimeV, it was blurst of#1imesu(|t was the bhst o2 times,  t was qorst )f time1) J</span><br><span class="hljs-string">27      I] was the best of times, it was blurst of times (Itiw[sbthe best o6jtimes] it was wpIst  f tEmes) .</span><br><span class="hljs-string">28      It wa&quot; the best o&#x27;</span> tiUes, itLwOs blur6t <span class="hljs-keyword">of</span> times (IFxwas the besc <span class="hljs-keyword">of</span> yimVs, iD was worst <span class="hljs-keyword">of</span> times)A.<br><span class="hljs-number">29</span>      It was the b`*t <span class="hljs-keyword">of</span> times, itlVas blur(t <span class="hljs-keyword">of</span> tymes (ItUwas the best <span class="hljs-keyword">of</span> Eimes, <span class="hljs-literal">it</span> was wTSst <span class="hljs-keyword">of</span> :imes)Q.<br><span class="hljs-number">30</span>      It _as the best <span class="hljs-keyword">of</span> tiQes, itEwas blurst <span class="hljs-keyword">of</span> times (It was the %est <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was yorQt [f aieeg) .<br><span class="hljs-number">31</span>      It was tLe best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was blurst <span class="hljs-keyword">of</span> times (It was the nkst <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was wonst o3 times) .<br><span class="hljs-number">32</span>      It was the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was blurst <span class="hljs-keyword">of</span> times (It <span class="hljs-number">6as</span> the best <span class="hljs-keyword">of</span> tiMes, <span class="hljs-literal">it</span> was worst <span class="hljs-keyword">of</span> times) .<br><span class="hljs-number">33</span>      It wab the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was blurst <span class="hljs-keyword">of</span> times (It was  he best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span>[was worst <span class="hljs-keyword">of</span> times) .<br><span class="hljs-number">34</span>      It was the bestoof times, <span class="hljs-literal">it</span> was blurst <span class="hljs-keyword">of</span> times (It was the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was worst <span class="hljs-keyword">of</span> times) .<br><span class="hljs-number">35</span>      It was`the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was blurst <span class="hljs-keyword">of</span> times (It was the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was worst <span class="hljs-keyword">of</span> times) .<br><span class="hljs-number">36</span>      It was the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was blurst <span class="hljs-keyword">of</span> times (It was the best <span class="hljs-keyword">of</span> times, <span class="hljs-literal">it</span> was worst <span class="hljs-keyword">of</span> times) .    成功<br>耗时:<span class="hljs-number">1.961</span>秒<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;遗传算法&quot;&gt;&lt;a href=&quot;#遗传算法&quot; class=&quot;headerlink&quot; title=&quot;遗传算法&quot;&gt;&lt;/a&gt;遗传算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;遗传算法（Genetic Algorithm，GA）最早是由美国的 John holland于20</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term=".Net" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/"/>
    
    <category term="算法" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term=".net" scheme="https://oujun.work/tags/net/"/>
    
    <category term="遗传算法" scheme="https://oujun.work/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term="文字匹配" scheme="https://oujun.work/tags/%E6%96%87%E5%AD%97%E5%8C%B9%E9%85%8D/"/>
    
    <category term="密码匹配" scheme="https://oujun.work/tags/%E5%AF%86%E7%A0%81%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>什么是实体</title>
    <link href="https://oujun.work/2022/10/26/what-is-an-entity.html"/>
    <id>https://oujun.work/2022/10/26/what-is-an-entity.html</id>
    <published>2022-10-26T03:00:00.000Z</published>
    <updated>2022-10-26T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实体是什么"><a href="#实体是什么" class="headerlink" title="实体是什么"></a>实体是什么</h1><p>实体本身就是一个<code>class</code>，一个类，只是它是作为一个对应到现实中的实际个体的类，比如人类，比如猫，在软件开发中则大多对应的是数据库表，在面向对象的设计中，我们大多配合五项基本原则（SOLID）</p><h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><p>单一的职责，这个人就是保安、这个人就是会计、这个人就是保洁，而不是通过if else来判断这个人是做什么的。</p><h2 id="开放封闭"><a href="#开放封闭" class="headerlink" title="开放封闭"></a>开放封闭</h2><p>简单理解，就是我们调用方法的对象都是由接口创建的，我们提供出去的接口可以被重新实现已替换接口的实际内容；或者提供抽象重写的方式。</p><h1 id="里氏替换"><a href="#里氏替换" class="headerlink" title="里氏替换"></a>里氏替换</h1><h1 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h1><p>顶部设计不应该依赖底层实现，这个的意思就是顶层设计是键盘，底层实现则是机械键盘、膜键盘，108键键盘，87键键盘；现有键盘才有的不同类型的键盘。</p><h1 id="接口隔离"><a href="#接口隔离" class="headerlink" title="接口隔离"></a>接口隔离</h1><p>还是用上面的键盘举例子，键盘的作用就是打字，所以提供的接口也就是打字的功能，至于机械键盘的可更换键帽、可更换轴这些，如果用户不需要则不应该暴露给用户。</p><p>然而大多数的在动手开发前虽然设计的很好，但是往往开发过程中为了加速开发进程就会造成放飞自我的行为导致实体中出现多余内容，虽然也不是不行，但是这就会造成虽然做了架构，但是没有完全做架构的行为对后续的维护交接都会引起一些不可避免的问题。</p><h1 id="怎么做实体"><a href="#怎么做实体" class="headerlink" title="怎么做实体"></a>怎么做实体</h1><p>首先明白了实体是对应现实中的某中实际个体，那么就是明确它有哪些属性，它能做什么；以前流行一种贫血设计模式，就是实体类，只是类，里面只有构造方法，没有其他内容，产生的变更都是通过其他的Service或者Manager进行的。</p><p>我们后来的开发中都采用的满血的设计或者说是残血的设计，实体中的属性都是<code>private set</code>的，这样保证了外部无法进行更改，我们会提供一个修改该属性的接口来保证属性的变更都是满足限制的，且有的时候进行一个属性的变更可可以直接联动其他的属性变更或者行为；</p><p>例如我们常用的鼠标，它的属性包括规格，重量，连接方式等，但是它的行为之后滚轮滚动，左键按下，右键按下；拖动、双击都是由外界的人为产生的而不是鼠标本身的功能</p><pre><code class=" mermaid">classDiagram    class Mouse    Mouse : +LeftButtonDown()    Mouse : +LeftButtonDown()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实体是什么&quot;&gt;&lt;a href=&quot;#实体是什么&quot; class=&quot;headerlink&quot; title=&quot;实体是什么&quot;&gt;&lt;/a&gt;实体是什么&lt;/h1&gt;&lt;p&gt;实体本身就是一个&lt;code&gt;class&lt;/code&gt;，一个类，只是它是作为一个对应到现实中的实际个体的类，比如人类，</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="架构" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="微服务" scheme="https://oujun.work/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="软件开发" scheme="https://oujun.work/tags/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用Python的pyecharts包画关系图</title>
    <link href="https://oujun.work/2022/07/13/python-pyecharts-graph.html"/>
    <id>https://oujun.work/2022/07/13/python-pyecharts-graph.html</id>
    <published>2022-07-13T13:16:00.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<p>我们使用csv格式的文件存储关系，第一个为主节点，第二列为子节点，就像如下的形式</p><table><thead><tr><th>主节点</th><th>子节点</th></tr></thead><tbody><tr><td>节点1</td><td>节点A</td></tr><tr><td>节点1</td><td>节点B</td></tr><tr><td>节点1</td><td>节点C</td></tr><tr><td>节点B</td><td>节点N</td></tr><tr><td>节点C</td><td>节点N</td></tr></tbody></table><p>下面是python代码，先安装pyecharts<code>pip(3) install pyecharts</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> csv<br><span class="hljs-keyword">from</span> turtle <span class="hljs-keyword">import</span> color<br><span class="hljs-keyword">from</span> pyecharts <span class="hljs-keyword">import</span> options <span class="hljs-keyword">as</span> opts<br><span class="hljs-keyword">from</span> pyecharts.charts <span class="hljs-keyword">import</span> Graph<br><br>csv_reader = csv.reader(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./relation.csv&quot;</span>))<br>systems = []<br>relation=[]<br><span class="hljs-keyword">for</span> left <span class="hljs-keyword">in</span> csv_reader:<br>    l = left[<span class="hljs-number">0</span>]; r = left[<span class="hljs-number">1</span>];<br>    relation.append(&#123;<span class="hljs-string">&quot;main&quot;</span>:l,<span class="hljs-string">&quot;sub&quot;</span>:r&#125;)<br>    systems.append(l)  <br>    systems.append(r) <br><br><span class="hljs-comment"># 节点</span><br>nodes = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(systems)):<br>    nodes.append(&#123;<span class="hljs-string">&quot;name&quot;</span>: i, <span class="hljs-string">&quot;symbolSize&quot;</span>: <span class="hljs-number">15</span>&#125;)<span class="hljs-comment">#systems.count(i) 10就是点的大小</span><br><br><span class="hljs-comment"># 关系</span><br>links = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nodes:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> relation:<br>        <span class="hljs-keyword">if</span>(i.get(<span class="hljs-string">&quot;name&quot;</span>) == j.get(<span class="hljs-string">&quot;main&quot;</span>)):<br>            links.append(&#123;<span class="hljs-string">&quot;source&quot;</span>: i.get(<span class="hljs-string">&quot;name&quot;</span>), <span class="hljs-string">&quot;target&quot;</span>: j.get(<span class="hljs-string">&quot;sub&quot;</span>)&#125;)<br><br><span class="hljs-comment">#输出网页</span><br>c = (<br>    Graph(init_opts=opts.InitOpts(         <br>        width=<span class="hljs-string">&quot;1800px&quot;</span>,  <span class="hljs-comment"># 网页分辨率</span><br>        height=<span class="hljs-string">&quot;1000px&quot;</span>,  <span class="hljs-comment"># 网页分辨率</span><br>        bg_color=<span class="hljs-string">&quot;#F2F2F2&quot;</span>, <span class="hljs-comment"># 背景色 注释掉就没颜色</span><br>        ))<br>    .add(<br>        <span class="hljs-comment"># https://pyecharts.org/#/zh-cn/basic_charts?id=graph%ef%bc%9a%e5%85%b3%e7%b3%bb%e5%9b%be</span><br>        <span class="hljs-string">&quot;&quot;</span>, <br>        nodes, <br>        links, <br>        repulsion = <span class="hljs-number">100</span>, <span class="hljs-comment">#引力值 数越大，点之间弹的越大</span><br>       <span class="hljs-comment"># edge_length = 30, # 调整点之间的距离，受上面的repulsion影响</span><br>        symbol=<span class="hljs-string">&quot;roundRect&quot;</span>, <span class="hljs-comment"># 点的形状 triangle 三角形 ，circle 圆形， rect 方形，roundRect 圆角方形， diamond 菱形，pin 图钉 ，arrow 箭头,none 只有线</span><br>       <span class="hljs-comment"># layout=&quot;circular&quot;, # 布局 是环形， force 是引力型</span><br>       <span class="hljs-comment"># linestyle_opts=opts.LineStyleOpts(curve=0.2), #直线或者弧线</span><br>       <span class="hljs-comment"># label_opts=opts.LabelOpts(is_show=False), # 直接显示标签或者鼠标放上去显示标签，</span><br>       <span class="hljs-comment"># linestyle_opts=opts.LineStyleOpts(color=&quot;#feb64d&quot;), # 线颜色</span><br>       itemstyle_opts=opts.ItemStyleOpts(color=<span class="hljs-string">&quot;#151EBF&quot;</span>), <span class="hljs-comment"># 图标颜色 注释掉就是红色</span><br>       <span class="hljs-comment"># 挑配色的网站  https://color.adobe.com/zh/explore/newest/</span><br><br>    )<br>    .set_global_opts(<br>        title_opts=opts.TitleOpts(title=<span class="hljs-string">&quot;自己改名&quot;</span>), <span class="hljs-comment"># 标题</span><br>        ) <br>    .render(<span class="hljs-string">&quot;graph_base.html&quot;</span>)<br>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们使用csv格式的文件存储关系，第一个为主节点，第二列为子节点，就像如下的形式&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;主节点&lt;/th&gt;
&lt;th&gt;子节点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;节点1&lt;/td&gt;
&lt;td&gt;节</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="python" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/python/"/>
    
    <category term="小技巧" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/python/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="架构" scheme="https://oujun.work/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="Python" scheme="https://oujun.work/tags/Python/"/>
    
    <category term="pyecharts" scheme="https://oujun.work/tags/pyecharts/"/>
    
    <category term="关系图" scheme="https://oujun.work/tags/%E5%85%B3%E7%B3%BB%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>台电玲珑S小主机做旁路由</title>
    <link href="https://oujun.work/2022/06/16/teclast-n5095-pve.html"/>
    <id>https://oujun.work/2022/06/16/teclast-n5095-pve.html</id>
    <published>2022-06-16T13:38:00.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="台电-玲珑S-2-5L小主机"><a href="#台电-玲珑S-2-5L小主机" class="headerlink" title="台电 玲珑S 2.5L小主机"></a>台电 玲珑S 2.5L小主机</h1><p>之前用的是星际蜗牛矿渣，一直放在哈尔滨的家里，到上海工作后买了个小米ax1800，没有U口，所以，也就没有什么扩展性，后来虽然找到了shell版的openclash，但是性能还是太差，配置起来也比较麻烦，所以前几天发现了618的活动，899入手了<a href="https://www.intel.cn/content/www/cn/zh/products/sku/212322/intel-celeron-processor-n5095-4m-cache-up-to-2-90-ghz/specifications.html">N5095</a>+8G D4+256G固态，因为是做nas的所以没选择wifi模块。到货后感觉还不错，送了硬盘线，鼠标垫和键鼠套，还带了根成品网线。</p><p>系统自带的windows 10 家庭版，所以直接系统就做了proxmox ve，所以也没仔细看配置，后续找了下相关的配置。</p><table><thead><tr><th>硬件</th><th>参数</th><th>其他</th></tr></thead><tbody><tr><td>CPU</td><td>Intel(R) Celeron(R) N5095 @ 2.00GHz</td><td>11代，4核，15w，支持虚拟化，21年第一季度发布</td></tr><tr><td>内存</td><td>8G</td><td>台电自己的</td></tr><tr><td>硬盘</td><td>256G</td><td>Teclast YT 256GB SSD</td></tr><tr><td>网卡</td><td>Realtek Semiconductor Co., Ltd. RTL8111&#x2F;8168&#x2F;8411</td><td></td></tr></tbody></table><p>没播放视频，不知道是否真的能做到4k60硬解，但是看了一些其他的评测，据说不行。顺便说，BIOS是台电自己定制的，而且直接有超频选项，虽然对于我来说没用处。不过相对其他多口软路由的那种不知道啥主板的BIOS，也没啥设置的，甚至连虚拟化配置都阉割掉（曾经买的一台I5 5210U的6口软路由，写的I5 4200U，发的I5 5210U）的，这个好多了。</p><h1 id="ProxmoxVE"><a href="#ProxmoxVE" class="headerlink" title="ProxmoxVE"></a>ProxmoxVE</h1><p>安装过程略过，进入系统后两件事，第一是修改源，第二还是修改源<br><code>nano /etc/apt/source.list</code></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">deb</span> http://mirrors.aliyun.<span class="hljs-keyword">com</span>/debian bullseye main contrib<br><br><span class="hljs-keyword">deb</span> http://mirrors.aliyun.<span class="hljs-keyword">com</span>/debian bullseye-updates main contrib<br><br># security updates<br><span class="hljs-keyword">deb</span> http://mirrors.aliyun.<span class="hljs-keyword">com</span>/debian-security bullseye-security main contrib<br></code></pre></td></tr></table></figure><p><code>ctrl + x ,y</code>保存，更换成阿里云的源。</p><p>我们再更换一个源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /etc/apt/sources.list.d/pve-enterprise.list /etc/apt/sources.list.d/pve-enterprise.list.bak<br>nano /etc/apt/sources.list.d/pve-no-enterprise.list<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">deb</span> http://download.proxmox.com/debian/pve bullseye pve-<span class="hljs-literal">no</span>-subscription<br></code></pre></td></tr></table></figure><p><code>ctrl + x ,y</code>保存后我们再进行更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt update<br>apt upgrade -y<br></code></pre></td></tr></table></figure><h1 id="定制一个自己的openwrt"><a href="#定制一个自己的openwrt" class="headerlink" title="定制一个自己的openwrt"></a>定制一个自己的openwrt</h1><p>现在有了可以在线定制的openwrt，这是真的很方便的，<a href="https://supes.top/">https://supes.top/</a>，根据自己的需要对其进行定制，目前没有专门的xray的客户端插件，所以还是选择了SSR-Plus ，看过一些评测，我比较懒，没有专门去做测试，据说性能是<code>SSR-Plus &gt;PassWall2 &gt;OpenClash</code>。<br>一般的选项如下</p><table><thead><tr><th>内容</th><th>值</th></tr></thead><tbody><tr><td>所需软件包 (包名用空格隔开)</td><td></td></tr><tr><td>互联网</td><td>SSR-Plus</td></tr><tr><td>默认主题</td><td>Argon</td></tr><tr><td>后台地址</td><td>设置自己的本地环境的IP地址,例如 192.168.0.253</td></tr><tr><td>后台密码</td><td></td></tr><tr><td>Web服务器</td><td>Uhttpd</td></tr><tr><td>旁路由模式</td><td>√</td></tr><tr><td>IPv4 网关</td><td>主路由的地址，例如192.168.0.1</td></tr><tr><td>DHCP 服务器</td><td>不要勾选</td></tr><tr><td>EFI镜像</td><td>√</td></tr><tr><td>主机名</td><td>随你喜欢</td></tr><tr><td>ROOTFS.TAR.GZ (用于Docker或LXC等容器)</td><td>√ 仅限赞助用户</td></tr></tbody></table><p>我赞助了10元，一个月的有效期，所以直接构建后得到了<code>openwrt-月.日.年-x86-64-generic-rootfs.tar.gz</code> 文件。</p><p>下载后打开pve的管理端，选中local(pve)存储上，选择右边的CT模板，点上传，选择我们得到的tar.gz文件，点击确定，我们就得到了一个ct模板。</p><p>不能用右上角的那个创建CT按钮创建主机，会报错。我们ssh登录到pve中使用命令进行创建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">pct create 100 \<br>local:local:vztmpl/openwrt-月.日.年-x86-64-generic-rootfs.tar.gz \<br>--rootfs local-lvm:2 \<br>--ostype unmanaged \<br>--hostname openwrt \<br>--arch amd64 \<br>--cores 1 \<br>--memory 512 \<br>--swap 0 \<br>-net0 bridge=vmbr0,name=eth0<br></code></pre></td></tr></table></figure><p>然后回到web端的管理界面启动就好了，因为IP是我们前面定制好的，所以不需要进行修改，如果需要的话，直接选中控制台，然后按回车使用<code>vi /etc/config/network</code>进行修改，改完之后记得重启，可以使用<code>reboot</code>直接重启，或者使用<code>/etc/init.d/network restart</code>只重启网络。</p><p>然后我们在浏览器就可以使用<code>192.168.0.253</code>登录到openwrt中了。</p><h1 id="旁路由配置"><a href="#旁路由配置" class="headerlink" title="旁路由配置"></a>旁路由配置</h1><p>我喜欢最少的更改，就是dhcp依然是主路由，但是网关由旁路由来做。</p><table><thead><tr><th>旁路由</th><th>主路由</th></tr></thead><tbody><tr><td>网络-&gt;LAN-&gt;编辑-&gt;常规设置</td><td>(小米ax1800)常用设置-&gt;局域网设置，定位到DHCP服务</td></tr><tr><td>（高级设置）使用自定义的 DNS 服务器：223.5.5.5</td><td>DNS1 ：192.168.0.253</td></tr><tr><td>IPv4 网关: 192.168.0.1</td><td>默认网关：192.168.0.253</td></tr></tbody></table><p>主路由设置完之后需要重启，路由下的网络设备会重新获取IP，获取到的网络配置中网关就自动更新为旁路由的IP地址，就可以正常使用了。</p><h1 id="附加价值1"><a href="#附加价值1" class="headerlink" title="附加价值1"></a>附加价值1</h1><p>配置<code>SSR-Plus</code>，直接生效，N5095油管8k效果很稳定。<br><img src="/assets/xray-ytb-statistics.png"></p><h1 id="附加价值2：docker"><a href="#附加价值2：docker" class="headerlink" title="附加价值2：docker"></a>附加价值2：docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get -y install apt-transport-https ca-certificates curl software-properties-common<br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | sudo apt-key add -<br>curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/debian/gpg | apt-key add -<br>lsb_release -cs<br>add-apt-repository &quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/debian $(lsb_release -cs) stable&quot;<br>apt update<br>apt upgrade -y<br>apt install docker-ce<br>apt install docker-compose<br></code></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><ul><li><input checked="" disabled="" type="checkbox"> frpc</li><li><input checked="" disabled="" type="checkbox"> jellyfin</li><li><input checked="" disabled="" type="checkbox"> qbittorrent</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;2.1&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">frpc:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">snowdreamtech/frpc:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">frpc</span><br>    <span class="hljs-attr">network_mode:</span> <span class="hljs-string">&#x27;host&#x27;</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shanghai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/frpc/frpc.ini:/etc/frp/frpc.ini</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>  <span class="hljs-attr">jellyfin:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">lscr.io/linuxserver/jellyfin:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">jellyfin</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shangehai</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/jellyfin/library:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/tvseries:/data/tvshows</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/movies:/data/movies</span><br>    <span class="hljs-attr">devices:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/dev/dri:/dev/dri</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8096</span><span class="hljs-string">:8096</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8920</span><span class="hljs-string">:8920</span> <span class="hljs-comment">#optional</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">7359</span><span class="hljs-string">:7359/udp</span> <span class="hljs-comment">#optional</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">1900</span><span class="hljs-string">:1900/udp</span> <span class="hljs-comment">#optional</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>  <span class="hljs-attr">qbittorrent:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">lscr.io/linuxserver/qbittorrent:latest</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">qbittorrent</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=1000</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">TZ=Asia/Shangehai</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">WEBUI_PORT=8080</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config/qbittorrent/config:/config</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/docker-config:/downloads</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">8080</span><span class="hljs-string">:8080</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6881</span><span class="hljs-string">:6881</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">6881</span><span class="hljs-string">:6881/udp</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;台电-玲珑S-2-5L小主机&quot;&gt;&lt;a href=&quot;#台电-玲珑S-2-5L小主机&quot; class=&quot;headerlink&quot; title=&quot;台电 玲珑S 2.5L小主机&quot;&gt;&lt;/a&gt;台电 玲珑S 2.5L小主机&lt;/h1&gt;&lt;p&gt;之前用的是星际蜗牛矿渣，一直放在哈尔滨的家里</summary>
      
    
    
    
    <category term="家庭服务" scheme="https://oujun.work/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="Openwrt" scheme="https://oujun.work/tags/Openwrt/"/>
    
    <category term="ProxmoxVE" scheme="https://oujun.work/tags/ProxmoxVE/"/>
    
    <category term="旁路由" scheme="https://oujun.work/tags/%E6%97%81%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>【Devops】 - Azure Devops的代理池：封装一个自己的代理池镜像</title>
    <link href="https://oujun.work/2022/06/11/devops-build-agent-pool.html"/>
    <id>https://oujun.work/2022/06/11/devops-build-agent-pool.html</id>
    <published>2022-06-11T13:08:08.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<p>生成代理也是一台机器，是可以给AzureDevops远程调用的机器，它的功能就是想手动对程序进行生成编译一样的封装的自动化操作，它的动作包括拉取代码，按照生成逻辑进行编译，封装镜像，推送镜像，部署的过程，但是如果编译频繁，那么一台生成代理可能是不够的，所以我们封装一个docker镜像，随时部署，或者部署到多个地方进行分摊。</p><p>新建一个<code>start.sh</code>,将下面的代码段存入其中，它的主要功能就是使用环境变量对代理池进行配置与启动，就是我们新建代理池的时候要执行的<code>./config.sh</code>配置与<code>./run.sh</code>启动代理池的操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-built_in">set</span> -e<br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_URL</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;error: missing AZP_URL environment variable&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;error: missing AZP_TOKEN environment variable&quot;</span><br>    <span class="hljs-built_in">exit</span> 1<br>  <span class="hljs-keyword">fi</span><br><br>  AZP_TOKEN_FILE=/azp/.token<br>  <span class="hljs-built_in">echo</span> -n <span class="hljs-variable">$AZP_TOKEN</span> &gt; <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">unset</span> AZP_TOKEN<br><br><span class="hljs-keyword">if</span> [ -n <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_WORK</span>&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">mkdir</span> -p <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_WORK</span>&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-built_in">export</span> AGENT_ALLOW_RUNASROOT=<span class="hljs-string">&quot;1&quot;</span><br><br><span class="hljs-function"><span class="hljs-title">cleanup</span></span>() &#123;<br>  <span class="hljs-keyword">if</span> [ -e config.sh ]; <span class="hljs-keyword">then</span><br>    print_header <span class="hljs-string">&quot;Cleanup. Removing Azure Pipelines agent...&quot;</span><br><br>    <span class="hljs-comment"># If the agent has some running jobs, the configuration removal process will fail.</span><br>    <span class="hljs-comment"># So, give it some time to finish the job.</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>      ./config.sh remove --unattended --auth PAT --token $(<span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span>) &amp;&amp; <span class="hljs-built_in">break</span><br><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Retrying in 30 seconds...&quot;</span><br>      <span class="hljs-built_in">sleep</span> 30<br>    <span class="hljs-keyword">done</span><br>  <span class="hljs-keyword">fi</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-title">print_header</span></span>() &#123;<br>  lightcyan=<span class="hljs-string">&#x27;\033[1;36m&#x27;</span><br>  nocolor=<span class="hljs-string">&#x27;\033[0m&#x27;</span><br>  <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;lightcyan&#125;</span>$1<span class="hljs-variable">$&#123;nocolor&#125;</span>&quot;</span><br>&#125;<br><br><span class="hljs-comment"># Let the agent ignore the token env variables</span><br><span class="hljs-built_in">export</span> VSO_AGENT_IGNORE=AZP_TOKEN,AZP_TOKEN_FILE<br><br>print_header <span class="hljs-string">&quot;1. Determining matching Azure Pipelines agent...&quot;</span><br><br><span class="hljs-keyword">if</span> [ -z <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_AGENT_PACKAGE_LATEST_URL</span>&quot;</span> -o <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_AGENT_PACKAGE_LATEST_URL</span>&quot;</span> == <span class="hljs-string">&quot;null&quot;</span> ]; <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;error: could not determine a matching Azure Pipelines agent&quot;</span><br>  <span class="hljs-built_in">echo</span> 1&gt;&amp;2 <span class="hljs-string">&quot;check that account &#x27;<span class="hljs-variable">$AZP_URL</span>&#x27; is correct and the token is valid for that account&quot;</span><br>  <span class="hljs-built_in">exit</span> 1<br><span class="hljs-keyword">fi</span><br><br>print_header <span class="hljs-string">&quot;2. Downloading and extracting Azure Pipelines agent...&quot;</span><br><br>curl -LsS <span class="hljs-variable">$AZP_AGENT_PACKAGE_LATEST_URL</span> | tar -xz &amp; <span class="hljs-built_in">wait</span> $!<br><br>bash ./bin/installdependencies.sh<br><br><span class="hljs-built_in">source</span> ./env.sh<br><br>print_header <span class="hljs-string">&quot;3. Configuring Azure Pipelines agent...&quot;</span><br><br>./config.sh --unattended \<br>  --agent <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;AZP_AGENT_NAME:-$(hostname)&#125;</span>&quot;</span> \<br>  --url <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_URL</span>&quot;</span> \<br>  --auth PAT \<br>  --token $(<span class="hljs-built_in">cat</span> <span class="hljs-string">&quot;<span class="hljs-variable">$AZP_TOKEN_FILE</span>&quot;</span>) \<br>  --pool <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;AZP_POOL:-Default&#125;</span>&quot;</span> \<br>  --work <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;AZP_WORK:-_work&#125;</span>&quot;</span> \<br>  --replace \<br>  --acceptTeeEula &amp; <span class="hljs-built_in">wait</span> $!<br><br>print_header <span class="hljs-string">&quot;4. Running Azure Pipelines agent...&quot;</span><br><br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;cleanup; exit 0&#x27;</span> EXIT<br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;cleanup; exit 130&#x27;</span> INT<br><span class="hljs-built_in">trap</span> <span class="hljs-string">&#x27;cleanup; exit 143&#x27;</span> TERM<br><br><span class="hljs-built_in">chmod</span> +x ./run.sh<br><br><span class="hljs-comment"># To be aware of TERM and INT signals call run.sh</span><br><span class="hljs-comment"># Running it with the --once flag at the end will shut down the agent after the build is executed</span><br>./run.sh <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span> &amp; <span class="hljs-built_in">wait</span> $!<br></code></pre></td></tr></table></figure><p>随后我们在同目录下创建一个dockerfile文件，用来对环境进行镜像封装。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> debian:<span class="hljs-number">11.3</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://ftp.debian.org@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://security.debian.org@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s@http://deb.debian.org@http://mirrors.aliyun.com@g&quot;</span> /etc/apt/sources.list</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; apt-get upgrade -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get install -y -qq --no-install-recommends \</span><br><span class="language-bash">    apt-transport-https \</span><br><span class="language-bash">    apt-utils \</span><br><span class="language-bash">    ca-certificates \</span><br><span class="language-bash">    curl \</span><br><span class="language-bash">    git \</span><br><span class="language-bash">    iputils-ping \</span><br><span class="language-bash">    jq \</span><br><span class="language-bash">    lsb-release \</span><br><span class="language-bash">    tar \</span><br><span class="language-bash">    software-properties-common</span><br><br><span class="hljs-comment"># Can be &#x27;linux-x64&#x27;, &#x27;linux-arm64&#x27;, &#x27;linux-arm&#x27;, &#x27;rhel.6-x64&#x27;.</span><br><span class="hljs-keyword">ENV</span> TARGETARCH=linux-x64<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /azp</span><br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./start.sh .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> +x start.sh</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="hljs-string">&quot;./start.sh&quot;</span> ]</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t azp-azent:debian.11.3 .<br>docker push azp-azent:debian.11.3<br><br><br><span class="hljs-comment">#docker build -t privatedocker.xxx.xxx/namespace/azp-azent:debian.11.3 .</span><br><span class="hljs-comment">#docker push privatedocker.xxx.xxx/namespace/azp-azent:debian.11.3</span><br></code></pre></td></tr></table></figure><p>如此就打包完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;生成代理也是一台机器，是可以给AzureDevops远程调用的机器，它的功能就是想手动对程序进行生成编译一样的封装的自动化操作，它的动作包括拉取代码，按照生成逻辑进行编译，封装镜像，推送镜像，部署的过程，但是如果编译频繁，那么一台生成代理可能是不够的，所以我们封装一个doc</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="运维" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="https://oujun.work/tags/Docker/"/>
    
    <category term="Azure Devops" scheme="https://oujun.work/tags/Azure-Devops/"/>
    
  </entry>
  
  <entry>
    <title>IT 名词解释</title>
    <link href="https://oujun.work/2022/06/11/IT-term-explanation.html"/>
    <id>https://oujun.work/2022/06/11/IT-term-explanation.html</id>
    <published>2022-06-11T02:16:00.000Z</published>
    <updated>2022-06-12T09:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net"><a href="#Net" class="headerlink" title=".Net"></a>.Net</h1><h1 id="Net-Core"><a href="#Net-Core" class="headerlink" title=".Net Core"></a>.Net Core</h1><h1 id="DDD"><a href="#DDD" class="headerlink" title="DDD"></a>DDD</h1><h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><h1 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h1><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h1 id="分布式缓存"><a href="#分布式缓存" class="headerlink" title="分布式缓存"></a>分布式缓存</h1><h1 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h1><h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><h1 id="EF"><a href="#EF" class="headerlink" title="EF"></a>EF</h1><h1 id="EF-Core"><a href="#EF-Core" class="headerlink" title="EF Core"></a>EF Core</h1><h1 id="ABP"><a href="#ABP" class="headerlink" title="ABP"></a>ABP</h1><h1 id="ABP-vNext"><a href="#ABP-vNext" class="headerlink" title="ABP vNext"></a>ABP vNext</h1><h1 id="Hangfire"><a href="#Hangfire" class="headerlink" title="Hangfire"></a>Hangfire</h1><h1 id="MES"><a href="#MES" class="headerlink" title="MES"></a>MES</h1><h1 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h1><h1 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h1><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h1 id="GIT"><a href="#GIT" class="headerlink" title="GIT"></a>GIT</h1><h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h1 id="WPF"><a href="#WPF" class="headerlink" title="WPF"></a>WPF</h1><h1 id="Winform"><a href="#Winform" class="headerlink" title="Winform"></a>Winform</h1><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h1 id="MSSQL"><a href="#MSSQL" class="headerlink" title="MSSQL"></a>MSSQL</h1><h1 id="Oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><h1 id="HAL"><a href="#HAL" class="headerlink" title="HAL"></a>HAL</h1><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h1 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h1><h1 id="CRM"><a href="#CRM" class="headerlink" title="CRM"></a>CRM</h1><h1 id="OA"><a href="#OA" class="headerlink" title="OA"></a>OA</h1><h1 id="ERP"><a href="#ERP" class="headerlink" title="ERP"></a>ERP</h1><h1 id="SAAS"><a href="#SAAS" class="headerlink" title="SAAS"></a>SAAS</h1><h1 id="BI"><a href="#BI" class="headerlink" title="BI"></a>BI</h1><h1 id="Web3"><a href="#Web3" class="headerlink" title="Web3"></a>Web3</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Net&quot;&gt;&lt;a href=&quot;#Net&quot; class=&quot;headerlink&quot; title=&quot;.Net&quot;&gt;&lt;/a&gt;.Net&lt;/h1&gt;&lt;h1 id=&quot;Net-Core&quot;&gt;&lt;a href=&quot;#Net-Core&quot; class=&quot;headerlink&quot; title=&quot;.Ne</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="架构" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E6%9E%B6%E6%9E%84/"/>
    
    
    <category term="架构" scheme="https://oujun.work/tags/%E6%9E%B6%E6%9E%84/"/>
    
    <category term="概念" scheme="https://oujun.work/tags/%E6%A6%82%E5%BF%B5/"/>
    
    <category term="架构设计" scheme="https://oujun.work/tags/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>遗传算法学习</title>
    <link href="https://oujun.work/2022/05/31/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html"/>
    <id>https://oujun.work/2022/05/31/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0.html</id>
    <published>2022-05-31T13:56:08.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是遗传算法"><a href="#什么是遗传算法" class="headerlink" title="什么是遗传算法"></a>什么是遗传算法</h1><p>遗传算法一般的解释就是模拟达尔文生物进化论和遗传学对生物的进化过程的模拟，用迭代进化的方式得到最优解的方法，其实我了解这个东西有段时间了，但是一直也没有完整的去学习过。</p><p>遗传算法的执行过程一般是先有一个<code>种群</code>，不论什么东西进化都是从一个种群进化到另一个种群，优胜劣汰，<code>种群</code>中的每一个个体都有一组<code>基因</code>，也有把这个叫做<code>染色体</code>的。</p><p>生物都有染色体，他们繁殖出的后代都是从父母双亲的染色体中各取一部分生成一个新的个体。</p><p>中间略过……</p><p>编码-&gt;初始化种群</p><p>评估种群中个体适应度-&gt;选择-&gt;交叉-&gt;变异-&gt;回到评估</p><pre><code class=" mermaid">graph TD  编码 --&gt; 初始化种群  初始化种群 --&gt; 评估适应度  评估适应度 --&gt; 选择  选择 --&gt; 交叉  交叉 --&gt; 变异  变异 --&gt; 评估适应度</code></pre><p>我个人感觉，其中难度最大的是适应度这个地方，</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是遗传算法&quot;&gt;&lt;a href=&quot;#什么是遗传算法&quot; class=&quot;headerlink&quot; title=&quot;什么是遗传算法&quot;&gt;&lt;/a&gt;什么是遗传算法&lt;/h1&gt;&lt;p&gt;遗传算法一般的解释就是模拟达尔文生物进化论和遗传学对生物的进化过程的模拟，用迭代进化的方式得到最优解</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term=".Net" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/"/>
    
    <category term="算法" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term="遗传算法" scheme="https://oujun.work/tags/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/"/>
    
    <category term=".Net" scheme="https://oujun.work/tags/Net/"/>
    
  </entry>
  
  <entry>
    <title>使用IHostedService时间简单的定时任务功能</title>
    <link href="https://oujun.work/2022/05/30/%E4%BD%BF%E7%94%A8IHostedService%E6%97%B6%E9%97%B4%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD.html"/>
    <id>https://oujun.work/2022/05/30/%E4%BD%BF%E7%94%A8IHostedService%E6%97%B6%E9%97%B4%E7%AE%80%E5%8D%95%E7%9A%84%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8A%9F%E8%83%BD.html</id>
    <published>2022-05-30T03:29:10.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有些时候再开发过程中会遇到定时执行任务的情况，这种需求功能很小，如果采用<code>hangfire</code>或者<code>Quartz.NET</code>之类的框架，就有些庞大，不值得建库建表去进行配置管理，使用<code>while</code>或者<code>timer</code>又不够具有封装性，所以微软.net core提供了<code>IHostedService</code>（<a href="https://docs.microsoft.com/zh-cn/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-6.0&tabs=visual-studio">在 ASP.NET Core 中使用托管服务实现后台任务</a>）托管服务时间简单的后台任务管理器。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>我们采用<code>IHostedService</code> 基类进行封装以满足我们的简单需求，这个接口有两个实现。</p><ul><li>StartAsync(CancellationToken)</li><li>StopAsync(CancellationToken)</li></ul><h2 id="StartAsync"><a href="#StartAsync" class="headerlink" title="StartAsync"></a>StartAsync</h2><p>简单的描述，就是启动任务，再这里对任务的逻辑进行处理。</p><h2 id="StopAsync"><a href="#StopAsync" class="headerlink" title="StopAsync"></a>StopAsync</h2><p>终止任务，一般来讲就是服务本身或者说应用本身停止的时候自动调用该接口。对后台任务涉及到的资源进行释放或者其他需要的逻辑进行处理的。</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>我们的需求很简单，就是再每周五上午8点的时候查询报表，然后通过邮件发送给指定的接收人。</p><p>实现的原理依然是在启动的时候开启一个<code>Timer</code>定时器，然后定时进行轮询，判断时间，时间到此范围的时候就执行<code>DoWork</code>方法进行逻辑处理。由于<code>IHostedService</code>是单例的，所以没有办法进行依赖注入，但是有另一个方法，就是在这里注入一个同为单例的<code>IServiceScopeFactory</code>，需要使用其他类的时候，通过<code>using var scope = _serviceScopeFactory.CreateScope();var cache = scope.ServiceProvider.GetRequiredService&lt;IDistributedCache&gt;()</code>的形式进行对象获取。这里还有一点小瑕疵，就是目前的<code>Timer</code>中的<code>TimerCallback</code>还不支持异步的形式，有点遗憾。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Email.Report.Infrastructure.BackgroundTasks</span>;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> 门店(中心)周报</span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">StatisticWeeklyDoWork</span> : <span class="hljs-title">IHostedService</span>, <span class="hljs-title">IAsyncDisposable</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> Title = <span class="hljs-string">&quot;周报&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> Task _completedTask = Task.CompletedTask;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> ILogger&lt;StatisticWeeklyDoWork&gt; _logger;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">readonly</span> IServiceScopeFactory _serviceScopeFactory;<br>    <span class="hljs-keyword">private</span> Timer? _timer;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;logger&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;serviceScopeFactory&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">StatisticWeeklyDoWork</span>(<span class="hljs-params">ILogger&lt;StatisticWeeklyDoWork&gt; logger, IServiceScopeFactory serviceScopeFactory</span>)</span><br>    &#123;<br>        _logger = logger;<br>        _serviceScopeFactory = serviceScopeFactory;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cancellationToken&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Task <span class="hljs-title">StartAsync</span>(<span class="hljs-params">CancellationToken cancellationToken</span>)</span><br>    &#123;<br>        _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; &#123;Service&#125; is running.&quot;</span>, Title, <span class="hljs-keyword">nameof</span>(StatisticWeeklyDoWork));<br>        _timer = <span class="hljs-keyword">new</span> Timer(DoWork, <span class="hljs-literal">null</span>, TimeSpan.Zero, TimeSpan.FromSeconds(<span class="hljs-number">30</span>));<br>        <span class="hljs-keyword">return</span> _completedTask;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DoWork</span>(<span class="hljs-params"><span class="hljs-built_in">object</span>? state</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> now = DateTimeOffset.Now;<br>        <span class="hljs-keyword">if</span> (now.DayOfWeek == DayOfWeek.Friday &amp;&amp; now.Hour == <span class="hljs-number">8</span> &amp;&amp; now.Minute &lt; <span class="hljs-number">10</span>)   <span class="hljs-comment">// 每周五的上午8点</span><br>        &#123;<br>            <span class="hljs-keyword">using</span> <span class="hljs-keyword">var</span> scope = _serviceScopeFactory.CreateScope();<br>            <span class="hljs-keyword">var</span> cache = scope.ServiceProvider.GetRequiredService&lt;IDistributedCache&gt;();<br>            cache.BackgroundCheck(<span class="hljs-string">$&quot;StatisticWeeklyDoWork_<span class="hljs-subst">&#123;now:yyyyMMddHH&#125;</span>&quot;</span>, () =&gt;<br>            &#123;<br>                <span class="hljs-keyword">var</span> service = scope.ServiceProvider.GetRequiredService&lt;IEmaliByExcelManager&gt;();<br>                _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; is working, 当前时间：&#123;time&#125;&quot;</span>, Title, now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>                <span class="hljs-comment">// 实际逻辑处理</span><br>                _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; is complete, 当前时间：&#123;time&#125;&quot;</span>, Title, now.ToString(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));<br>            &#125;);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cancellationToken&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Task <span class="hljs-title">StopAsync</span>(<span class="hljs-params">CancellationToken cancellationToken</span>)</span><br>    &#123;<br>        _logger.LogInformation(<span class="hljs-string">&quot;&#123;Title&#125; &#123;Service&#125; is stopping.&quot;</span>, Title, <span class="hljs-keyword">nameof</span>(StatisticWeeklyDoWork));<br>        _timer?.Change(Timeout.Infinite, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> _completedTask;<br>    &#125;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;returns&gt;</span><span class="hljs-doctag">&lt;/returns&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">async</span> ValueTask <span class="hljs-title">DisposeAsync</span>()</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (_timer <span class="hljs-keyword">is</span> IAsyncDisposable timer)<br>        &#123;<br>            <span class="hljs-keyword">await</span> timer.DisposeAsync();<br>        &#125;<br>        _timer = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="防止重复执行"><a href="#防止重复执行" class="headerlink" title="防止重复执行"></a>防止重复执行</h2><p>其实也没有这个必要，我们可以在<code>Timer</code>的最后一个参数改为1秒一次，我们只要判断时间因素到秒级一般不会出现问题，但是如果操作失败了，就会出现邮件没有发出的情况，所以我们还是增加了一个判断，时间拉长到30秒，任务执行时间也比较长，例如10秒20秒的情况，甚至有些耗时任务，可能或执行2分钟，那么每30秒的判断就会重复进入任务中，这里用到了一个<code> cache.BackgroundCheck(****</code>来对任务的执行进行管理，使用了分布式缓存<code>IDistributedCache</code>进行二次封装满足调用需求。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Email.Report.Infrastructure.Extensions</span>;<br><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">IDistributedCacheExtensions</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> 任务执行检查</span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;cache&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;key&quot;&gt;</span>任务检查key<span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;action&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BackgroundCheck</span>(<span class="hljs-params"><span class="hljs-keyword">this</span> IDistributedCache cache, <span class="hljs-built_in">string</span> key, Action action</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> workingKey = key + <span class="hljs-string">&quot;_working&quot;</span>;<br>        <span class="hljs-keyword">var</span> isWorkingKey = cache.GetString(key);<br>        <span class="hljs-keyword">if</span> (isWorkingKey == <span class="hljs-string">&quot;working&quot;</span>)<br>        &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        cache.SetString(workingKey, <span class="hljs-string">&quot;working&quot;</span>, <span class="hljs-keyword">new</span> DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromMinutes(<span class="hljs-number">5</span>)));<br>        <span class="hljs-keyword">var</span> complete = cache.GetString(key);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">string</span>.IsNullOrEmpty(complete))<br>        &#123;<br>            action?.Invoke();<br>            cache.SetString(key, <span class="hljs-string">&quot;complete&quot;</span>, <span class="hljs-keyword">new</span> DistributedCacheEntryOptions().SetAbsoluteExpiration(TimeSpan.FromHours(<span class="hljs-number">2</span>)));<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码中每个任务执行，我们都有一个独立的key，调用到的时候就先写入一个working的key，这样重复进入的时候判断在执行中就会自动返回了，然后执行在判断是否已经执行结束，如果还没有，则开始执行逻辑，执行完之后就写入完成的key，这样就不会重复判断了，要注意的是，key的写入时间，与任务的实行时间，不能出现太小的差距，否则就会出现重复进入的情况。</p><h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><p>我们可以有多个这样的后台任务，在服务启动的时候进行注册，就可以自动启动了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">namespace</span> <span class="hljs-title">Email.Report.API</span>;<br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br><span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Program</span><br>&#123;<br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> </span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span><br>    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;param name=&quot;args&quot;&gt;</span><span class="hljs-doctag">&lt;/param&gt;</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Main</span>(<span class="hljs-params"><span class="hljs-built_in">string</span>[] args</span>)</span><br>    &#123;<br>        <span class="hljs-keyword">var</span> builder = WebApplication.CreateBuilder(args);<br><br>        <span class="hljs-comment">// Add services to the container.</span><br><br>        builder.Services.AddControllers();<br>        <span class="hljs-meta">#<span class="hljs-keyword">region</span> 定时任务</span><br>        builder.Services.AddDistributedMemoryCache(); <span class="hljs-comment">//缓存</span><br>        builder.Services.AddHostedService&lt;StatisticWeeklyDoWork&gt;();<br>        <span class="hljs-meta">#<span class="hljs-keyword">endregion</span></span><br>        <span class="hljs-keyword">var</span> app = builder.Build();<br><br>        <span class="hljs-comment">// Configure the HTTP request pipeline.</span><br><br>        app.UseAuthorization();<br>        app.MapControllers();<br>        app.Run();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;有些时候再开发过程中会遇到定时执行任务的情况，这种需求功能很小，如果采用&lt;code&gt;hangfire&lt;/code&gt;或者&lt;code&gt;Quart</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term=".Net" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/"/>
    
    <category term="小技巧" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/Net/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="C#" scheme="https://oujun.work/tags/C/"/>
    
    <category term=".Net Core" scheme="https://oujun.work/tags/Net-Core/"/>
    
    <category term="定时任务" scheme="https://oujun.work/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Github中的代码自动部署发布到nuget的流程</title>
    <link href="https://oujun.work/2022/02/07/github-to-nuget.html"/>
    <id>https://oujun.work/2022/02/07/github-to-nuget.html</id>
    <published>2022-02-07T05:26:41.000Z</published>
    <updated>2024-07-20T07:29:43.881Z</updated>
    
    <content type="html"><![CDATA[<p>时序图</p><pre><code class=" mermaid">sequenceDiagram  Dev -&gt;&gt;+ Github :拉取代码  Github --&gt;&gt;- Dev : git clone -b dev  Dev -&gt;&gt; Dev : code  Dev -&gt;&gt; Dev : commit  Dev -&gt;&gt; Github : push  Github -&gt;&gt; Github : pull request master  Github -&gt;&gt; Github : publish release  Github -&gt;&gt; Github : tag v.*.*.*  Github -&gt;&gt; Github Actions : on:   push:    tags:    - v*  Github Actions -&gt;&gt; Github Actions : actions/setup-dotnet@v1  Github Actions -&gt;&gt; Github Actions : dawidd6/action-get-tag@v1  Github Actions -&gt;&gt; Github Actions : dotnet build --configuration Release  Github Actions -&gt;&gt; Github Actions : dotnet pack  -p:PackageVersion=$&#123;&#123;steps.tag.outputs.tag&#125;&#125; -o  Github Actions -&gt;&gt; Github Actions : dotnet nuget push --api-key $&#123;&#123;secrets.NUGET_API_KEY&#125;&#125;</code></pre><p><code>.github\workflows</code>中加入<code>dotnet.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">name:</span> <span class="hljs-string">.NET</span><br><br><span class="hljs-attr">on:</span> <br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">v*</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>  <br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>    <br>    <span class="hljs-attr">env:</span><br>      <span class="hljs-attr">TZ:</span> <span class="hljs-string">Asia/Shanghai</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">.NET</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-dotnet@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">dotnet-version:</span> <span class="hljs-number">6.0</span><span class="hljs-number">.101</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">Tag</span><br>      <span class="hljs-attr">id:</span> <span class="hljs-string">tag</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">dawidd6/action-get-tag@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-comment"># Optionally strip `v` prefix</span><br>        <span class="hljs-attr">strip_v:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">with</span> <span class="hljs-string">dotnet</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">dotnet</span> <span class="hljs-string">build</span> <span class="hljs-string">--configuration</span> <span class="hljs-string">Release</span> <span class="hljs-string">src/RabbitMQ.EventBus.AspNetCore</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Pack</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">dotnet</span> <span class="hljs-string">pack</span> <span class="hljs-string">src/RabbitMQ.EventBus.AspNetCore</span> <span class="hljs-string">-c</span> <span class="hljs-string">Release</span> <span class="hljs-string">--include-symbols</span> <span class="hljs-string">--include-source</span>  <span class="hljs-string">-p:PackageVersion=$&#123;&#123;steps.tag.outputs.tag&#125;&#125;</span> <span class="hljs-string">-o</span> <span class="hljs-string">artifacts/</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Publish</span> <span class="hljs-string">Symbols</span> <span class="hljs-string">to</span> <span class="hljs-string">NuGet</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">dotnet</span> <span class="hljs-string">nuget</span> <span class="hljs-string">push</span> <span class="hljs-string">artifacts/*.symbols.nupkg</span> <span class="hljs-string">--api-key</span> <span class="hljs-string">$&#123;&#123;secrets.NUGET_API_KEY&#125;&#125;</span> <span class="hljs-string">--source</span> <span class="hljs-string">https://api.nuget.org/v3/index.json</span><br></code></pre></td></tr></table></figure><p>开发人员从远程仓库拉取dev分支代码。<br>开发人员进行开发，并推送分支。<br>做dev到master分支的拉取请求。<br>拉取请求合并到master分支后，创建新的release并打标签 <code>v.*.*.*</code>。<br>github actions 的触发方式为打了tag且为v开头的。<br>下面就是进行编译、获取打的标签、打包、并推送到nuget，版本号就是前面打的tag。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;时序图&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot; mermaid&quot;&gt;sequenceDiagram
  Dev -&amp;gt;&amp;gt;+ Github :拉取代码
  Github --&amp;gt;&amp;gt;- Dev : git clone -b dev
  Dev -&amp;gt;</summary>
      
    
    
    
    <category term="软件开发" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    <category term="运维" scheme="https://oujun.work/categories/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term=".net" scheme="https://oujun.work/tags/net/"/>
    
    <category term="github" scheme="https://oujun.work/tags/github/"/>
    
    <category term="actions" scheme="https://oujun.work/tags/actions/"/>
    
    <category term="nuget" scheme="https://oujun.work/tags/nuget/"/>
    
  </entry>
  
</feed>
