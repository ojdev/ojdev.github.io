{"title":"程序员的午夜一秒谜案：1927年12月31日","date":"2011-08-12T10:10:14.000Z","slug":"19271231","updated":"2019-05-07T07:27:10.996Z","content":"<p>这真是一个特殊的日子啊。</p>\n<p>1927年12月31日。</p>\n<p>StackOverflow是一个程序员向的问答网站，广大程序员们在上面交流经验、提问答疑，三天前，一位名叫Freewind的用户发布了一个问题<code>1927年12月31日，一秒谜案</code></p>\n<blockquote>\n<p>我在用Java编写一段比较两个字符串时间间隔的程序，然而当我比较“1927-12-31 23:54:07”和“1927-12-31 23:54:08”这两个时间时，输出结果却不是1……而是353。</p>\n<p>当我把两个时间分别往后调整1秒，变成“1927-12-31 23:54:08”和“1927-12-31 23:54:09”，结果就又是1了！—-可为什么那两个时间的结果，却是353呢？</p>\n</blockquote>\n<p>面对这一诡异的问题，网友们很快追问，“你的区域（Locale）设置是什么？这可能是个区域问题/和当地夏令时之类的东西有关。”</p>\n<p>楼主很快附上了Java版本号和区域设置：</p>\n<blockquote>\n<p>sun.util.calendar.ZoneInfo[id=”Asia/Shanghai”,</p>\n<p>offset=28800000,dstSavings=0,</p>\n<p>useDaylight=false,</p>\n<p>transitions=19,</p>\n<p>lastRule=null]</p>\n</blockquote>\n<p>（……没错，Freewind君，似乎是一位魔都死程。不知道这里有没有人认识这位老兄？）</p>\n<p>在这份追加信息出现仅仅两分钟之后，StackOverflow站上的问答狂人Jon Skeet给出了如下答复</p>\n<blockquote>\n<p>这是因为上海的时区在12月31日发生了变化。</p>\n<p>请看<a href=\"https://www.timeanddate.com/time/change/china/shanghai?year=1927\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<p>为什么时间往回拨了5分52秒？</p>\n<p>（1928年1月1日0点0分，当地时间由地方平时（Local Mean Time） 改为北京时间/中国标准时间）</p>\n<p>简单地说，在1927年末的最后那一个午夜，时钟被往回拨了5分52秒。所以“1927-12-31 23:54:08”这一秒，事实上，发生了两次，而看起来在计算当地时间时，Java将其视为了后面那一个时间点，于是就产生了这一差别。</p>\n<p>这正是时区世界的奇妙与不可思议啊。</p>\n</blockquote>\n<p>在StackFlow网民们纷纷膜拜Jon Skeet的神速之时，其他程序员也以测试的方式验证了这一结果的正确—-美国时间木有这个问题。看来，当一枚程序员，有时真的需要上通天文、下知地理啊……</p>\n<hr>\n<p>ps：我刚刚用C#做了一下，一下是我的测试代码：</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> t1 = (DateTime.Parse(<span class=\"string\">\"1927/12/31 23:54:07\"</span>) - Convert.ToDateTime(<span class=\"string\">\"1970/01/01 00:00:00\"</span>)).TotalMilliseconds / <span class=\"number\">1000</span>;<span class=\"comment\">// -8 * 3600;</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> t2 = (DateTime.Parse(<span class=\"string\">\"1927/12/31 23:54:08\"</span>) - Convert.ToDateTime(<span class=\"string\">\"1970/01/01 00:00:00\"</span>)).TotalMilliseconds / <span class=\"number\">1000</span>;<span class=\"comment\">// -8 * 3600;</span></span><br><span class=\"line\">MessageBox.Show(<span class=\"keyword\">string</span>.Format(<span class=\"string\">\"[&#123;0&#125;]  [&#123;1&#125;] : &#123;2&#125;\"</span>, t1, t2, t2 - t1));</span><br></pre></td></tr></table></figure>\n<p>我并没有遇到上面的问题，无论是235408-235407或者235409-235408，我的结果都是1。因为C#没有从1970年1月1日开始获取时间的方法。</p>\n<p>所以我换了js，如下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">d.setFullYear(<span class=\"number\">1927</span>,<span class=\"number\">12</span>,<span class=\"number\">31</span>);</span><br><span class=\"line\">d.setHours(<span class=\"number\">23</span>);</span><br><span class=\"line\">d.setMinutes(<span class=\"number\">54</span>);</span><br><span class=\"line\">d.setSeconds(<span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">a.setFullYear(<span class=\"number\">1927</span>,<span class=\"number\">12</span>,<span class=\"number\">31</span>);</span><br><span class=\"line\">a.setHours(<span class=\"number\">23</span>);</span><br><span class=\"line\">a.setMinutes(<span class=\"number\">54</span>);</span><br><span class=\"line\">a.setSeconds(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> t1=d.getTime()/<span class=\"number\">1000</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> t2=a.getTime()/<span class=\"number\">1000</span>;</span><br><span class=\"line\">alert(t1);</span><br><span class=\"line\">alert(t2);</span><br><span class=\"line\">alert(t2-t1);</span><br></pre></td></tr></table></figure>\n<p>答案依旧，都是1的结果，那么，是不是我的测试代码不正确呢？还是这个问题已经解决了？活着。。是不是只有java有这样的问题？</p>\n<p>我依然没有得到答案。</p>\n<p>201108130035:上面提到一个东西，叫做地方平时，我在网上搜到一个对地方平时的解释：</p>\n<blockquote>\n<p>local mean time</p>\n<p>地方时的一种，地方平太阳时的简称。</p>\n<p>体现平太阳的周日视运动。它没有季节性的快慢变化，因而不同于地方视时。</p>\n<p>由于地区间的联系日益频繁，它在实用上已被标准时(区时或法定时)所代替。</p>\n<p>通常根据标准时和地方经度进行推算，也可根据太阳的地方时角和时差进行推算。</p>\n</blockquote>\n<p>地方平太阳时：<a href=\"http://baike.baidu.com/view/37435.htm\" target=\"_blank\" rel=\"noopener\">http://baike.baidu.com/view/37435.htm</a></p>\n<p>上面这个是百度百科对地方平太阳时的解释。</p>\n<p>大家都知道，在java中gettime方法获取的时间是自1970年1月1日开始至此地毫秒数。而上面用的时间是1927年12月31日。早于1970年，所以，流传着一种说法，就是1928年的1月1日开始，当地的时间计时更改为格林威治标准时间，而格林威治标准时间与当地的地方平时正好相差了5分52秒。至于我用C#没有得出353或许是因为C#中获取的时间戳是从0001年1月1日开始的。</p>\n<p>也许是jdk的关系造成这样的结果吧。</p>\n","prev":{"title":"C#字符串算式直接运算结果","slug":"C-字符串算式直接运算结果"},"next":{"title":"C#与盗梦空间-我们要进入下一层梦境","slug":"C-与盗梦空间-我们要进入下一层梦境"},"link":"http://ojdev.github.io/post/19271231/"}