{"meta":{"title":"后山","subtitle":"","description":"","author":"欧俊","url":"https://ojdev.github.io","root":"/"},"pages":[{"title":"","date":"2021-07-22T03:07:02.252Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"baidu_verify_code-CV5VGCMHxP.html","permalink":"https://ojdev.github.io/baidu_verify_code-CV5VGCMHxP.html","excerpt":"","text":"7b95ba4ce124beebcb7f865f5e9652ae"}],"posts":[{"title":"powershell7的美化","slug":"powershell7的美化","date":"2021-05-28T08:58:00.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2021/05/28/powershell7的美化/","link":"","permalink":"https://ojdev.github.io/2021/05/28/powershell7%E7%9A%84%E7%BE%8E%E5%8C%96/","excerpt":"","text":"前言Powershell已经升级到7了，目前看上去很好用了，windows10到今天已经原生支持了openssh，而且，很多的linux中的命令也可以直接在powershell中使用，这样免去了我单独安装子系统的的情况，wsl2不知道为什么，在我家的电脑上会出现丢失系统的问题，这就导致了我维护集群的配置文件和kubeconfig丢失的问题，后来想到，反正有堡垒机，不如都放上去，使用windows terminal直接将选项卡配置成ssh，自动登录也就都解决了，但是不可否认的是，powershell虽然不是太好用，但是比命令提示行强大是肯定的，无非就是一个习惯的问题，坚持了几天，也就习惯了，但是丑是没办法的，所以有了这个美化过程，很容易的。 安装Powershell 7Powershell7 Github 根据自己的喜好进行选择，我选择了msi的安装包，大概在14还是15年的时候接触过Chocolatey，当时角色终于在windows上也有程序包管理器了，但结果是，不好用，后来也没在关注过，这两年发现很多的地方都在推荐，其实可以尝试以下。 开始美化一般来讲，操作步骤大同小异，我写这一篇也是因为换了新的电脑后找不到步骤了，有一个步骤一直报错，但是还想不起来怎么处理了，所以查找后找到了，也就顺手记录一下。 1234set-executionpolicy remotesignedInstall-Module posh-git -Scope CurrentUserInstall-Module oh-my-posh -Scope CurrentUserInstall-Module -Name PSReadLine -Scope CurrentUser -Force -SkipPublisherCheck # 这个是自动提示的，看个人选择，一般用不上，因为自动提示后面总是会带上.exe扩展名，并且会在后面自动加一个空格，总是，我觉得不好用 然后为了达到每次一次打开都是设置好的美化效果，所以需要把配置写道个人配置文件中 1if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125; notepad $PROFILE 执行后会打开一个记事本，将下面内容写入到记事本中保存。 123Install-Module posh-gitInstall-Module oh-my-poshSet-PoshPrompt Paradox 查看所有配色方式的命令是Get-PoshThemes 很多教程上将Set-PoshPrompt Paradox写成了Set-Theme Paradox，是因为老版本的是这么设置的，很多时候报错也是在这里。 如果不需要自动检查更新可以只写一样 1Set-PoshPrompt Paradox 这样，每次打开的时候会检查更新，就不会卡。 设置字体上面的步骤就美化完成了，只不过看起来还是很难看，所以需要安装字体,根据fonts页面上的两种字体，自己选择一下就可以了，默认推荐的MesloLGM NF效果也不错，然后安装完字体后，默认的设置比较麻烦，所以我都是使用terminal的设置里找到powershell，然后外观中直接选字体。 在terminal的配置中，应该是这样的 1234567&#123; &quot;fontFace&quot;: &quot;MesloLGM NF&quot;, &quot;guid&quot;: &quot;&#123;574e775e-4f2a-5b96-ac1e-a2962a402336&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;PowerShell&quot;, &quot;source&quot;: &quot;Windows.Terminal.PowershellCore&quot;&#125; 参考 ohmyposh fonts","categories":[{"name":"知识储备","slug":"知识储备","permalink":"https://ojdev.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"pwsh","slug":"pwsh","permalink":"https://ojdev.github.io/tags/pwsh/"},{"name":"powershell","slug":"powershell","permalink":"https://ojdev.github.io/tags/powershell/"}]},{"title":"沈阳的生活开始了","slug":"沈阳的生活开始了","date":"2021-05-26T02:00:00.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2021/05/26/沈阳的生活开始了/","link":"","permalink":"https://ojdev.github.io/2021/05/26/%E6%B2%88%E9%98%B3%E7%9A%84%E7%94%9F%E6%B4%BB%E5%BC%80%E5%A7%8B%E4%BA%86/","excerpt":"","text":"充分的体会到了什么叫落后，传统，思想陈旧，效率低下，异想天开。 先了解一下ENVI的用法，在了解Python的用法，然后再开展其他的，经过了四天，网线拉过来了。终于把电脑买回来了，显示器是借来的，还没买回来。 还好我的手机卡是无限流量的。 看起来，也不是个长远的打算。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"沈阳","slug":"沈阳","permalink":"https://ojdev.github.io/tags/%E6%B2%88%E9%98%B3/"}]},{"title":"关于在Windows中使用Terminal连接SSH登录远程机器中的docker容器中使用kubectl管理集群的那些事","slug":"在docker中使用kubectl","date":"2021-01-13T10:23:08.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2021/01/13/在docker中使用kubectl/","link":"","permalink":"https://ojdev.github.io/2021/01/13/%E5%9C%A8docker%E4%B8%AD%E4%BD%BF%E7%94%A8kubectl/","excerpt":"","text":"不知道为什么我的Windows 10安装了wsl2后，会莫名其妙的失踪，各种检查都没问题，我怀疑可能处在软raid的问题上，但是不的又不影响。但是这又影响到了我日常的工作，所以我就想，在nas上用docker部署一个kubectl，然后通过远程访问，这样不用在本地安装任何东西了。 经过将近一天的实验，终于搞定了，用Windows Terminal作为终端，远程通过ssh连接到nas运行docker exec进入容器的终端，中间经历了如何安装bash-completion的过程，最后几乎完美。 镜像选用https://hub.docker.com/_/bash,13.6MB十分小巧。 kubectl直接https://kubernetes.io/zh/docs/tasks/tools/install-kubectl/下载到nas的一个路径中例如我放在了/nas/opt/kubectl/下面。 docker-compose.yaml的内容12345678910111213141516171819202122232425262728293031323334version: &quot;3.3&quot;services: kubectltest: image: bash:5.1.4 container_name: kubectltest user: 0:0 environment: - KUBECONFIG=/.kube/config command: [&quot;bash&quot;, &quot;-c&quot;, &quot;apk add bash-completion &amp;&amp; echo &#x27;source /usr/share/bash-completion/bash_completion&#x27;&gt; ~/.bashrc &amp;&amp; mkdir /etc/bash_completion.d &amp;&amp; kubectl completion bash &gt;/etc/bash_completion.d/kubectl &amp;&amp; tail -f /dev/null&quot;] volumes: - /nas/opt/kubectl/config/test:/.kube - /nas/opt/kubectl/kubectl:/usr/local/bin/kubectl restart: always deploy: resources: limits: cpus: &#x27;0.1&#x27; memory: 32M kubectlpre: image: bash:5.1.4 container_name: kubectlpre user: 0:0 environment: - KUBECONFIG=/.kube/config command: [&quot;bash&quot;, &quot;-c&quot;, &quot;apk add bash-completion &amp;&amp; echo &#x27;source /usr/share/bash-completion/bash_completion&#x27;&gt; ~/.bashrc &amp;&amp; mkdir /etc/bash_completion.d &amp;&amp; kubectl completion bash &gt;/etc/bash_completion.d/kubectl &amp;&amp; tail -f /dev/null&quot;] volumes: - /nas/opt/kubectl/config/pre:/.kube - /nas/opt/kubectl/kubectl:/usr/local/bin/kubectl restart: always deploy: resources: limits: cpus: &#x27;0.1&#x27; memory: 32M bash的镜像里竟然直接带了apk的包管理器这是我没想到的，真的小巧灵活好用，上面command里: 装bash-completion 把source /usr/share/bash-completion/bash_completion写入到 ~/.bashrc，每次登陆后就可以直接使用kubectl自动提示 创建目录 mkdir /etc/bash_completion.d 用来存放自动提示文件 kubectl completion bash &gt;/etc/bash_completion.d/kubectl 写入自动提示 tail -f /dev/null 保持容器运行 /nas/opt/kubectl/config/pre存放的是config文件,我平时要管理多个集群，所以我这里又多个目录。 Windows Terminal 配置12345678910111213141516&#123; &quot;guid&quot;: &quot;&#123;58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2534&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;测试环境&quot;, &quot;commandline&quot;: &quot;ssh -t root@192.168.0.250 \\&quot;/bin/docker exec -it kubectltest bash\\&quot;&quot;, &quot;icon&quot;: &quot;ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png&quot;, &quot;colorScheme&quot;: &quot;Vintage&quot;&#125;,&#123; &quot;guid&quot;: &quot;&#123;58ad8b0c-3ef8-5f4d-bc6f-13e4c00f2535&#125;&quot;, &quot;hidden&quot;: false, &quot;name&quot;: &quot;预发布环境&quot;, &quot;commandline&quot;: &quot;ssh -t root@192.168.0.250 \\&quot;/bin/docker exec -it kubectlpre bash\\&quot;&quot;, &quot;icon&quot;: &quot;ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png&quot;, &quot;colorScheme&quot;: &quot;One Half Light&quot;&#125;, 重点在哪个ssh -t，不然会进不去，这样就完成了一个在本地打开终端直接进入到nas里的docker容器中进行kubectl管理集群的套娃操作。 最后总结 远程连接的时候ssh的-t参数是tty的意思，不加这个参数后面的docker exec -it会报the input device is not a TTY错，进不去的。 docker-compose.yml中的command节点中多条命令用&amp;&amp;分隔，如果是&amp;分隔，或造成命令并行执行，前一个还没结束，后一个就执行完了。 遗憾如果能用webshell直接使用docker exec就更好了，即节省了本地空间，又可以给组内的人一起使用。找到了一个docker-exec-web-control项目，是3年前的了，跑起来后并不能用。","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/categories/DevOps/"}],"tags":[{"name":"Docker","slug":"Docker","permalink":"https://ojdev.github.io/tags/Docker/"},{"name":"kubectl","slug":"kubectl","permalink":"https://ojdev.github.io/tags/kubectl/"},{"name":"远程管理","slug":"远程管理","permalink":"https://ojdev.github.io/tags/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"}]},{"title":"家庭服务管理：NAS","slug":"nas","date":"2021-01-07T04:28:09.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2021/01/07/nas/","link":"","permalink":"https://ojdev.github.io/2021/01/07/nas/","excerpt":"","text":"1 一个NAS都应该能做什么我是一个经历了家庭互联网从无到有的人，小的时候家里有个电视就算是富裕家庭了，一般的家庭还仅限于有个收音机；后来逐渐的，电视，彩色电视，电话，录像机，那个时候还有一种叫录像厅的地方呢，又租录像带的地方，5毛钱一周；然后出现了VCD，DVD，大哥大，BB机，掌中宝娱乐的东西越来越丰富。 之后我到外面上高中，那是2002年，那个时候已经有网吧了，但是电脑还不是普通家庭可以承受的。 等到我上了大学的时候，就到了2005年，彼时，小灵通还有一席之地，网吧遍地开花，上网一个电话，车接车送，包夜5元还送面包和可乐。但是学校里有笔记本的同学依然是少数，很多时候大家还是用U盘和MP3，MP4来互相拷贝东西，移动硬盘由于造价比较高，并不普及，而且，120G的都算是大容量存储了。 等毕业后，移动硬盘算是比较普及的，但是依然不大，320G和500G的都算大容量了，因为那个年代，资源的体积也是很小的。 逐渐的，很多东西变成了消费品，手机的普及，家庭宽带的普及，3G的出现和4G的升级，互联网才开始完全平民化，我个人来讲，3G的出现时一个转折点，4G的出现让很多想法得以实现。资源的质量也越来越高，以前的120p的资源，到后来的480，然后进化到720p，1080p;后来之间开始普及的2k，4k，蓝光等。存储空间也开始越来越便宜，从1T的hdd到现在消费级别的1T的ssd。 手机，电视，电脑，这是家庭的网络基础互联装备，以前一个硬盘到处插不觉得麻烦，现在建个网路共享我都觉得不方便，所以逐渐的，开始了NAS的路线。 NAS所需的功能，和是否需要NAS都是看个人和家庭的需求是否有必要，否则就是吃灰的产品。那么一个NAS，对我来讲需要以下的功能。 1.1 流媒体彼时靠文件夹来分辨是什么电影，什么电视剧等等，资源混在一起，或者分成不同目录，甚至不同的硬盘装不同的东西，但是看的时候依然麻烦，而且目前网页观看也成为了大家容易接收的方式，以前电脑必装的千千静听，realplayer,xmplaoer,potplayer等等播放器，如今也变的鲜少有人问津。所以，流媒体服务就成为了一个比较基础的功能，应该能够做到，海报，简介，自动下载字幕，播放，分类这些基础的功能，下面是能够满足这几项条件的推荐。 Jellyfin 免费，开源，.Net Core，有TV端，Android端，网页端，PC端，而且，都免费，但是有点小缺点，就是硬解，遇到不支持的格式的就会强制硬解，而且使用服务端硬解，而不会使用本地硬解。 Emby Jellyfin就是从这分家的，因为Emby有收费订阅，TV端就需要订阅，其他的几乎一样。据说硬解能力比Jellyfin强。 Plex 这是个很强的产品，大部分都推荐的，但是，订阅后体检更好。TV，手机端都需要订阅后才能用，这个好像是本地硬解，不占用服务器资源，只用了一次，所以不是很确定。 elfilm http://getelfilm.com/ 1.2 下载 qBittorrent 同时满足了BT下载和挂PT的需求，以前一直都是使用aria2的，但是aria2下载BT和PT需要单独的配置，不能一个端直接满足，所以，最后还是使用了这个。 aria2 老牌下载工具 1.3 Home Assistant基础的家庭物联网工具，我是比较早接触智能家居设备的，这也导致了我家的产品比较割裂，空气净化器是，空调是格力的，扫地机是小米的，电视是乐视的，可视猫眼是叮咚，门锁是美的，有了HomeAssistant后，可以将其中一部分整合到上面。 1.4 旁路网关流畅的网络体验。 1.5 文件共享Linux下比较流行的就是SMB，但是现在看来，好像并不是常用的了。 1.6 可扩展性1.6.1 Docker1.6.1.1 Home Assistant家庭物联网 1.6.1.2 qBittorrent既满足bt又能满足pt 1.6.1.3 Jellyfin多端免费的媒体管理，自动刮削，硬解。 1.6.1.4 签到免去了每天手动签到的麻烦过程，但是gthub actions可以替代。 1.6.1.5 百度云1.6.2 虚拟机1.6.2.1 windows挂游戏，一般来说我来玩传奇的时候会挂机。 1.6.2.2 linux我用来ssh，远程管理k8s。其实nas本身就是Linux。 1.7 云 Nextcloud 1.8 ZeroTier 异地访问 VPN直连 frpc 内网穿透 1.9 选用什么系统？1.9.1 群晖1.9.1.1 黑群晖内网穿透、稳定的应用（也不一定）、同步、备份。虽然免费，但是升级什么的比较麻烦。 1.9.1.2 白群晖内网穿透、稳定的应用（也不一定）、同步、备份、稳定、可升级、贵。 我觉得性价比不高。 1.9.2 ProxmoxVE（推荐★★★★★）其本质上是一个Debian系统，用起来熟悉。 1.9.2.1 zfs存储1234567891011121314ls -l /dev/disk/by-id/total 0lrwxrwxrwx 1 root root 9 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000 -&gt; ../../sdalrwxrwxrwx 1 root root 10 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000-part1 -&gt; ../../sda1lrwxrwxrwx 1 root root 10 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000-part2 -&gt; ../../sda2lrwxrwxrwx 1 root root 10 Dec 30 10:29 ata-SCWW_SSD_16G_0000000000000-part3 -&gt; ../../sda3lrwxrwxrwx 1 root root 9 Dec 30 10:29 ata-ST99999999-******-****** -&gt; ../../sdclrwxrwxrwx 1 root root 9 Dec 30 10:29 ata-TOSHIBA_******_****** -&gt; ../../sdb#raid-0zpool create -f -o ashift=12 nas /dev/disk/by-id/ata-ST99999999-******-****** /dev/disk/by-id/ata-TOSHIBA_******_******# 加新硬盘zpool attach nas /dev/disk/by-id/ata-ST88888888-******-****** 上面完成后会在根目录下生成一个nas文件夹，就是存储池的空间了。 软raid创建存储池做为目录 1.9.2.2 软路由1qm importdisk 100 /nas/20201229-Ipv4P-Mini-x86-64-generic-squashfs-combined-efi.img nas-local 1.9.2.3 lxc做软路由虚拟机 1.9.3 FreeNAS（推荐★★★）免费 1.9.4 OMV（OpenMediaVault）免费、功能过于基础。 1.9.5 Windows Server（推荐★★★★）免费，这点可能很多人不知道，Windows Server Core是有免费版本的。只是没有桌面环境，但是已经Windows Server了，桌面环境除了浪费空间和资源外，真的就没什么用了。 HyperV可以直接使用Windows Admin Center可以直接进行管理，也可以使用Windows10 的hyper-V远程管理。 硬件直通对硬件本身要求较高，但是一般也够用了。 用起来操作很熟悉。 1.9.6 Ubuntu Server1.9.7 UNRAID据说硬件直通性能非常好，但是收费，虽然有破解版。 1.9.8 ESXI老牌。 1.10 硬件上最好有什么？1.10.1 网卡 千兆 万兆1.10.2 Raid卡 多硬盘，也可以用软raid1.10.3 热插拔 多盘位1.10.4 USB3 打印机1.10.5 DC电源 静音1.10.6 1+N块硬盘 组RAID 2 NAS服务管理2.1 Jellyfin2.1.1 电影多版本管理以Wonder Woman 1984这部电影为例，我的电影都是放在/nas/movies里的,所以目录结构是这样的: 12345678movies/└── Wonder.Woman.1984.2020 ├── Wonder.Woman.1984.2020 - 1080P.mkv ├── Wonder.Woman.1984.2020 - 1080P.china.srt └── Wonder.Woman.1984.2020 - 2160p.mp4 └── Wonder.Woman.1984.2020 - 8k.mp4 └── Wonder.Woman.1984.2020 - 不是导演剪辑版.mp4 └── Wonder.Woman.1984.2020 - 山寨版.mp4 根据jellyfin文档显示，当多个不同格式的版本合并起来的时候，需要让文件名与文件夹名保持一直然后再后面加&#123;空格&#125;&#123;连字符&#125;&#123;空格&#125;&#123;版本标签&#125;的形式，这样jellyfin就可以进行识别，在电影的界面中就可以进行版本的切换选择，在这一点上不如plex方便了。 其中标签是可以自定义的，连字符不支持.和空格。 ** 官方的文档中推荐的文件夹名是Wonder.Woman.1984 (2020) ，但是实际使用中我发现Wonder.Woman.1984.2020也是可以的，在文件管理上，名字中带有空格对我来讲会不大习惯，所以可以根据自己习惯选择对名称的管理。 参考链接 https://jellyfin.org/docs/general/server/media/movies.html 2.1.2 字幕中的方块一般的解决方式都是在字幕中进行设置，这种方式是使用转码烧录的形式，对cpu和内存都会进行消耗，对于性能比较低的nas来说，压力很大，比如我的j1900矿渣。目前有一个简单的解决办法，升级到&gt;Jellyfin 10.7.0的版本，目前还是rc版，这个版本支持加载自定义的字体了控制台&gt;播放&gt;备用字体文件路径，就解决了。 2.2 docker-compose2.2 1 安装docker12345apt updateapt install apt-transport-httpsapt upgrade -ycurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -echo &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot; &gt; /etc/apt/sources.list.d/docker.list 参考链接 https://docs.docker.com/engine/install/debian/2.2 2 安装docker-compose 1apt install docker-ce docker-compose 2.2 3 前期准备创建子网隔离，非必须。 1docker network create --subnet 10.10.10.0/24 pve-subnet 该处的pve-subnet对应下面docker-compose.yml文件中networks节点下的name,可以忽略，docker-compose会自动建立。 2.2 4 为什么使用docker-composedocker虽然部署与管理变的容易，但是当遇到版本升级的时候就需要重新使用命令行进行一次部署，然而很多时候我都懒得进行本分，目前工作中使用的是k8s，在家用nas上我觉得实在是没必要，于是比较传统的docker-compose就是一个很好的解决方案。每当有版本升级的时候只要修改docker-compose.yml文件中对应的镜像标签，然后重新docker-compose up -d就自动进行拉取部署升级，不会影响其他未修改配置的镜像，就方便很多了。 2.3 Home Assistant2.3.1 调用本地图片在configuration.yaml文件的位置建立一个www文件夹，将要引用的文件放进去，在配置文件中使用/local对应的就是www文件夹中的文件，例如 12345678910111213141516 blueprints│ └── automation│ └── homeassistant│ ├── motion_light.yaml│ └── notify_leaving_zone.yaml├── configuration.yaml├── deps├── groups.yaml├── home-assistant.log├── home-assistant_v2.db├── scenes.yaml├── scripts.yaml├── secrets.yaml├── tts└── www └── floorplan.png 如果要在配置中调用www/floorplan.png则对应的配置文件为: 12345678type: picture-elementsimage: /local/floorplan.pngelements: - type: state-badge entity: binary_sensor.updater style: top: 65% left: 38% 2.3.2 水位流量采集我在天气好的时候会出去钓鱼，但是松花江如果在汛期的时候涨水，有些地方就去不了了，为了不耽误时间，我发现松辽水利网每天8点会发布一次当前的水位流量，所以我进行了采集，这样出门前看一下水位和流速来判断可以去哪个地方钓鱼，避免白跑一趟。 在configuration.yaml下面加入下面的内容，就可以在面板中加载进来了。 123456789101112131415sensor: - platform: scrape resource: http://www.slwr.gov.cn/swjgzfw/sssq.asp name: slwr shuiwei select: &#x27;script&#x27; index: 1 scan_interval: 3600 value_template: &gt;- &#123;&#123; (value | replace (&quot;cvt(&quot;,&quot;&quot;) | replace (&quot;);&quot;,&quot;&quot;) | replace (&quot;&#x27;&quot;,&quot;&quot;) ) &#125;&#125; - platform: scrape resource: http://www.slwr.gov.cn/swjgzfw/sssq.asp name: slwr liuliang select: &#x27;font&#x27; index: 8 scan_interval: 3600 2.3.3 小米扫地机器人第一二代的小米扫地机，使用的是Token的方式加入的，目前有一个简单的工具https://github.com/PiotrMachowski/Xiaomi-cloud-tokens-extractor 运行后输入账号密码就可以获取到局域网中的IP和Token、设备Id，我们这里使用IP和Token就够了。获取到信息后，在configuration.yaml下面加入下面的内容，就可以在面板中加载进来了。 1234vacuum: - platform: xiaomi_miio host: 192.168.0.69 token: ********************************** 2.3.4 格力宁韵空调https://github.com/RobHofmann/HomeAssistant-GreeClimateComponent下载最新版本解压后如下 12345678910111213141516| climate.yaml| configuration.yaml| info.md| LICENSE| README.md|+---.github| \\---ISSUE_TEMPLATE| bug_report.md| feature_request.md|\\---custom_components \\---gree climate.py manifest.json __init__.py 如果configuration.yaml同级目录下没有custom_components则直接复制进去，如果已经存在，则复制下面的gree到custom_components下，然后在复制climate.yaml到configuration.yaml同级目录,之后编辑``configuration.yaml同级目录加入一行climate: !include climate.yaml`。 使用格力+接入空调，这样就能在路由器中看到空调的IP和MAC，下面会用到，虽然我是在苏宁购买的，但是苏宁的app实在是不好用，于是下载了格力+，在添加设备的时候直接选择宁韵，然后重置空调的wifi，就可以连接了，如果连不上，那么修改wifi里的2.4G的无线模式为11gb开头的模式。 之后编辑climate.yaml中的内容： 12345678910- platform: gree name: 起一个名字，例如ningyun_ac host: 空调的IP地址 port: 7000 mac: &#x27;空调的MAC地址，可以是-分隔，也可以是:分隔&#x27; target_temp_step: 1 lights: input_boolean.first_ac_lights health: input_boolean.first_ac_health sleep: input_boolean.first_ac_sleep powersave: input_boolean.first_ac_powersave 2.3.x lovelace1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950title: 保利·上城views: - panel: false title: Home icon: &#x27;hass:home-assistant&#x27; badges: [] cards: - type: vertical-stack cards: - type: &#x27;custom:weather-card&#x27; entity: weather.bao_li_shang_cheng number_of_forecasts: &#x27;5&#x27; - type: horizontal-stack cards: - type: entity entity: sensor.slwr_shuiwei name: 水位 unit: 米 - type: entity entity: sensor.slwr_liuliang name: 流量 unit: 立方米 - type: picture-elements elements: - type: state-icon entity: vacuum.xiaomi_vacuum_cleaner style: top: 65% left: 35% - type: state-icon entity: climate.ningyun_ac style: top: 8% left: 35% image: /local/floorplan.png - type: vertical-stack cards: - type: thermostat entity: climate.ningyun_ac name: 格力宁韵 - type: picture-glance image: /local/img/vacuum.png entities: - entity: vacuum.xiaomi_vacuum_cleaner tap_action: action: more-info hold_action: action: none title: 小米 entity: vacuum.xiaomi_vacuum_cleaner 2.4 syncthing资源占用小，内网发现，全球发现，内网穿透。 要注意的是从其他设备同步过来的文件夹，默认情况下会出现在/config下， 2.5 frp如今我遭遇了无法在家的问题，但是手机里的资料还是要同步回家里的NAS，尝试了ngrok、autossh等方案之后，最后还是选定了老牌的frp，之前也用过，但是不知道是版本的问题还是配置的问题，会导致我的网络卡死，这次重新尝试后发现，很稳定，资源的消耗也变小了，在vps上使用nginx绑定泛域名到frps，然后再用frps绑定泛域名，之后直接使用子域名访问各个服务。 2.5.1 服务端nginx配置/etc/nginx/conf.d/nas.conf123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960server &#123; listen 80; server_name *.phub.ml; return 301 https://$host$request_uri;&#125;server &#123;# listen [::]:443 ssl ipv6only=on; # managed by Certbot listen 443 ssl http2; # managed by Certbot server_name *.nas.com; ssl_certificate /etc/letsencrypt/live/nas.com/fullchain.pem; # managed by Certbot ssl_certificate_key /etc/letsencrypt/live/nas.com/privkey.pem; # managed by Certbot include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot client_max_body_size 500m; client_body_buffer_size 256k; client_header_timeout 3m; client_body_timeout 3m; send_timeout 3m; proxy_connect_timeout 300s; proxy_read_timeout 300s; proxy_send_timeout 300s; proxy_buffer_size 64k; proxy_buffers 4 32k; proxy_busy_buffers_size 64k; proxy_temp_file_write_size 64k; proxy_ignore_client_abort on; gzip on; gzip_min_length 1k; gzip_buffers 4 16k; #gzip_http_version 1.0; gzip_comp_level 5; gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png; gzip_vary off; gzip_disable &quot;MSIE [1-6]\\.&quot;; location /api/websocket &#123; proxy_pass http://127.0.0.1:27001/api/websocket; proxy_read_timeout 60s; proxy_set_header Host $host; proxy_set_header X-Real_IP $remote_addr; proxy_set_header X-Forwarded-for $remote_addr; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &#x27;Upgrade&#x27;; &#125; location / &#123; proxy_pass http://127.0.0.1:27001; proxy_set_header Host $host; proxy_redirect off; proxy_buffering off; proxy_http_version 1.1; proxy_ssl_server_name on; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &quot;upgrade&quot;; &#125;&#125; 2.5.2 服务端的frps配置/etc/frp/frps.ini12345678[common]bind_addr = 0.0.0.0bind_port = 7557bind_udp_port = 5775token = ***************************vhost_http_port = 27001vhost_https_port = 5443tcp_mux = true 2.5.3 客户端的frpc配置frpc.ini123456789101112131415161718192021222324252627282930313233343536[common]server_addr = 000.000.000.000server_port = 7557tcp_mux = truetoken = *******************[ssh]type = tcplocal_port = 22remote_port = 20002[qBittorent]type = httplocal_port = 8008custom_domains = bt.nas.com[syncthing]type = httplocal_port = 8384custom_domains = sync.nas.com[images]type = httplocal_port = 8698custom_domains = images.nas.com[openwrt]type = httplocal_ip = 192.168.0.253local_port = 80custom_domains = gw.nas.com[movies]type = httplocal_port = 8096custom_domains = movies.nas.com 2.5.4 重点内容 nginx中的proxy_pass http://127.0.0.1:27001对应到frps.ini中的vhost_https_port = 5443 frps.ini中的bind_port = 7557对应到客户端中的server_port = 7557 frpc中会出现[E] [control.go:158] [c4426f709c4d9725] work connection closed before response StartWorkConn message: EOF的错误信息，目前没找到解决办法，但是还没发现耽误使用的情况 附录linux下rename命令进行批量重命名1234rename &#x27;s///g&#x27; *.mp4例如rename &#x27;s/cowboy\\.bebop\\.//g&#x27; *.mkv将cowboy.bebop替换为空，也就是删掉 其中s为开始，第一个/后面写要查找的字符串,第二个/进行分隔，第三个/前面写替换的字符串，然后g结尾 特殊字符用\\进行转义，包括空格和[]&#123;&#125;().\\~!@#$%^&amp;*_+-=;:’”&lt;&gt;,?`之类的，总之就是会影响正则的都要进行转义 docker-compose.yml12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364version: &quot;3.3&quot;services: qbittorrent: image: ghcr.io/linuxserver/qbittorrent:amd64-latest container_name: qbittorrent environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai - UMASK_SET=022 - WEBUI_PORT=8008 volumes: - /nas/opt/qbittorrent/config:/config - /nas:/downloads ports: - 6969:6969 - 6969:6969/udp - 8008:8008 restart: always deploy: resources: limits: cpus: &#x27;0.5&#x27; memory: 200M home-assistant: image: homeassistant/home-assistant:2020.12.1 container_name: home-assistant environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai volumes: - /etc/localtime:/etc/localtime:ro - /nas/opt/home-assistant/config:/config restart: always network_mode: &#x27;host&#x27; deploy: resources: limits: cpus: &#x27;0.5&#x27; memory: 200M syncthing: image: ghcr.io/linuxserver/syncthing container_name: syncthing hostname: syncthing environment: - PUID=1000 - PGID=1000 - TZ=Asia/Shanghai volumes: - /nas/syncthing:/config ports: - 8384:8384 - 22000:22000 - 21027:21027/udp deploy: resources: limits: cpus: &#x27;0.5&#x27; memory: 256Mnetworks: default: external: name: pve-subnet 启动start.sh文件里，直接使用bash start.sh启动。 1docker-compose --compatibility -f docker-compose.yml up -d 停止了stop.sh文件里，直接使用bash stop.sh停止。 1docker-compose --compatibility down 增加--compatibility参数是因为docker不是swam的模式的情况下，deploy节点下对资源的限制是不起作用的。","categories":[{"name":"家庭服务","slug":"家庭服务","permalink":"https://ojdev.github.io/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/"}],"tags":[{"name":"NAS","slug":"NAS","permalink":"https://ojdev.github.io/tags/NAS/"},{"name":"Jellyfin","slug":"Jellyfin","permalink":"https://ojdev.github.io/tags/Jellyfin/"},{"name":"Proxmox VE","slug":"Proxmox-VE","permalink":"https://ojdev.github.io/tags/Proxmox-VE/"},{"name":"PVE","slug":"PVE","permalink":"https://ojdev.github.io/tags/PVE/"},{"name":"docker","slug":"docker","permalink":"https://ojdev.github.io/tags/docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://ojdev.github.io/tags/docker-compose/"},{"name":"homeassistan","slug":"homeassistan","permalink":"https://ojdev.github.io/tags/homeassistan/"},{"name":"小米","slug":"小米","permalink":"https://ojdev.github.io/tags/%E5%B0%8F%E7%B1%B3/"},{"name":"格力","slug":"格力","permalink":"https://ojdev.github.io/tags/%E6%A0%BC%E5%8A%9B/"},{"name":"qBittorrent","slug":"qBittorrent","permalink":"https://ojdev.github.io/tags/qBittorrent/"},{"name":"松花江","slug":"松花江","permalink":"https://ojdev.github.io/tags/%E6%9D%BE%E8%8A%B1%E6%B1%9F/"}]},{"title":"架构蓝皮书(基础版)","slug":"Architecture","date":"2019-07-16T05:00:00.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2019/07/16/Architecture/","link":"","permalink":"https://ojdev.github.io/2019/07/16/Architecture/","excerpt":"","text":"工欲善其事，必先利其器云首先，当一个团队开始的时候需要有装备，硬件装备是桌椅板凳电脑网络，开发过程中需要测试环境，代码管理工具等。此时，一个局域网内的私有云就够了。但是考虑到外出和在家办公的场景，那么Aliyun、Google云等这类的线上云是一个更好的选择，而且，再做CI/CD的时候会更方便一些。然而弊端就是需要额外的支出。 代码管理工具，一般是GitHub，GitLab，Azure DevOps，这里推荐Azure DevOps。 敏捷一个团队，再项目进程中需要一个合理的管理，节点日期，任务管理分配，时间计算等，一个有效率的团队不应该是一个大的团队，即使有了大的团队，也应该根据不同的场景进行拆分，目前看来，一个敏捷团队再3人以上，7人一下应该是比较合理的，7人以上应该也没问题，但是个人感觉，效率可能会有个折扣。 敏捷团队要做什么？按照以往的文章与成书中描述，是透明，检验，适应。 透明透明是指在开发环节中保持高度的可见性，所有的成员都应该知道和理解进度和要做的内容。 检验开发过程中要做到足够的检验，用以确保开发过程中能够及时的发现重大偏差以及错误。 适应在上面的检验中发现了重大的偏差以及错误，那么应该即使的调整并纠正，来检查偏差以及错误带来的损失。 敏捷怎么做敏捷中有3个角色，分别是PO（产品负责人），SM（敏捷大师），Dev（开发人员）。 产品负责人开发团队敏捷大师误区敏捷模式不是万能的，而且不应该为了敏捷而敏捷，在开发过程中，应该根据团队自身情况对敏捷进行调整，例如由PO担任SM的角色也是可以的。 微服务微服务，将业务划分为最小单位，彼此独立，充分的解耦，语言无关性，一个最小化的服务可以是任意的语言进行开发，采用http或者rpc在服务之间进行交互。部署简单，对某一个服务进行升级的时候不会影响整个环境，甚至在某些集群中可以做到无感切换。 敏捷是最适合微服务开发的一种模式。 Azure DevOpsAzure DevOps免费提供线上的版本，好处是一直使用到最新的版本，但是没有足够的本地化，当然也免去了多余的费用。 另外，Azure DevOps还提供了本地服务器版本,下载后直接在本地的服务器安装就可以使用了。 它能做什么 它提供了交互较好的板管理，并且很大程度上可以进行自定义 它有完整的长篇故事，积压工作项，任务，bug的管理 并且仓储支持Git以及VSTS自身的仓储管理 而且可以安装很多插件 还有WebHook可以有一系列的事件触发 可以接入很多第三方服务 对于使用Visual Studio进行开发的团队，Azure DevOps是一个不二选择。 DDDDDD,被称作为领域驱动设计，做了这么久，其实最大的难点在于聚合根的设计上，总是会出现不恰当的存在。 GitDockerCQRSEventSource.Net Core健康检查.Net Core默认已经支持了健康检查，只要在代码中开启功能就可以了 12345678910111213141516171819public IServiceProvider ConfigureServices(IServiceCollection services)&#123; ... services.AddHealthChecks(); ...&#125;public void Configure(IApplicationBuilder app) &#123; ... app.UseHealthChecks(&quot;/hc&quot;, new HealthCheckOptions &#123; ResultStatusCodes = &#123; [Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Healthy] = StatusCodes.Status200OK, [Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Degraded] = StatusCodes.Status200OK, [Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy] = StatusCodes.Status503ServiceUnavailable &#125; &#125;); #endregion ...&#125; CQRS单元测试多版本APISwagger消息队列消息中心Gateway集群Docker Swarmkubernetes其他一个框架 它不一定是对的，但是它有参考价值。","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/categories/DevOps/"}],"tags":[{"name":"架构","slug":"架构","permalink":"https://ojdev.github.io/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"windows-terminal","slug":"windows-terminal","date":"2019-06-25T06:04:35.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2019/06/25/windows-terminal/","link":"","permalink":"https://ojdev.github.io/2019/06/25/windows-terminal/","excerpt":"","text":"windows-terminalwindows-terminal发布了，虽然只是预览版，目前还是很简单的部分功能，从windows商店中直接搜windows-terminal就能安装，前提是windows10已经升级1903. 1903 中的 wsl经过一个下午的摸索，大致了解了一些简单的用法，推荐安装wsl版的debian或者ubuntu，开启linux子系统后在windows商店中搜索ubuntu或者debian安装就可以了。安装完成后启动一下，推荐debian，小巧，一共73m，ubuntu18要200多m。 wsl终端体验也很好，cmd中使用ssh登录经常会出现乱行的问题，wsl中则没有这个现象，而且，目前的wsl中很多操作可以对windows本身进行修改。缺什么也可以指直接使用linux的方式安装，而写windows的秋季更新中的wsl 2.0docker可以与windows中的互通。 这样一来也免了安装cygwin或者chocolatey了。 新版的vscode好像也只是直接使用wsl来进行控制台操作了，不过目前好像还是预览版中的功能。 配置因为目前没有配置界面，所有的设置都是一个json文档，所以这里稍微的解释一下配置方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&#123; &quot;globals&quot; : &#123; &quot;alwaysShowTabs&quot; : true, &quot;defaultProfile&quot; : &quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;, //profiles节点中的guid，表示默认打开那个命令行 &quot;initialCols&quot; : 120, &quot;initialRows&quot; : 30, &quot;keybindings&quot; : [ //这部分是快捷键 ], &quot;requestedTheme&quot; : &quot;system&quot;, &quot;showTabsInTitlebar&quot; : true, &quot;showTerminalTitleInTitlebar&quot; : true &#125;, &quot;profiles&quot; : [ &#123; &quot;acrylicOpacity&quot; : 0.5, //毛玻璃效果的透明度，推荐0.75 &quot;background&quot; : &quot;#012456&quot;, &quot;closeOnExit&quot; : true, &quot;colorScheme&quot; : &quot;Campbell&quot;, //对应schemes节点中的配色方案，默认这个算是好看的，其他的还是难看了点 &quot;commandline&quot; : &quot;powershell.exe&quot;, &quot;cursorColor&quot; : &quot;#FFFFFF&quot;, &quot;cursorShape&quot; : &quot;bar&quot;, &quot;fontFace&quot; : &quot;Consolas&quot;, &quot;fontSize&quot; : 10, &quot;guid&quot; : &quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;, //id用来做标识 &quot;historySize&quot; : 9001, &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;.png&quot;, //图标这中间的id不需要与guid对应。 &quot;name&quot; : &quot;Windows PowerShell&quot;, //显示的名字 &quot;padding&quot; : &quot;0, 0, 0, 0&quot;, &quot;snapOnInput&quot; : true, &quot;startingDirectory&quot; : &quot;%USERPROFILE%&quot;, //默认打开命令行窗口定位到的路径 &quot;useAcrylic&quot; : true //是否打开毛玻璃效果 &#125;, &#123; &quot;acrylicOpacity&quot; : 0.75, &quot;closeOnExit&quot; : true, &quot;colorScheme&quot; : &quot;Campbell&quot;, &quot;commandline&quot; : &quot;cmd.exe&quot;, &quot;cursorColor&quot; : &quot;#FFFFFF&quot;, &quot;cursorShape&quot; : &quot;bar&quot;, &quot;fontFace&quot; : &quot;Consolas&quot;, &quot;fontSize&quot; : 10, &quot;guid&quot; : &quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;, &quot;historySize&quot; : 9001, &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;.png&quot;, &quot;name&quot; : &quot;cmd&quot;, &quot;padding&quot; : &quot;0, 0, 0, 0&quot;, &quot;snapOnInput&quot; : true, &quot;startingDirectory&quot; : &quot;%USERPROFILE%&quot;, &quot;useAcrylic&quot; : true &#125;, &#123; &quot;acrylicOpacity&quot; : 0.75, &quot;closeOnExit&quot; : true, &quot;colorScheme&quot; : &quot;One Half Dark&quot;, &quot;commandline&quot; : &quot;wsl.exe -d Debian&quot;, &quot;cursorColor&quot; : &quot;#FFFFFF&quot;, &quot;cursorShape&quot; : &quot;bar&quot;, &quot;fontFace&quot; : &quot;Consolas&quot;, &quot;fontSize&quot; : 10, &quot;guid&quot; : &quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;, &quot;historySize&quot; : 9001, &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png&quot;, &quot;name&quot; : &quot;Debian&quot;, &quot;padding&quot; : &quot;0, 0, 0, 0&quot;, &quot;snapOnInput&quot; : true, &quot;startingDirectory&quot; : &quot;%USERPROFILE%&quot;, &quot;useAcrylic&quot; : true &#125;, &#123; &quot;acrylicOpacity&quot; : 0.75, &quot;closeOnExit&quot; : true, &quot;colorScheme&quot; : &quot;Campbell&quot;, &quot;commandline&quot; : &quot;wsl.exe -d Debian -u root&quot;, //用root用户的形式启动wsl &quot;cursorColor&quot; : &quot;#FFFFFF&quot;, &quot;cursorShape&quot; : &quot;bar&quot;, &quot;fontFace&quot; : &quot;Consolas&quot;, &quot;fontSize&quot; : 10, &quot;guid&quot; : &quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e41&#125;&quot;, &quot;historySize&quot; : 9001, &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png&quot;, &quot;name&quot; : &quot;Debian(root)&quot;, &quot;padding&quot; : &quot;0, 0, 0, 0&quot;, &quot;snapOnInput&quot; : true, &quot;startingDirectory&quot; : &quot;%USERPROFILE%&quot;, &quot;useAcrylic&quot; : true &#125;, &#123; //这个条目是我自己添加的 &quot;acrylicOpacity&quot; : 0.75, &quot;closeOnExit&quot; : true, &quot;colorScheme&quot; : &quot;Campbell&quot;, &quot;commandline&quot; : &quot;wsl.exe -d Debian -u root -e ssh root@***.***.***.***&quot;, //启动一个ssh，如果在wsl中已经做了免密登录，则会直接进入ssh中 &quot;cursorColor&quot; : &quot;#FFFFFF&quot;, &quot;cursorShape&quot; : &quot;bar&quot;, &quot;fontFace&quot; : &quot;Consolas&quot;, &quot;fontSize&quot; : 10, &quot;guid&quot; : &quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e42&#125;&quot;,//id修改一下，随便改一下就可以，只要满足guid规则。 &quot;historySize&quot; : 9001, &quot;icon&quot; : &quot;ms-appx:///ProfileIcons/&#123;9acb9455-ca41-5af7-950f-6bca1bc9722f&#125;.png&quot;, &quot;name&quot; : &quot;ssh(root)&quot;, &quot;padding&quot; : &quot;0, 0, 0, 0&quot;, &quot;snapOnInput&quot; : true, &quot;startingDirectory&quot; : &quot;%USERPROFILE%&quot;, &quot;useAcrylic&quot; : true &#125; ], &quot;schemes&quot; : [ &#123; &quot;background&quot; : &quot;#0C0C0C&quot;, &quot;black&quot; : &quot;#0C0C0C&quot;, &quot;blue&quot; : &quot;#0037DA&quot;, &quot;brightBlack&quot; : &quot;#767676&quot;, &quot;brightBlue&quot; : &quot;#3B78FF&quot;, &quot;brightCyan&quot; : &quot;#61D6D6&quot;, &quot;brightGreen&quot; : &quot;#16C60C&quot;, &quot;brightPurple&quot; : &quot;#B4009E&quot;, &quot;brightRed&quot; : &quot;#E74856&quot;, &quot;brightWhite&quot; : &quot;#F2F2F2&quot;, &quot;brightYellow&quot; : &quot;#F9F1A5&quot;, &quot;cyan&quot; : &quot;#3A96DD&quot;, &quot;foreground&quot; : &quot;#F2F2F2&quot;, &quot;green&quot; : &quot;#13A10E&quot;, &quot;name&quot; : &quot;Campbell&quot;, &quot;purple&quot; : &quot;#881798&quot;, &quot;red&quot; : &quot;#C50F1F&quot;, &quot;white&quot; : &quot;#CCCCCC&quot;, &quot;yellow&quot; : &quot;#C19C00&quot; &#125;, //其他配色方案 ]&#125;","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"windows-terminal","slug":"windows-terminal","permalink":"https://ojdev.github.io/tags/windows-terminal/"},{"name":"wsl","slug":"wsl","permalink":"https://ojdev.github.io/tags/wsl/"}]},{"title":"在AzureDevops中集成SonarQube","slug":"SonarQube","date":"2019-06-12T02:48:13.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2019/06/12/SonarQube/","link":"","permalink":"https://ojdev.github.io/2019/06/12/SonarQube/","excerpt":"","text":"SonarQube是管理代码质量的一个平台，有商业版也可以本地部署。 部署SonarQube SonarQube需要Jdk的支持； ElasticSearch是可选的； 数据库使用jdbc； 本内容使用Docker进行部署 docker-compose.yaml1234567891011121314151617version: &quot;3&quot;services: CodeQuality.SonarQube: image: sonarqube:lts ##新版，7.x只能对master分支进行分析，需要商业授权 container_name: codequality-sonarqube environment: - SONARQUBE_JDBC_USERNAME=$&#123;DB_POSTGRESQL_USER&#125; - SONARQUBE_JDBC_PASSWORD=$&#123;DB_POSTGRESQL_PASS&#125; - SONARQUBE_JDBC_URL=jdbc:postgresql://$&#123;DB_POSTGRESQL_URL_AND_PORT&#125;/sonar ports: - &quot;2303:9000&quot; - &quot;2302:9002&quot; volumes: - &quot;/etc/timezone:/etc/timezone&quot; - &quot;/etc/localtime:/etc/localtime&quot; restart: always 这里使用了pgsql。 部署完成后要进行配置，用admin进行登录，点击右上角头像，选择我的账户-&gt;安全 在令牌下输入一个令牌名选择”生成”,复制生成的令牌。 AzureDevops在AzureDevops中安装SonarQube 进入azure devops中，进入项目，进入到设置中的服务连接，新建服务连接中找到SonarQube服务连接，输入任意的名称，Server Url输入http://[部署的地址]:2303,Token输入刚刚生成的令牌，保存即可。以.net core生成PR审阅的时候顺便做代码质量检测举例，其他的项目有些麻烦。 在生成定义中添加任务Prepare Analysis Configuration 在SonarQube Server Endpoint中选择我们刚刚创建的服务连接 ProjectKey中填入一个名字，推荐使用$(Build.Repository.Name)用仓储的名字 Project Name可以留空 Project Version写一个版本号，推荐使用PR$(Build.BuildNumber)以上推荐做成任务组。 继续添加.net core生成过程，Restore、Build、Test、项目路径要选择成解决方案文件。 然后添加任务Run Code Analysis 添加任务Publish Quality Gate Result 这样，在每次PR生成的时候就会自动去做代码质量检测，商业版授权，会将检测中的不合理内容直接更新到PR中，非商业代理则需要登录SonarQube去查看。 一下是实际的应用 定义任务组 实际应用","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/categories/DevOps/"}],"tags":[{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/tags/DevOps/"},{"name":"Azure DevOps","slug":"Azure-DevOps","permalink":"https://ojdev.github.io/tags/Azure-DevOps/"},{"name":"SonarQube","slug":"SonarQube","permalink":"https://ojdev.github.io/tags/SonarQube/"}]},{"title":"k8s的环境搭建","slug":"kubernetes-for-debian","date":"2019-06-03T09:31:00.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2019/06/03/kubernetes-for-debian/","link":"","permalink":"https://ojdev.github.io/2019/06/03/kubernetes-for-debian/","excerpt":"","text":"依然是模拟环境，使用windows10的hyperV。 在虚拟机中安装debian9，只要核心的那种，开openssh的。 更新debian 12apt updateapt upgrade -y 开启root的ssh登录修改/etc/ssh/sshd_config中的 PermitRootLogin为PermitRootLogin yes，保存然后重启/etc/init.d/ssh restart非必须 关闭交换内存 kubernetes 的想法是将实例紧密包装到尽可能接近100％。 所有的部署应该与 CPU 和内存限制固定在一起。 所以如果调度程序发送一个 pod 到一台机器，它不应该使用交换，设计者不想交换，因为它会减慢速度，所以关闭 swap 主要是为了性能考虑。当然为了一些节省资源的场景，比如运行容器数量较多，可添加 kubelet 参数 –fail-swap-on=false 来解决。 12swapoff -a nano /etc/fstab 找到swap was on /dev/sda3 during installation把下面的/dev开头的注释掉 或者在init的时候使用参数kubeadm init --ignore-preflight-errors Swap 然后安装k8s的aliyun源12345678apt-get update &amp;&amp; apt-get install -y apt-transport-httpscurl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.listdeb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial mainEOF apt-get updateapt-get install -y kubelet kubeadm kubectlapt-mark hold kubelet kubeadm kubectl 添加docker源1234567curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -cat &lt;&lt;EOF&gt;/etc/apt/sources.list.d/docker.listdeb [arch=amd64] https://download.docker.com/linux/debian stretch stableEOFapt updateapt install -y docker-ce 添加docker的aliyun镜像源参考123456789101112131415cat &lt;&lt;EOF&gt;/etc/docker/daemon.json&#123; &quot;registry-mirrors&quot;: [&quot;https://********.mirror.aliyuncs.com&quot;], &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;], &quot;log-driver&quot;: &quot;json-file&quot;, &quot;log-opts&quot;: &#123; &quot;max-size&quot;: &quot;100m&quot; &#125;, &quot;storage-driver&quot;: &quot;overlay2&quot;&#125;EOFmkdir -p /etc/systemd/system/docker.service.dsystemctl daemon-reloadsystemctl restart dockersystemctl enable docker 重启系统，让所有配置生效。 开始集群初始化1kubeadm init --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers --image-repository指定拉取镜像的地址，避免从google无法访问的情况成功后的内容 1234567891011121314151617Your Kubernetes control-plane has initialized successfully!To start using your cluster, you need to run the following as a regular user: mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/configYou should now deploy a pod network to the cluster.Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at: https://kubernetes.io/docs/concepts/cluster-administration/addons/Then you can join any number of worker nodes by running the following on each as root:kubeadm join 172.17.183.236:6443 --token 4xr9ys.yxaxewry4xarkghy \\ --discovery-token-ca-cert-hash sha256:3a73933bfd0fb5e2fe2e045292a395d55c652e9e8a141111335b1710350f9d37 创建成功后根据提示进行操作，记录最下面的链接语句，以备其他节点接入。 安装Helm先去Helm的releases页面查看当前最高的版本号，目前最高的是2.14.1 下载并安装123curl -O -L https://get.helm.sh/helm-v2.14.1-linux-amd64.tar.gztar -zxvf helm-v2.14.1-linux-amd64.tar.gzmv linux-amd64/helm /usr/local/bin/helm 创建tiller的serviceaccount和clusterrolebinding 123kubectl create serviceaccount --namespace kube-system tillerkubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tillerhelm init --history-max 200 --service-account tiller --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts 安装Istio先去Istio的releases页面查看当前最高的版本号，目前最高的是1.2.0 下载并安装1curl -L https://git.io/getLatestIstio | ISTIO_VERSION=1.2.0 sh - 或者下载还未正式提供的版本1.2.1 123curl -O -L https://github.com/istio/istio/archive/1.2.1.tar.gztar -zxvf 1.2.1.tar.gzcd istio-1.2.1","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/categories/DevOps/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://ojdev.github.io/tags/k8s/"},{"name":"debian9","slug":"debian9","permalink":"https://ojdev.github.io/tags/debian9/"}]},{"title":"在windows上创建kubernetes集群","slug":"kubernetes-for-minikube","date":"2019-05-22T08:59:56.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2019/05/22/kubernetes-for-minikube/","link":"","permalink":"https://ojdev.github.io/2019/05/22/kubernetes-for-minikube/","excerpt":"","text":"环境 Windows 10 Pro 1903Minikube代理环境（127.0.0.1:1080） 准备工作下载minikubeRelease下载最新的版本，保存到F:\\k8s文件夹中，并重命名为mikikube 在小娜哪里搜索env，选择编辑系统环境变量,在path节点中增加F:\\k8s；增加新的环境变量MINIKUBE_HOME值为F:\\\\k8s(注意是双斜杠) 打开命令提示行，推荐terminal 对minikube进行配置: 使用hyperv创建 1minikube config set vm-driver hyperv 如果使用linux真机可以指定vm-driver为none，这样就不需要配置交换机 hyperV的交换机 1minikube config set hyperv-virtual-switch &quot;Default Switch&quot; 有空格需要用双引号包起来 创建集群开始创建集群 1minikube start --profile k8s-master --image-mirror-country cn --memory 1024 --cpus 2 --registry-mirror https://*******.mirror.aliyuncs.com 带参数–image-mirror-country cn，设置成cn就贴心的将镜像拉取送google改到了杭州aliyun –registry-mirror的镜像地址则会直接给docker 可能会失败好几遍，每次失败就minikube delete然后重新创建就可以了 最后成功内容如下 123456789 * minikube v1.1.0 on windows (amd64)* checking main repository and mirrors for images* using image repository registry.cn-hangzhou.aliyuncs.com/google_containers* Creating hyperv VM (CPUs=2, Memory=2048MB, Disk=20000MB) ...* Configuring environment for Kubernetes v1.14.2 on Docker 18.09.6* Pulling images ...* Launching Kubernetes ...* Verifying: apiserver proxy etcd scheduler controller dns* Done! kubectl is now configured to use &quot;minikube&quot; 控制台 1minikube dashboard","categories":[{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/categories/DevOps/"}],"tags":[{"name":"k8s","slug":"k8s","permalink":"https://ojdev.github.io/tags/k8s/"},{"name":"hyperV","slug":"hyperV","permalink":"https://ojdev.github.io/tags/hyperV/"},{"name":"minikube","slug":"minikube","permalink":"https://ojdev.github.io/tags/minikube/"},{"name":"kubernetes","slug":"kubernetes","permalink":"https://ojdev.github.io/tags/kubernetes/"},{"name":"windows10","slug":"windows10","permalink":"https://ojdev.github.io/tags/windows10/"}]},{"title":"RabbitMQ.EventBus.AspNetCore","slug":"rabbitmq-eventbus-netcore","date":"2019-05-06T05:52:00.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2019/05/06/rabbitmq-eventbus-netcore/","link":"","permalink":"https://ojdev.github.io/2019/05/06/rabbitmq-eventbus-netcore/","excerpt":"","text":"RabbitMQ.EventBus.AspNetCore是一个基于官方RabbitMQ.Client的二次封装包，专门针对Net Core项目进行开发，在微服务中进行消息的传递使用起来比较方便。 特性 断线重连机制 可扩展 消费失败自动打回 使用说明1. 注册1234567891011121314151617public void ConfigureServices(IServiceCollection services)&#123; string assemblyName = typeof(Startup).GetTypeInfo().Assembly.GetName().Name; services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1); services.AddRabbitMQEventBus(()=&gt;&quot;amqp://guest:guest@192.168.0.252:5672/&quot;, eventBusOptionAction: eventBusOption =&gt; &#123; eventBusOption.ClientProvidedAssembly(assemblyName); eventBusOption.EnableRetryOnFailure(true, 5000, TimeSpan.FromSeconds(30)); eventBusOption.RetryOnFailure(TimeSpan.FromMilliseconds(100)); eventBusOption.AddLogging(LogLevel.Warning); &#125;); services.AddButterfly(butterfly =&gt; &#123; butterfly.CollectorUrl = &quot;http://192.168.0.252:6401&quot;; butterfly.Service = &quot;RabbitMQEventBusTest&quot;; &#125;);&#125; 2. 订阅消息2.1 自动订阅消息123456789public void Configure(IApplicationBuilder app, IHostingEnvironment env, IServiceTracer tracer)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; app.RabbitMQEventBusAutoSubscribe(); app.UseMvc();&#125; 2.2 手动订阅消息123456789public void Configure(IApplicationBuilder app, IHostingEnvironment env, IRabbitMQEventBus eventBus)&#123; if (env.IsDevelopment()) &#123; app.UseDeveloperExceptionPage(); &#125; eventBus.Serialize&lt;EventMessage, EventMessageHandler&gt;(); app.UseMvc();&#125; 3. 发消息1234567891011121314151617181920212223[Route(&quot;api/[controller]&quot;)][ApiController]public class EventBusController : ControllerBase&#123; private readonly IRabbitMQEventBus _eventBus; public EventBusController(IRabbitMQEventBus eventBus) &#123; _eventBus = eventBus ?? throw new ArgumentNullException(nameof(eventBus)); &#125; // GET api/values [HttpGet] public IActionResult Send() &#123; _eventBus.Publish(new &#123; Body = &quot;发送消息&quot;, Time = DateTimeOffset.Now &#125;, exchange: &quot;RabbitMQ.EventBus.Simple&quot;, routingKey: &quot;rabbitmq.eventbus.test&quot;); return Ok(); &#125;&#125; 4. 订阅消息123456789101112131415161718192021222324252627282930313233[EventBus(Exchange = &quot;RabbitMQ.EventBus.Simple&quot;, RoutingKey = &quot;rabbitmq.eventbus.test&quot;)][EventBus(Exchange = &quot;RabbitMQ.EventBus.Simple&quot;, RoutingKey = &quot;rabbitmq.eventbus.test1&quot;)][EventBus(Exchange = &quot;RabbitMQ.EventBus.Simple&quot;, RoutingKey = &quot;rabbitmq.eventbus.test2&quot;)]public class MessageBody : IEvent&#123; public string Body &#123; get; set; &#125; public DateTimeOffset Time &#123; get; set; &#125;&#125;public class MessageBodyHandle : IEventHandler&lt;MessageBody&gt;, IDisposable&#123; private readonly ILogger&lt;MessageBodyHandle&gt; _logger; public MessageBodyHandle(ILogger&lt;MessageBodyHandle&gt; logger) &#123; _logger = logger ?? throw new ArgumentNullException(nameof(logger)); &#125; public void Dispose() &#123; Console.WriteLine(&quot;释放&quot;); &#125; public Task Handle(EventHandlerArgs&lt;MessageBody1&gt; args) &#123; _logger.Information(args.Original); _logger.Information(args.Redelivered); _logger.Information(args.Exchange); _logger.Information(args.RoutingKey); _logger.Information(args.Event.Body); return Task.CompletedTask; &#125;&#125;","categories":[{"name":"知识储备","slug":"知识储备","permalink":"https://ojdev.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"}],"tags":[{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://ojdev.github.io/tags/RabbitMQ/"},{"name":".net core","slug":"net-core","permalink":"https://ojdev.github.io/tags/net-core/"},{"name":"EventBus","slug":"EventBus","permalink":"https://ojdev.github.io/tags/EventBus/"},{"name":"Asp.Net Core","slug":"Asp-Net-Core","permalink":"https://ojdev.github.io/tags/Asp-Net-Core/"}]},{"title":"开发过程中需要用到的工具以及相关知识目录","slug":"develop-tools-and-faq","date":"2019-05-05T14:50:00.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2019/05/05/develop-tools-and-faq/","link":"","permalink":"https://ojdev.github.io/2019/05/05/develop-tools-and-faq/","excerpt":"","text":"框架类 ElasticSearch SQL 文档 Elastic Charts 演示 知识类 适用于Dot Net Core的WebApi接口限流框架 使用 HTTP 缓存：Etag, Last-Modified 与 Cache-Control 分布式缓存在 ASP.NET Core 中 启用 ASP.NET Core 中的跨域请求 (CORS) 工具类 百度脑图","categories":[{"name":"知识储备","slug":"知识储备","permalink":"https://ojdev.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"}],"tags":[]},{"title":"金庸武侠编年史","slug":"jinyong","date":"2012-08-14T08:28:56.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/08/14/jinyong/","link":"","permalink":"https://ojdev.github.io/2012/08/14/jinyong/","excerpt":"","text":"公元前476年 西施送入吴国；范蠡遇到阿青，阿青传越国剑士剑法。 公元前473年 越国灭掉吴国；范蠡与西施隐居，阿青离去。 526年 南北朝时期，印度高僧菩提达摩来到中国，在嵩山少林寺面壁九年，创立中国禅宗。 隋朝末年，李靖将《易筋经》中的武学奥秘，尽数领悟。 694年 明教传至中土。 唐朝末叶，嘉兴剑术名家改良越女剑法。 877年 丐帮建立。 936年—946年 少林寺法慧禅师练成了一指禅。 1030年 慕容博出生。 1047年 慕容博伤黄眉僧。 1051年 扫地僧到少林寺。 1060年 萧峰出生。 1061年 雁门关外乱石谷大战。 1062年 萧远山到少林偷研武功。 1063年 丁春秋暗算师门。 1064年 慕容复出生。 1065年 波斯“山中老人”霍山自创“乾坤大挪移”。 1069年 虚竹出生。 1071年 段誉出生。 1072年 慕容博伤崔百泉。 1074年 阿朱出生。 1077年 慕容博诈死。 1083年 萧峰接任丐帮帮主。 1090年 鸠摩智单挑天龙寺六僧。 1091年 萧峰离开丐帮。 1092年 聚贤庄大战。 1093年 无崖子去世；虚竹接任逍遥派掌门，同年被西夏招为驸马；少林寺门外混战；扫地僧讲经说法。 1094年 大理段正明禅位侄子段誉；萧峰自尽。 1110年 黄裳雕版印行万寿道藏。 1112年 王重阳出生。 1120年 黄裳向明教的高手挑战。 1127年—1130年 少林寺灵兴禅师花了三十九年练成了一指禅。 1140年 独孤求败创独孤九剑第九式破气式。 1158年 段智兴出生。 1162年 柯镇恶（江南七怪之首）出生。 1163年 周伯通出生。 1164年 黄裳完成九阴真经。洪七公出生。 1168年 欧阳锋出生。 1170年 独孤求败郁寂而终。 1171年 黄药师出生。 1173年 曲灵风出生。 1178年 裘千仞出生。 1183年 金轮法王出生。 1184年 朱子柳出生。 1186年 陈玄风 欧阳克出生。 1190年 火工头陀大开杀戒。 1196年 王重阳再入古墓，于棺上刻下部分九阴真经，并留“玉女心经，欲胜全真；重阳一生，不弱于人” 的文字，后某日无名僧与王重阳斗酒参阅九阴创九阳；宦官创葵花宝典。 1200年 第一次华山论剑。 1203年 重阳真人拜访段皇爷，废了欧阳峰20年蛤蟆功；王重阳仙逝。 1205年 郭靖出生 1206年 裘千仞伤瑛姑幼子。 1208年 黄蓉出生。 1220年 小龙女出生。 1223年 穆念慈比武招亲。 1225年 第二次华山论剑；成吉思汗去世。 1224年 杨过出生。 1244年 洪七公、欧阳峰去世。 1244年 杨过小龙女双剑合壁初试锋芒挫败金轮法王；杨过学弹指神通。 1244年 郭襄出生；杨过断臂，初入独孤求败剑冢。 1247年 张三丰出生。 1257年 明教石教主圣火令为丐帮所夺。 1259年 杨过飞石击毙蒙哥大汗；第三次华山论剑。 1262年 郭襄游少林。 1273年 一代大侠郭靖和黄蓉战死襄阳。 1296年 金毛狮王谢逊出生。 1317年 谢逊离开师父成昆，加入明教。 1318年 武当六弟子殷梨亭出生。 1323年 成昆杀谢逊一家。 1336年 谢逊及张翠山夫妇至冰火岛。 1337年 张三丰九十大寿；张无忌出生。 1338年 元兵剿灭袁州明教义军，常遇春、彭莹玉侥幸逃脱。 1339年 周芷若出生。 1340年 汝阳王女儿敏敏特穆尔出生，元帝封其“绍敏郡主”。 1341年 小昭出生。 1346年 张三丰百岁大寿；张翠山殷素素夫妇自尽。 1351年 张无忌得九阳神功。 1357年 六大派围攻光明顶；张无忌任明教教主；张三丰首创太极神功。 1358年 小昭远走波斯。 1359年 少林屠狮英雄会；白眉鹰王殷天正去世。 1360年 张无忌隐退，光明左使杨逍继任为明教第三十五代教主。 1400年 莆田少林寺得葵花宝典。 1401年 岳肃蔡子峰偷录葵花宝典；渡元禅师习辟邪剑法。 1402年 华山派分气宗剑宗。 1406年 日月神教十长老破五岳剑派剑法。 1420年 日月教袭武当山，张三丰手抄一部《太极拳经》和青年时佩带的真武剑被抢。 1458年 武当派开山祖师张三丰仙逝，享年212岁。（据《古今太极拳谱及源流阐秘》李师融先生的考证） 1479年 华山派气宗剑宗之争。 1486年 任盈盈出生。 1493年 东方不败篡日月神教教主之位；任我行被囚地牢。 1503年 余沧海灭福威镖局。 1504年 令狐冲学得独孤九剑。 1505年 任我行重夺日月神教教主。 1506年 任我行去世。 1509年 令狐冲任盈盈喜结良缘。 1610年 金蛇郎君夏雪宜惨遭灭门之祸。 1612年 金蛇郎君夏雪宜得到云南五仙教的镇教“三宝”。 1623年 袁承志出生。 1643年 袁承志被推举为七省江湖首领，同年率众人挫毁西洋红夷大炮。 1644年 袁承志助阿九挫败成王与曹化淳篡位阴谋；李自成攻入北京，明亡；吴三桂降清；李岩夫妇自杀身亡。 1645年 袁承志、夏青青避居海外。 1655年 韦小宝出生。 1669年 康熙韦小宝擒鳌拜。 1670年 韦小宝出任天地会青木堂香主。 1698年 武当派掌门陆菲青出生。 1733年 陈家洛出生。 1753年腊月，苗人凤和胡一刀决战；胡斐出生。 1780年三月十五日，苗人凤和胡斐决战。 1927年二月六日 金庸出生。 我也是网上转来的，所有有没有不对的地方，我还真不知道，毕竟金庸大师的小说没看多少，而电视剧都是改编自小说，改了很多地方的。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[]},{"title":"回忆遐想，秋","slug":"recollect-1","date":"2012-08-13T08:23:13.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/08/13/recollect-1/","link":"","permalink":"https://ojdev.github.io/2012/08/13/recollect-1/","excerpt":"","text":"不知不觉的就来了。上个月热的要命，办公室不大，6个电脑开5个，空调等于没有用，那制冷的能力根本抵消不了这5个电脑的散热能力，还有四个活人身上散发的热量。天天的先开窗然后关窗开空调，可是依然热的要死的。天天中午最热的那阵子都要去外面的仓买（注：小卖店、小超市、买东西的地方）去买冰棒来凉快一下。 这几年每年都会注意一下天气的变化，总结出来就是，冬天越来越短了，夏天越来越热了，冬天越来越暖了，夏天雨越来越少了。我记得小的时候，夏天最热的时候是在8月份的时候，这个时候地里已经挂锄了，没有地里的活了，于是三五成群的小伙伴就本着村东面的大河去洗澡，说去洗澡其实就是去玩水。那时候亚布力滑雪场还没有大规模的修建，所以也没有水污染，水是清澈见底的，脚踩在河边的沙子上是烫的，然后下到水里是凉凉的，踩着河卵石的脚底痒痒的，不时有小鱼从脚边蹿过去，还记得有一次在水里扑腾着，一个小朋友“啊”的一声，站了起来，手里抓着一条鱼，他说不知道什么东西钻他手里了，一害怕就抓起来了。 以前的夏天躲避炎热的方法很多很多，如果不去下水那么随便找一棵大树下面坐着也很凉爽，或者我是个爱吓跑的，就走街串巷，农村的树多，所以很多地方走，路都是被树荫遮盖着的。即使在屋里里面，也凉爽，我现在想来，也许是农村都是低矮的平房，没有钢筋混凝土的高楼，所以也不会吸收那么大的热量，所以不热。坐着屋里，看着外面的蓝天，清澈无比。 后来随着时间的推移，农村也在变化，亚布力滑雪场大建，上游水库蓄水，然后还有开木器场的，化塑料的，修路的要在河里采河沙，一切都变了，路边的树没了。河里的水永远的都浑浊的，我想，即使是黄河，也不过如此的颜色吧。也就是在那几年我知道了一个词叫做沙尘暴，第二年纠正了这个词叫扬沙。 印象非常深刻，是在四五月份的时候，路边的草已经发芽了，但是头一年路边的花干枯的杆茎没处理，所以还在路边，那天早上出门到处都是黄澄澄的，屋里的灯从外面隔着玻璃看都是淡蓝色的光，很诡异，我就出门了，想看看外面都什么样了，走在公路上，能见度只有三五十米的样子，用手扫一下路边的花茎，一股子灰就扬了起来，不知道为什么，那时候感觉就是末日的感觉，可我竟然还挺开心的。 回家后开了电视才知道，是沙尘暴来了。原来这就是沙尘暴，自打那年之后，每一年都没落下过，每一年都会有扬沙的天气。 也是在那些年之后，炎热的夏天我也只是抱这个鱼竿到河边找个地方躲着钓鱼而不再下水了。 破坏自然环境的都是人们自己，那个小村子也是，为了微小的一次利益，遗留下来的是长久的伤害，现在可能很多地方都有小龙虾，麻辣小龙虾这道菜。小的时候我见过那东西，我们叫蝲蛄。村子那山里小河流汇集的河里就有，而且很多，随便翻个石头可能都看得到，但自打有一年，几个人想吃鱼了，于是带着一包药从最上游的地方撒下去之后，就什么都没了。那一次他们的确实惠了，但是自此，小龙虾在那里就绝迹了，知道大约五六年之后，才听说有人在河里抓到过一只。山上的树少了，河水也小了，物种也少了。 今年的秋天我感觉来的格外的早，上周开始就觉得冷了，虽然我同事还是高呼热死了，但是我已经感觉到了凉意，尤其是早晚的时候，很突然，回想一下自打有了《2012》这部电影后，很多人就没安生过，整天纠结末日来了怎么办，还有整天吵着盼着末日赶快来的。当然，也有我这样无所谓的。毕竟，若电影里那是事实，一般来说也是躲不掉的吧，所以，对于必输的结果去耗费时间琢磨他干嘛。生活中的很多事情和很多选择不也是这样吗，只是有时候明明知道了结果但是还是抱着一线的侥幸而已。这几年来，地震，海啸，从来没断过，我大中华也在经历了天灾后通过微博爆出了更多的人祸，想想这几年发生的，汶川地震、青海地震、还有各个城市的造海运动，然后去年的728，今年的启东还有四川那个什么来着。天灾人祸不断，所以末日之的是自然的末日还是其他的末日呢？ 写了这么多，就如标题一样，只是遐想和回忆。 秋天来了，感觉来的太早了，如此而已。","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[]},{"title":"教练终于承认，曾给叶诗文服用一种叫做一氧化二氢的液体","slug":"yeshiwen-h2o","date":"2012-08-03T08:24:45.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/08/03/yeshiwen-h2o/","link":"","permalink":"https://ojdev.github.io/2012/08/03/yeshiwen-h2o/","excerpt":"","text":"叶诗文的教练终于承认了！曾给叶诗文服用一种叫做一氧化二氢的液体！ 一氧化二氢是有危害的，是危险品，下面来列举一下一氧化二氢都有什么样的危害： 又叫做“氢氧基酸”，是酸雨的主要成分； 对泥土流失有促进作用； 对温室效应有推动作用； 它是腐蚀的成因； 过多的摄取可能导致各种不适； 皮肤与其固体形式长时间的接触会导致严重的组织损伤； 被吸入肺部可以致命； 处在气体状态时，它能引起严重灼伤； 在不可救治的癌症病人肿瘤中已经发现该物质； 对此物质上瘾的人离开它168小时便会死亡； 看到了吗，这是一个很可怕的东西啊！在看看一氧化二氢都被应用到什么地方： 各式各样的残忍的[动物]研究； [美国海军]有秘密的一氧化二氢的传播网； 全世界的[河流]及[湖泊]都被一氧化二氢污染； 常常配合杀虫剂使用；洗过以后，[农产品]仍然被这种物质污染； 在一些“[垃圾食品]”和其它食品中的[食品添加剂 教练为什么要给叶诗文服用这么危险的东西呢？这么危险的东西在比赛中到底起到了什么作用呢？这个所谓的一氧化二氢到底是什么秘密武器呢？ 其实我是知道的，因为我也服用过，而且这个东西的依赖性特别的强，我现在已经离不了了。因为依赖性太强，一旦离开这个东西不再服用，人就会死亡。 现在我就要告诉你们为什么教练要给叶诗文服用这个一氧化二氢，因为：叶诗文渴了。 为什么渴了就要服用一氧化二氢呢？因为一氧化二氢的化学方程式是这样的H2O，一个氧两个氢气，大家知道氧气和氢气都是可燃的，且燃点很低。同时服用在某些情况下可以让人精神焕发的。 但是也不可以过量的服用，副作用也是很强的。 对了这东西还有个俗名，叫做水。 大家不要喷我啊～ 开个玩笑嘛～ 因为今天在微博上看到了有转发教练承认曾给叶诗文服用一氧化二氢的微博，竟然真的有人去喷啊～ 没文化真可怕啊～ 不过，这倒是让我想起来，初中刚学化学那会发懵，讲到氧化硫，那么有没有一氧化二硫，有没有一氧化二氧气，有没有一氧化二氢，老师说，那就是水","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[]},{"title":"7月1日全球增加1秒，出现7:59:60不影响日常生活","slug":"july-1-2012-1-seconds","date":"2012-06-30T08:17:37.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/06/30/july-1-2012-1-seconds/","link":"","permalink":"https://ojdev.github.io/2012/06/30/july-1-2012-1-seconds/","excerpt":"","text":"7月1日将出现7：59：60闰秒调整对市民没影响 据新华社电 （记者帅安宁、周润健）为了让“原子时”与“世界时”协调一致，北京时间7月1日全球将增加一秒，届时，将出现7：59：60的特殊现象。天文专家表示，感兴趣的中国公众可试着在当日7时59分59秒时将自己的电子表或是手机上的时间“拨”慢一秒。 “世界时”“原子时”要协调 我国天文教育专家、天津市天文学会理事赵之珩介绍说，为了确定时间，世界上有两种时间计量系统：基于地球自转得出的“世界时”和基于原子振荡周期确定的“原子时”。由于两种时间尺度对秒的定义不一样，随着时间的推移，这两个时间系统之间就会出现差异，所以有了“协调世界时”的概念。 “协调世界时”以原子时秒长为基础，在时刻上尽量接近于世界时。1972年，国际计量大会决定，当“世界时”与“原子时”之间时刻相差超过0.9秒时，就在协调世界时上加上或减去1秒（正闰秒或负闰秒），以尽量接近世界时，这就是“闰秒”。“闰秒”一般安排在年中或年末的最后时刻，即6月30日或12月31日的最后一分钟。 今年确定在6月30日23：59：59后面增加一秒，记为23：59：60，然后才是第二天的00：00：00。相对于北京时间，也就是7月1日7：59：59后面增加一秒，出现7：59：60的特殊现象，然后才是8：00：00。 2012年“多”出一秒，你会拿这一秒做什么？“我会对我爸妈多说一遍‘我爱你们’”“我将用这一秒来睡觉，因为是周末。”“那天是我生日，比别人多过一秒，好幸福！”“上班可以晚起一秒了。”这是网络上一些网友“晒”出的五花八门的回答。 东亚讯（助理记者 郑玉占） 为了让“原子时”与“世界时”协调一致，北京时间7月1日全球将增加1秒，到时将出现7：59：60的特殊现象。 长春人造卫星观测站天文科普基地负责人李振军介绍，世界上有两种时间计量系统“世界时”和“原子时”。由于两种时间尺度对秒的定义不一样，随着时间的推移，会出现差异，所以有了“协调世界时”的概念。 1972年，国际计量大会决定，当“世界时”与“原子时”之间时刻相差超过0.9秒时，就在“协调世界时”上加上或减去1秒，以尽量接近“世界时”，这就是“闰秒”。 今年确定在6月30日23：59：59后面增加1秒，记为23：59：60，然后才是第二天的00：00：00。而北京时间是在7月1日7：59：59后面增加1秒，出现7：59：60的特殊现象，然后才是8：00：00。 “多出的1秒钟，只对军事、航天等对时间精确到秒的行业有影响。不会对长春市民的日常生活造成任何影响，市民也不会感觉到。”李振军说。 博主说：其实我不担心这一秒，我担心的是，我们做的那些程序会不会因为这1秒出现问题？当年千年虫的影响实在是太大了。今年真是多事的一年，但是是很有意义的一年，看来世界末日的说法是真的，但并不是人们意义上的毁灭的概念，而是告别。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[]},{"title":"梦！","slug":"dream-1","date":"2012-06-22T08:15:27.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/06/22/dream-1/","link":"","permalink":"https://ojdev.github.io/2012/06/22/dream-1/","excerpt":"","text":"夢的日语发音是：有妹。我记得是这样的。在这里写这个日语发音是很喜欢《xxxxHolic》中那个女人慵懒的躺着时候嘴角上扬的说出“夢”的发音。 这阵子身体发虚，虚到不行了，我也知道怎么弄的，可是却不能说出来。 昨晚本打算好好睡一下，可是半夜的时候又被弄起来。 所以上午起的很晚，11点多才起来。上午的时候做了一个梦，梦里面回到了以前梦中出现的一个场景。当时在梦里我是清醒的，但是我却没醒过来。 那个地方冰天雪地的，只有那一个区域，在一个城市中，繁花似锦的，绿意盎然。天空也清澈澄明。本来心情极好的在路边的树下行走，但是却走到了一个小路上，一抬眼，入眼的是一座山，山上竟然有雪。瞬间意识清醒意识到在做梦，但是这个地方梦里出现过两次，第一次是高中的时候，上课睡着的，追着一个女人，要把她拉回来，至于为什么我不知道，就知道要拉她回来，回到哪也不清楚，但是没能做到，然后我独自返回，一瞬间风雪大作，感觉自己要冻僵了，但是我感觉如果不能跨过这座山，那么我就回不去了，可能就醒不过来了，风雪有如刀割一样。不过我还是回来了，走在学校的走廊中，非常的暗，犹如没有光一样的暗，摸索着走回我的班级后，听到老师在讲课，然后醒了过来。 可是这一次，依然是这个地方，但是却没有人，梦里我回头看了一眼，地面是刚下过雨的痕迹，不很泥泞，但是却湿润。 于是我义无反顾的走向满是冰雪的山中，刺骨的感觉立刻袭来，不知道为什么，周围一个人都没有，脚下却没有脚印。一下子意识到，是不是这一次，我就回不去了呢。但是也不想回头，就这么漫无目的的走在雪上，头顶有阳光，却依然冰冷的到了心里。手脚还没有冻僵，虽然清醒，但是却不知道该如何走。最后，就这么向着一片挂满雪的树林走去，但是，一瞬间却感觉到了柳暗花明的感觉，林后我回到了街道，回头看，身后依然是山，有林，却冰雪覆盖。 而前面的街道，也是雨后的痕迹，湿润却不泥泞，踏出一步，发现了自己的脚印。这是陌生的街道，却很熟悉，街道上没有人，抬头看天，却能看清天空，稀疏的云后面就是清澈的蓝天，不知道怎么就想到了以前听到的一句话，只有死人才能看清太阳。我想，我没死，因为我看不到太阳。 可是刚出去不久，有人追我，我跑不过他，于是又开始了熟悉的一幕，我开始使用四肢奔跑，重有跑进了雪地中。回头看有好多的人，我不知道都是做什么的，一个个的黑色影子，看不清楚面容。于是我继续用四肢继续奔跑，不知方向的跑。 醒来后我在想梦到底预示着什么，我不知道，也解释不了，但是重复的场景，重复的动作，到底是怎么了。","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[]},{"title":"没事穷折腾：fastboot刷机","slug":"没事穷折腾：fastboot刷机","date":"2012-05-28T08:04:56.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/05/28/没事穷折腾：fastboot刷机/","link":"","permalink":"https://ojdev.github.io/2012/05/28/%E6%B2%A1%E4%BA%8B%E7%A9%B7%E6%8A%98%E8%85%BE%EF%BC%9Afastboot%E5%88%B7%E6%9C%BA/","excerpt":"","text":"我有个HTC G7，没事我就穷折腾，各种刷机，刷过各种第三方，刷过RUU，刷过自己用厨房定制的各种ROM，现在一直在使用CM9。 所以想用fastboot来刷机，看看怎么刷。首先启动到bootloader界面，然后输入如下命令 123fastboot +w 清除userdata和cachefastboot erase systemfastboot erase boot 然后使用recovery开始刷新的rom吧。当然还有其他的方式，但是我没那么用过。 1234567fastboot flash hboot hboot.img 刷hbootfastboot flash recovery recovery.img 刷recoveryfastboot flash radio radio.img 刷RADIOfastboot flash boot boot.img 刷BOOTfastboot flash system system.img 刷systemfastboot flash userdata userdata.img 刷用户数据fastboot reboot 重启","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[]},{"title":"残篇『十二』","slug":"canpian-12","date":"2012-04-30T08:00:08.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2012/04/30/canpian-12/","link":"","permalink":"https://ojdev.github.io/2012/04/30/canpian-12/","excerpt":"","text":"回想从前 只记得那个柔软的怀抱 只记得芊芊柔荑 只怪自己 没去珍惜 反倒杀了她 她会恨我吧 带着对我的恨 走过忘川奈何 我知道 她不会喝孟婆那碗汤 孟婆也不会给她喝 因为她要回来找我 没办法 不杀了她 她也没法回去 也不会回来杀我 可是 我还是错了 她回去了 却没有回来杀我 任我修行中入了妖道 遭致生灵涂炭 手里的剑是热的 沾染了赤尾的血之后 这把剑再也无法杀人 也无法让我死 今天 我也只能做这样的选择 从这里跳下去 但愿孟婆会舍碗汤给我 ———————————————————– 她跳下去了 我无法杀她 所以只能看她跳下去 我愧对天下 因无法下手杀她 导致生灵涂炭 我的罪孽由我继续来偿 你跳吧 从此以往 你我再无瓜葛 下一世 你将获得重生 而我 将用以后的无限生命 每日诵经","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"C#方法延迟返回结果","slug":"C-方法延迟返回结果","date":"2012-04-13T07:52:12.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2012/04/13/C-方法延迟返回结果/","link":"","permalink":"https://ojdev.github.io/2012/04/13/C-%E6%96%B9%E6%B3%95%E5%BB%B6%E8%BF%9F%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C/","excerpt":"","text":"不知道标题恰不恰当，只不过我的需求是这个样子的： 例如一个方法A，返回值是bool类型的，但是方法执行过程中，需要另一个方法B执行结束，但是还不能直接调用B方法，可是B是等待外部信号才执行。所以需要延迟一下，等B方法执行了才返回结果。 找了些资料，找到了AutoResetEvent，可以达到我的目的，但是否是最适合的，就不知道了，由于我的项目中所谓的B方法是RS232端口读数据的，然后解析出来的返回值。并不是时时的，可能有点时间差，于是我采用了下面的方式。 12345678910111213141516171819202122232425262728293031323334353637/// &lt;summary&gt;/// 标志位，用来等待返回/// &lt;/summary&gt;AutoResetEvent are = new AutoResetEvent(false);/// &lt;summary&gt;/// 返回结果，可以是任意需要的类型/// &lt;/summary&gt;object result;public object A()&#123; /****Begin**/ /* * 数据的拼装 * 数据的发送 **/ Send(&quot;要传输的数据&quot;); /****End****/ //等待信号，-1代表无限等待，可以更改为其他值，单位是毫秒，等待时间过后为超时 are.WaitOne(-1, false); return result;&#125;private void B()&#123; byte[] bytes = Read(); /* * 此处解析bytes中的数据 * 根据解析出来的数据 * 得到想要的结果 * */ //得到需要的结果 result = Encoding.UTF8.GetString(bytes); //给信号 are.Set();&#125;","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://ojdev.github.io/tags/C/"}]},{"title":"毁灭童年！还原童话故事恐怖面目","slug":"毁灭童年！还原童话故事恐怖面目","date":"2012-03-29T07:47:21.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2012/03/29/毁灭童年！还原童话故事恐怖面目/","link":"","permalink":"https://ojdev.github.io/2012/03/29/%E6%AF%81%E7%81%AD%E7%AB%A5%E5%B9%B4%EF%BC%81%E8%BF%98%E5%8E%9F%E7%AB%A5%E8%AF%9D%E6%95%85%E4%BA%8B%E6%81%90%E6%80%96%E9%9D%A2%E7%9B%AE/","excerpt":"","text":"童话从诞生之日起就充满着曲折的情节和阴森的结局。如今，那些带有血腥气息的童话已不适应现代读者的口味，于是，迪斯尼等公司为迎合观众而净化了童话，到处都是大团圆结局。在此，我们对常见的一些快乐结局作出解释，还原它们本来的恐怖面目。 1、魔笛 《魔笛》的故事里，那个村庄鼠患泛滥。一个身穿七彩布衣，手持魔笛的男人前来，提出要帮村庄消除鼠害。村民同意，如果真的实现，则愿付出巨大的代价。那男人实现了。他吹奏起魔笛，驱赶了群鼠。但当他回来索要报偿时，村民反悔。笛手决定驱赶孩童。在后来很多版本中，笛手驱赶孩童进入村外的洞穴，有一位村民最终同意付出报酬，他也归还了孩童。而在阴暗的初衷里，笛手引导孩童入河，除了一个掉队的瘸腿小男孩，其他都淹死了。 2、小红帽 我们熟知的这则故事的结局是一名樵夫杀死了凶恶的大灰狼，救出了小红帽。其实，最初的法语版本里，夏尔·佩罗笔下的结局并不美满。其中，那个富家姑娘询问大灰狼去她外婆家的路，狼给她指了条错误的道路，最后她不幸被吃。故事结束了，没有樵夫，没有外婆，只有大灰狼和小红帽。故事的寓意便是不要和陌生人讲话。 3、海的女儿 迪士尼版本的“海的女儿”是个不折不扣的弥天大谎：爱丽尔人鱼变成了人，和艾利克王子结婚，奇妙的婚礼还在人和鱼族里进行。但是，在安徒生的最初版本里，人鱼目睹王子和公主结合，绝望地离开。魔咒中，只有用剪刀刺死王子，她才能获救。她没有照做，而是跃进大海，变成了泡沫。后来，安徒生对童话稍稍做了温和地修改，新的结尾中，她没有变成泡沫，而是成为了上帝的女儿，在天堂安息。可无论如何，她依然是死去了的。 4、白雪公主 众所周知，在白雪公主的故事中，皇后要求猎人杀害她，并将她的心脏带回作证。而猎人不忍心这么做，于是带回了熊的心脏。此处，迪士尼版本没做多大修改，不过还是遗漏了一段很重要的情节：原始的童话版本中，皇后要求当晚食用白雪公主的肝脏！另外，白雪公主并没有因为一个充满法力的吻醒来，她被带回了城堡。至于白雪公主“尸体”的用途并没有交代，留给人们想象的空间。在格林兄弟的版本中，故事结尾，皇后被迫穿上铁靴，跳舞至死。 5、睡美人 在我们熟知的睡美人故事里，优雅的公主是由于手触纺锤而沉睡，直到百年之后王子前来吻醒她。他们恋爱、结婚，从此幸福地生活在一起，一切都让人很惊奇且欣喜。但是原始的故事并不甜蜜，只有亲身读过才能相信其悲哀：最初，一名年轻女子由于一种预言（非诅咒）而沉睡。一位国王见状，渴望得到她，并遭强制啪啪了她。九个月后，她在沉睡中生下两个孩子。其中一个孩子吮吸她的手指，活跃了她的神经纤维，她苏醒过来，发现了自己已经遭强制啪啪啪还生了孩子。这可比王子的吻恐怖得多。 6、侏儒怪 这则童话和前几则的不同之处在于，修改版本不是处于净化丑恶的初衷，而是将其修改得更加恐怖。在原始故事里，侏儒怪帮助一名面临死亡的女孩，将稻草变成金子供她看病，使她痊愈直至能工作。相应地，他要求女孩交出她生的第一个孩子作为报偿。当这天来临，女孩不愿交出孩子，侏儒怪告诉她，如果能猜出他的名字，也能放了女孩。女孩记起了以前在火堆边无意中听到侏儒怪的呻吟，顺利答出了他的名字。侏儒怪火冒三丈地走掉了。在改编后的版本里，一切更糟糕：侏儒怪肆意践踏和撕扯自己的左右臂膀而死。 7、金凤花和三只熊的故事 在这个温馨的故事里，可爱的女孩金凤花发现了三只熊的屋子，她溜进屋子，偷吃食物，坐在椅子上，最后竟然在小熊的床上睡着了。当小熊们回家时，她醒过来，惊愕地从窗户逃走了。原始的故事（可追溯到1837年）有两个不同之处：一是熊发现了女孩之后，撕碎并吞咽了她。二是女孩企图逃跑时变成了老巫婆的面貌。故事的结尾告诉人们，金凤花要不就是缺胳膊断腿，要不就是由于她的恶行被抓去感化所了，总之不是好事儿。 8、奇幻森林历险记 从奇幻森林历险记的流行版本里，我们知道两个在森林里迷路的孩子最终找到了一间华美的屋子。屋子里居住着一名女巫，她要求他们为他做劳役。在一次准备美餐的过程中，他们结束了奴役生活：他们发现来路，将女巫扔进火炉，逃走了。在更早的法语版本里（名为《迷路的孩子》），没有女巫，而是魔鬼。一开始坏心肠的老魔鬼被孩子愚弄（和后来的故事一样），但是后来他摆脱了孩子，将锯木架整合起来，要把其中一个孩子榨成肉酱。孩子们假装不懂怎么上架，请魔鬼的妻子来做示范。当她躺倒，孩子扼住她的喉咙威胁魔鬼，才逃出了森林。 9、没有手的姑娘 说实话，这个故事的所有版本都很残忍（不管是圣经故事还是原始的故事），尽管情节变化各有不同。最新版本里，魔鬼承诺一个穷人，如果他允许自己拿走任何磨坊后的物什，就让他变富。穷人只知道屋后面有一棵与自己毫不相干的苹果树，就答应了，其实那正是他的爱女。女儿太纯洁了，魔鬼无法带走她，于是魔鬼又要挟女儿，除非女儿允许自己父亲剁碎自己双手，否则将带走父亲。女儿同意了，而他父亲也做了，悲剧就这样酿成了。尽管这不太雅观，但早先的其他一些变体版本更令人发指：女孩剁碎自己的手臂，使自己变得丑陋，以免去强暴之苦。另一种变体是父亲剁碎女儿的双手，因为她拒绝和父亲交媾。 10、灰姑娘 现代的灰姑娘故事里，美丽的灰姑娘与王子结合，后母的两个女儿也嫁给了两名伯爵，从此以后，大家相安无事地生活在一起。这个故事的雏形可以追溯到公元一世纪，是关于斯特拉博（古希腊地理学家）的女人罗德庇斯（并不叫仙度瑞拉）。这两个故事除了水晶鞋和南瓜车，其他都很类似。而格林兄弟将美好的寓言转变成阴森的罪恶：在这个版本里，后母的两个女儿削足适履，以哄骗王子她们才是要所要寻找的。鸽子啄出她们的眼睛来警示王子。后半生中，后母的女儿成为瞎乞丐，而灰姑娘在宫廷里庸碌地消遣着时光。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[]},{"title":"2011年10月14日下午14点哈尔滨地震","slug":"2011年10月14日下午14点哈尔滨地震","date":"2011-10-14T06:14:00.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/10/14/2011年10月14日下午14点哈尔滨地震/","link":"","permalink":"https://ojdev.github.io/2011/10/14/2011%E5%B9%B410%E6%9C%8814%E6%97%A5%E4%B8%8B%E5%8D%8814%E7%82%B9%E5%93%88%E5%B0%94%E6%BB%A8%E5%9C%B0%E9%9C%87/","excerpt":"","text":"就在刚才，不到1个小时，中午吃完饭和同事打了一局Dota，很久没玩了，而且昨晚开始有雾，今天的雾更大，之后我坐着，感觉身体不由自主的左右轻微晃，头稍微有点晕，我以为是昨晚没睡好，想着ProcessMap还没画完呢，打算开小差睡一下，然后同时在群里问 ××× 14:28:08 感觉不感觉 脑袋晕？ × 14:28:23 感觉了 × 14:28:42 刚才我觉得我有点轻微的晃，我以为昨晚没睡好 然后他出来说群里那边有个感觉到地震了，感觉晃，问是不是晕，说不是，是东西晃，有个人从25楼已经跑下去了。 原来是地震了，我还真是平静，我们几个就讨论，原来只有我和我们领导有感觉，剩下那四个人没感觉到。 微博的效应真快，我打开微博就看到有说这个的了，据说是俄罗斯6.6级地震，黑龙江这边几个城市有震感。 ××× 14:42:23 俄罗斯这一带 城镇还挺多呢 ×××× 14:45:11 今天还这是个“好”日子 ××× 14:46:55 我朋友在交银大厦22楼 整栋大楼都疏散了 。。。 说是友谊路那全都是人 &amp;&amp; 14:47:18 ++14:47:34 会展那的高层没事 ××× 14:47:54 有趣 ×××× 14:48:26 没事，算命的说我能活到死 不过，知道地震了，我还是可以很平静，不知道为什么。没有害怕，没有兴奋，我发现，只要是大事，我都可以很平静的接受，可是一件很小的事情，我反倒可以兴奋一下，高兴一下。 该来的总会来，不来的，也等不到，心放宽些，才比较快乐，来了什么，欣然接受就好，也许，前面就是柳暗花明呢。 记于二?一一年十月十四日下午14:14分","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"地震","slug":"地震","permalink":"https://ojdev.github.io/tags/%E5%9C%B0%E9%9C%87/"},{"name":"哈尔滨","slug":"哈尔滨","permalink":"https://ojdev.github.io/tags/%E5%93%88%E5%B0%94%E6%BB%A8/"}]},{"title":"MBTI","slug":"MBTI","date":"2011-08-29T10:18:16.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/08/29/MBTI/","link":"","permalink":"https://ojdev.github.io/2011/08/29/MBTI/","excerpt":"","text":"Psytopic分析：您的性格类型是“ISTP”(内向+实感+思维+知觉) 容忍，有弹性；是冷静的观察者，但当有问题出现，便迅速行动，找出可行的解决方法。能够分析哪些东西可以使事情进行顺利，又能够从大量资料中，找出实际问题的重心。很重视事件的前因后果，能够以理性的原则把事实组织起来，重视效率。 ISTP型的人坦率、诚实、讲求实效，他们喜欢行动而非漫谈。他们很谦逊，对于完成工作的方法有很好的理解力。 ISTP型的人擅长分析，所以他们对客观含蓄的原则很有兴趣。他们对于技巧性的事物有天生的理解力，通常精于使用工具和进行手工劳动。他们往往做出有条理而保密的决定。他们仅仅是按照自己所看到的、有条理而直接地陈述事实。 ISTP型的人好奇心强，而且善于观察，只有理性、可靠的事实才能使他们信服。他们重视事实，简直就是有关他们知之甚深的知识的宝库。他们是现实主义者，所以能够很好地利用可获得的资源，同时他们擅于把握时机，这使他们变得很讲求实效。ISTP型的人平和而寡言，往往显得冷酷而清高，而且容易害羞，除了是与好朋友在一起时。他们平等、公正。他们往往受冲动的驱使，对于即刻的挑战和问题具有相当的适应性和反应能力。因为他们喜欢行动和兴奋的事情，所以他们乐于户外活动和运动。 您适合的领域有：技术领域 证券、金融业、贸易、商业领域 户外、运动、艺术等 您适合的职业有： ? 信息服务业经理 ? 计算机程序员 ? 警官 ? 软件开发员 ? 律师助理 ? 消防员 ? 私人侦探 ? 药剂师 ? 证券分析员 ? 银行职员 ? 管理顾问 ? 财务顾问 ? 电子专业人士 ? 技术培训人员 ? 信息服务开发人员 ? 软件开发商 ? 海洋生物学者 ? 后勤与供应经理 ? 经济学者 ? 贸易商 ? 商品经销商 ? 产品代理商（有形产品） ? 警察 ? 侦探 ? 体育工作者 ? 赛车手 ? 飞行员 ? 雕塑家 ? 手工制作 ? 画家","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[]},{"title":"C#字符串算式直接运算结果","slug":"C-字符串算式直接运算结果","date":"2011-08-19T10:24:49.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/08/19/C-字符串算式直接运算结果/","link":"","permalink":"https://ojdev.github.io/2011/08/19/C-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%AE%97%E5%BC%8F%E7%9B%B4%E6%8E%A5%E8%BF%90%E7%AE%97%E7%BB%93%E6%9E%9C/","excerpt":"","text":"有些似乎后会遇到一种情况，就是要求，一个字符串形式的四则运算，直接求出结果，以前在C#中使用js反射实现，现在发现了一种新的方法，更方便： 界面上的元素 123Label :name=result;//显示表达式结果TextBox :name=expressiontext;//表达式 代码只有一句： 1result.Text = new DataTable().Compute(expressiontext.Text, string.Empty).ToString(); 测试了一下，正常的+-/*都可以的，支持带括号运算方式，不支持%运算，其他未测试。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://ojdev.github.io/tags/C/"}]},{"title":"程序员的午夜一秒谜案：1927年12月31日","slug":"19271231","date":"2011-08-12T10:10:14.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/08/12/19271231/","link":"","permalink":"https://ojdev.github.io/2011/08/12/19271231/","excerpt":"","text":"这真是一个特殊的日子啊。 1927年12月31日。 StackOverflow是一个程序员向的问答网站，广大程序员们在上面交流经验、提问答疑，三天前，一位名叫Freewind的用户发布了一个问题1927年12月31日，一秒谜案 我在用Java编写一段比较两个字符串时间间隔的程序，然而当我比较“1927-12-31 23:54:07”和“1927-12-31 23:54:08”这两个时间时，输出结果却不是1……而是353。 当我把两个时间分别往后调整1秒，变成“1927-12-31 23:54:08”和“1927-12-31 23:54:09”，结果就又是1了！—-可为什么那两个时间的结果，却是353呢？ 面对这一诡异的问题，网友们很快追问，“你的区域（Locale）设置是什么？这可能是个区域问题/和当地夏令时之类的东西有关。” 楼主很快附上了Java版本号和区域设置： sun.util.calendar.ZoneInfo[id=”Asia/Shanghai”, offset=28800000,dstSavings=0, useDaylight=false, transitions=19, lastRule=null] （……没错，Freewind君，似乎是一位魔都死程。不知道这里有没有人认识这位老兄？） 在这份追加信息出现仅仅两分钟之后，StackOverflow站上的问答狂人Jon Skeet给出了如下答复 这是因为上海的时区在12月31日发生了变化。 请看这里 为什么时间往回拨了5分52秒？ （1928年1月1日0点0分，当地时间由地方平时（Local Mean Time） 改为北京时间/中国标准时间） 简单地说，在1927年末的最后那一个午夜，时钟被往回拨了5分52秒。所以“1927-12-31 23:54:08”这一秒，事实上，发生了两次，而看起来在计算当地时间时，Java将其视为了后面那一个时间点，于是就产生了这一差别。 这正是时区世界的奇妙与不可思议啊。 在StackFlow网民们纷纷膜拜Jon Skeet的神速之时，其他程序员也以测试的方式验证了这一结果的正确—-美国时间木有这个问题。看来，当一枚程序员，有时真的需要上通天文、下知地理啊…… ps：我刚刚用C#做了一下，一下是我的测试代码： 123double t1 = (DateTime.Parse(&quot;1927/12/31 23:54:07&quot;) - Convert.ToDateTime(&quot;1970/01/01 00:00:00&quot;)).TotalMilliseconds / 1000;// -8 * 3600;double t2 = (DateTime.Parse(&quot;1927/12/31 23:54:08&quot;) - Convert.ToDateTime(&quot;1970/01/01 00:00:00&quot;)).TotalMilliseconds / 1000;// -8 * 3600;MessageBox.Show(string.Format(&quot;[&#123;0&#125;] [&#123;1&#125;] : &#123;2&#125;&quot;, t1, t2, t2 - t1)); 我并没有遇到上面的问题，无论是235408-235407或者235409-235408，我的结果都是1。因为C#没有从1970年1月1日开始获取时间的方法。 所以我换了js，如下代码： 12345678910111213141516var d = new Date();d.setFullYear(1927,12,31);d.setHours(23);d.setMinutes(54);d.setSeconds(7);var a = new Date();a.setFullYear(1927,12,31);a.setHours(23);a.setMinutes(54);a.setSeconds(8);var t1=d.getTime()/1000;var t2=a.getTime()/1000;alert(t1);alert(t2);alert(t2-t1); 答案依旧，都是1的结果，那么，是不是我的测试代码不正确呢？还是这个问题已经解决了？活着。。是不是只有java有这样的问题？ 我依然没有得到答案。 201108130035:上面提到一个东西，叫做地方平时，我在网上搜到一个对地方平时的解释： local mean time 地方时的一种，地方平太阳时的简称。 体现平太阳的周日视运动。它没有季节性的快慢变化，因而不同于地方视时。 由于地区间的联系日益频繁，它在实用上已被标准时(区时或法定时)所代替。 通常根据标准时和地方经度进行推算，也可根据太阳的地方时角和时差进行推算。 地方平太阳时：http://baike.baidu.com/view/37435.htm 上面这个是百度百科对地方平太阳时的解释。 大家都知道，在java中gettime方法获取的时间是自1970年1月1日开始至此地毫秒数。而上面用的时间是1927年12月31日。早于1970年，所以，流传着一种说法，就是1928年的1月1日开始，当地的时间计时更改为格林威治标准时间，而格林威治标准时间与当地的地方平时正好相差了5分52秒。至于我用C#没有得出353或许是因为C#中获取的时间戳是从0001年1月1日开始的。 也许是jdk的关系造成这样的结果吧。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"谜案","slug":"谜案","permalink":"https://ojdev.github.io/tags/%E8%B0%9C%E6%A1%88/"}]},{"title":"C#与盗梦空间-我们要进入下一层梦境","slug":"C-与盗梦空间-我们要进入下一层梦境","date":"2011-07-10T09:56:55.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/07/10/C-与盗梦空间-我们要进入下一层梦境/","link":"","permalink":"https://ojdev.github.io/2011/07/10/C-%E4%B8%8E%E7%9B%97%E6%A2%A6%E7%A9%BA%E9%97%B4-%E6%88%91%E4%BB%AC%E8%A6%81%E8%BF%9B%E5%85%A5%E4%B8%8B%E4%B8%80%E5%B1%82%E6%A2%A6%E5%A2%83/","excerpt":"","text":"刚才突然想起去年10月份在CSDN上看到的一个帖子。 题目是：完成如下代码，使其输出“Hello World!” 12if(补全这里) printf(&quot;Hello&quot;);else printf(&quot; World!&quot;); 不过是C++的。 问到是用C#如何实现： 123456789101112131415161718using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace HelloWorld&#123; class Program &#123; static void Main(string[] args) &#123; if (/* 补充这里 */) Console.Write(&quot;Hello&quot;); else Console.Write(&quot; World!&quot;); &#125; &#125;&#125; 下面的回答千奇百怪。 确实C++我已经六七年没动过了，所以都没概念了。不过一直做C#的开发，确实可以用很多种方法。 但是！下面的回帖中出现了两个让我眼前一亮的内容，一个是27楼的： 123456789101112131415161718using System;using System.Collections.Generic;using System.Linq;using System.Text;namespace HelloWorld&#123; class Program &#123; static void Main(string[] args) &#123; if (true)Console.Write(&quot;Hello World!&quot;);else if (false) Console.Write(&quot;Hello&quot;); else Console.Write(&quot; World!&quot;); &#125; &#125;&#125; 另一个就是42楼的： 1234567static void Main(string[] args)&#123; if ((args == null||Main(null) is object)) Console.Write(&quot;Hello&quot;); else Console.Write(&quot; World!&quot;);&#125; 27楼的就是代码注入，42楼的很有意思。 遂记录一下，有时候开发的过程总换个思路，就有不同的天空啊。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"C#","slug":"C","permalink":"https://ojdev.github.io/tags/C/"},{"name":"盗梦","slug":"盗梦","permalink":"https://ojdev.github.io/tags/%E7%9B%97%E6%A2%A6/"}]},{"title":"LINQ优化：将GroupBy换做Distinct","slug":"LINQ优化：将GroupBy换做Distinct","date":"2011-05-06T10:23:18.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/05/06/LINQ优化：将GroupBy换做Distinct/","link":"","permalink":"https://ojdev.github.io/2011/05/06/LINQ%E4%BC%98%E5%8C%96%EF%BC%9A%E5%B0%86GroupBy%E6%8D%A2%E5%81%9ADistinct/","excerpt":"","text":"这样做也是没有办法的，我之前项目中，查询中这样写的分组 123456789101112form t in db.Tablewhere t.state==truegroup t by new&#123; t.A, t.B, t.C&#125;into pselect new&#123; ...&#125; 导致的就是，数据表中不到1W行数据，经过分组后是752行，但是第一次查询要将近10秒。 这太不能容忍了，所以思来想去，只有更换为Distinct来解决。 12345(form t in db.Tablewhere t.state==trueselect new&#123; ...&#125;).Distinct(); 感觉很好，不到1秒，只是微软对Distinct的支持不是很好，因为这个去重靠的是每个对象的比对，对象相同则去重，而无法对某一个字段去重，很遗憾。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[{"name":"LINQ","slug":"LINQ","permalink":"https://ojdev.github.io/tags/LINQ/"}]},{"title":"关于数据容量","slug":"关于数据容量","date":"2011-04-06T09:50:59.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2011/04/06/关于数据容量/","link":"","permalink":"https://ojdev.github.io/2011/04/06/%E5%85%B3%E4%BA%8E%E6%95%B0%E6%8D%AE%E5%AE%B9%E9%87%8F/","excerpt":"","text":"bit(比特)是binary digit的英文缩写，量度信息的单位，也是表示信息量的最小单位，只有0、1两种二进制状态。8个bit组成一个Byte(字节)，能够容纳一个英文字符，而一个汉字需要两个字节的存储空间，普通英文单词则需要十个左右的字节。 从字节开始往上按照千分位递进，分别就是KiloByte(KB)、MegaByte(MB)、GigaByte(GB)、 TeraByte(TB)、PetaByte(PB)、ExaByte(EB)、ZettaByte(ZB)、YottaByte(YB)。1KB就是 1024个字节，或者说2的10次方、大约10的3次方；1YB已经是2的80次方、大约10的24次方个字节，完整地写下来就是 1208925819614629174706176。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[]},{"title":"asp.net后台执行js造成样式失效","slug":"asp-net后台执行js造成样式失效","date":"2011-01-12T09:49:00.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2011/01/12/asp-net后台执行js造成样式失效/","link":"","permalink":"https://ojdev.github.io/2011/01/12/asp-net%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8Cjs%E9%80%A0%E6%88%90%E6%A0%B7%E5%BC%8F%E5%A4%B1%E6%95%88/","excerpt":"","text":"在asp.net中后台执行js时，比如使用Response.Write弹出一个alert 1Response.Write(&quot;&lt;script&gt;alert(&#x27;确定。&#x27;)&lt;/script&gt;&quot;); 这样做有时候会造成页面的css样式表错位或者失效 为了避免这样的情况，使用下面的方法 1this.ClientScript.RegisterStartupScript(this.GetType(), &quot;alter&quot;, &quot;alert(&#x27;确定。&#x27;);&quot;, true);","categories":[],"tags":[{"name":"asp.net","slug":"asp-net","permalink":"https://ojdev.github.io/tags/asp-net/"}]},{"title":"【花语】-菖蒲","slug":"cloves-changpu","date":"2010-11-13T09:46:41.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/11/13/cloves-changpu/","link":"","permalink":"https://ojdev.github.io/2010/11/13/cloves-changpu/","excerpt":"","text":"妖菖蒲，相信者的幸福。 一丛丛的狗尾草无限的延伸。我也不知疲倦的一直走，连疲累的感觉都没有。 忘记了时间，忘记了回忆。 就这样。直到我走进了一片蓝紫色的花海。 又是无边无际的地方，很远的地方，有一个模糊的人影。不知方向的我，便朝向那个模糊的人影走去。 近了，是一个短发的女孩。耳朵上插着一朵精致的蓝紫色小花，与这片花海相互呼应。 女子轻轻偏转精致的面孔看向我，嘴角轻浅的笑，只是看着我，却不说话。 于是我问：我该如何走？ 大人到此不需要歇息一下吗？ 我在世间行走，依然习惯。 大人，可知菖蒲花语，相信者的幸福？ 嗯，知道，相信着，就会幸福。若去怀疑，那么，徒增痛苦。 可是大人，如今还相信什么？ 不知道，如今无所谓相信，而是要知道一切。 大人，下雪了。 我抬头，确实下雪了，这雪下的突然。 为何会下雪？我问道。 那花妖便告诉我，天地间有异动，有不合常理之事发生，五行错乱，才生了这异象。 我不解的看看她。何为异象? 大人你可能不记得，大人世间行走已经几千年，那之前因为异象频生，导致整个人间都乱了。 因为我？ 确是与大人有原因，但也是大人结束了动荡，还了人间一个平静。 我摇摇头，表示没有任何印象。 大人，天生异象，妖星当道，大人，您，也应该回复真身了。 我的真身？ 这不也正是大人一直追寻要知道的吗？ 我点点头。 大人，相信着，便是幸福的，大人，菖蒲渡您一途。 只见那女子双手扬起，周围细碎的紫色花瓣聚拢在我身下，御风而起，而我，也跟着塌风而走。 之后，再没听到那女子说话。 下一处，我将到什么地方？ 花我是修行七百年的花妖，说是修行，确是拜一妖所赐，乌鸦，传说她是三足乌的本相，数千年前为了一个人，留在人间。 她助我，确也是为了一个人。 天空中黑羽降下。 她来了。 身后传来细碎的声响，想必是翅膀收拢的声音。 而她却低头不语。 我继续坐在地上，摘面前的紫色小花在手里编织。 展翅的声音，翅膀挥动的声音，她走了。 我抬头，看到天空中，宽大的黑色翅膀，随风而动的长发，原本长及脚踝的黑色长发，不知为何，有白色掺杂其中。 世间，大乱降至！","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"花语","slug":"花语","permalink":"https://ojdev.github.io/tags/%E8%8A%B1%E8%AF%AD/"}]},{"title":"被遗忘的运算符(??)","slug":"被遗忘的运算符","date":"2010-07-20T09:41:34.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/07/20/被遗忘的运算符/","link":"","permalink":"https://ojdev.github.io/2010/07/20/%E8%A2%AB%E9%81%97%E5%BF%98%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"","text":"今天发看到一个条件判断 12if( value = ( config ?? &quot;&quot; ) ) config ?? &quot;&quot; 等同于 1config=null?&quot;&quot;:config; 意思是如果config为null那么就赋值””否则保持原值不变 举个例子： 12int? i;int x=i??5;// 如果i值为null那么给x赋值5，否则x值等于i的值 这个运算符只支持引用类型和Nullable类型。","categories":[{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"}],"tags":[]},{"title":"【花语】-狗尾巴草","slug":"cloves-gouweiba","date":"2010-04-26T09:40:26.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/04/26/cloves-gouweiba/","link":"","permalink":"https://ojdev.github.io/2010/04/26/cloves-gouweiba/","excerpt":"","text":"狗尾巴草，暗恋。 我不知道忘川的路。太久了，已经忘记了。所以，我只能一如从前，朝向一个方向，不停的走，不知道要去的地方，也没有停下的理由。 于是，我走到了这个地方，到处都是齐膝的狗尾草，我察觉了什么。 是的，每当一个地方只生长一种植物的时候，我就会遇到花妖。 那么这次，是狗尾花妖？感觉这么叫，嗯，失了文雅呢。可是，什么才是文雅呢。 我躺下来，看着天空，然后在记忆中摸索，却什么都是模糊的。索性，闭上眼，睡一觉吧。 梦中依然是残破不堪的片段，无法衔接的记忆，无法衔接到一起的梦。以至于我醒来后几乎不记得梦里的内容。 我依然在草原中，不同的是，我的身边坐着的人，多了一个人，眼角带媚，却睿智的深邃；唇角微笑，却看得出并不是刻意的笑。眉如柳叶，指如春葱，乌黑的长发散落在周围。 狐妖！ “大人睡的可好。”那女子先开了口。我却不知如何回答。狐妖，有正有邪。狐妖，是万妖之中最无法分辨善恶的。 “大人怕我？”那女子嘻嘻的笑，然后站了起来，我看到她的手环和脚环，碰在一起叮当作响，那声音，不是魅惑的邪音，而是破除魔障的净化之声，这声音，来自仙界。 于是我问道：“你师傅。。。” “六千年前了吧。大人您曾经也认得的。” “可我现在什么都不记得了。” “师傅明了，所以让我来找您，师傅说您无法找到去忘川的路。” “是的，我不知道。”我想，也许是我故意忘了吧。 “大人可知这附近的花妖。” “以往遇到这样的情形，都会遇到花妖，丁香，红豆，而此地，该是狗尾花。” “此地却有一花妖，修三百有七十年。” “那为何不见我？” “大人习惯了与花妖相见？” “相见的话，或许可以给我解脱。” “大人所指的解脱是？” “让我想起我应该去做什么，或者，让我去轮回。” 这时，四周响起清脆的声音：“大人，小妖名为梦鸢。” “梦鸢？” “正是，小妖正是狗尾花苦修三百有七十年。小妖法力低微，尚未凝成人形，所以恐无法帮助大人，不过，狐仙姐姐在这里，尚可为大人指出忘川的路。” 我看着那狐妖“你可以？” “尚需梦鸢相助。” “梦鸢愿助两位大人一臂之力。” 那狐妖继续说道：“这梦鸢为狗尾花妖，寓意暗恋，大人忘了曾经的事情，可是大人的事却有些流传了下来。大人来到这里也绝非偶然，冥冥之中自有定数，大人当年获得长生，却也是为了心中的女子，而大人的长生则是灵魂的长生，而非肉身，所以大人如今肉身早在千年前已化为尘，以致灵魂出离，无****回，所以大人忘了所有，只剩下这灵魂对千年前的执念，记忆，便是星星点点。” “我都忘记了，我只是一丝游魂。” “狗尾草可以带你去下一处花妖修炼的地方，希望，她可以助你。” “你们为何不直接带我去忘川？” “其实，忘川虽然只有一个，但是每个人的去忘川的路是不一样的，一如人的一生，无有相同。” “梦鸢。” “是大人，大人您顺着狗尾草的方向一直走，就到了下一处花妖所在，那位姐姐会继续助您。” 言毕，我周围的狗尾草瞬间朝着一个方向移去，逐渐铺成了一条路，不知道终点。 那狐妖看路已铺完，便说：“大人，可以上路了。” “告辞。”于是，我朝?狗尾草铺成的方向，继续前行。 狗尾巴草，暗恋。 暗恋，那个女子。 花。 我是拥有六千年修行的狐妖，也行了六千年的善，但却未入仙籍。是仙是妖，又如何呢。远处传来挥翅的声音，大人路过的地方，身后一定跟着乌鸦。 “小狐，它能否找到忘川。” “不知道呢，据传说，它尚有一魄封在忘川河畔。” “是的，那一魄中，恰好封着它所有的记忆，当年，它已料到回来的事。那是唯一的方法。” “忘川畔，彼岸双生。” “大人，您还是去寻它吧，毕竟只有一魂，免得被吞噬。” “告辞。”","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"花语","slug":"花语","permalink":"https://ojdev.github.io/tags/%E8%8A%B1%E8%AF%AD/"}]},{"title":"残篇『十』","slug":"canpian-10","date":"2010-04-16T09:37:53.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2010/04/16/canpian-10/","link":"","permalink":"https://ojdev.github.io/2010/04/16/canpian-10/","excerpt":"","text":"记忆中只有一条河 左岸的花洁白胜雪 风吹过 花瓣似羽纷纷扬起 无暇的美 而右岸 遍地火红 无边无际 映的天也成了绯色的红 右岸 无风 风吹告诉我 她说记忆中的景色或许就是三途川 彼岸的红 应该就是蔓珠沙华 是通往地狱的死亡之花 可左岸 我当年走过三途川时 那边我什么也看不到 只是有微弱的洞箫声断断续续 辞了风吹 我决定重回三途去看一看 记忆中的场景是不是三途川 轮回道的景色似曾相识 越向深处越清晰 往事一幕幕回来 一千五百年前我助周寻人 后来为了阻止乌鸦成魔所以让她吃了我的身体 回归三足乌本相 而我 用残余在三途川左岸的一魂与右岸的一魄 又修了一千三百年 才重修回肉身 却没了一身灵力 也忘了前尘 所以我会知道三途川两岸的景色 三途川上依然停着渡人的那叶无底小舟 三途河里也不再有无法轮回的水鬼 而都化做两岸的彼岸花 我想 我终于知道我的真身是谁了 只有这样才能解释我身后毛茸茸的尾巴和头上的耳朵 可我是 妲姬? 还是 与祝融相斗的 上古赤尾?","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『九』","slug":"canpian-9","date":"2010-04-08T09:36:19.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/04/08/canpian-9/","link":"","permalink":"https://ojdev.github.io/2010/04/08/canpian-9/","excerpt":"","text":"三途河岸- 血黄色的河水 看不出流动 却是汹涌的 因为那里尽是不得投胎的孤魂野鬼 我 是否也要下去呢 河岸两边 彼岸花开成两种颜色 血色的 白色的 不知道别人眼里是什么颜色呢 那个人说 红色的 是魂魄 白色的 是回忆 走不过三途的人 只有两个选择 成为河里不得投胎的鬼魂 或者 剥离回忆与魂魄 成为分别开在两岸的曼珠沙华 看来 要渡过忘川河 很难呢 无边无际的 听说过这河 是要付船费的 可我什么都没有呢 也许 要在这河里做个鬼魂 或者 做那花叶不同株的曼珠沙华吧 ———————————————————— 把手给我 你 可以渡我过河 沉默 为何不回答 还是沉默 那么 至少告诉我 为何是你来摆渡 明明 死在你的手里 当时的你 已入魔 我不得不 那当初为何让我吃掉你的身体得到你的灵力 不愿看你继续痛苦 成 我将成佛 而你 亦可回复人身 败 我将永守三途 渡这过往孤魂 ——————————————————– 将我的魂魄与回忆剥离开吧 我 将留在忘川彼岸 做花叶不同株的 曼珠沙华 开一千年 落一千年 花叶永不相见 情不为因果 缘注定生死 ——————————————————— 佛曰 梵语波罗蜜 此云到彼岸 解义离生灭 著境生灭起 如水有波浪 即名为此岸 离境无生灭 如水常流通 即名为彼岸 有生有死的境界 谓之此岸 超脱生死的境界 谓之彼岸 是涅盘的彼岸 佛说彼岸 无生无死 无若无悲 无欲无求 是个忘记一切悲苦的及乐世界 而有种花 超出三界之外 不在五行之中 生于弱水彼岸 无茎无叶 绚灿绯红 佛说那是彼岸花","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『八』","slug":"canpian-8","date":"2010-04-02T09:35:33.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/04/02/canpian-8/","link":"","permalink":"https://ojdev.github.io/2010/04/02/canpian-8/","excerpt":"","text":"此生，宁负天下不负卿！ ———————— 我，走了。 去那？ 去该去的地方。 那里是该去的地方？这里不好么？为什么不留下来？ 呵呵，我有我该做的事的。我，会回来的。 真的不可以留下来么？ 不，留下来也总是要离开的。我走了。 —————– 前面就是三涂了吧。 我，还是回到这里了。 —————– 我找了你这么多年，还是找不到你。 直到现在，我也上油尽灯枯，在也没有力气找你了。 以致于，当我回头的时候，都可以看到我自己，躺在那菩提老树之下，与苦涩的嘴角。 我想，我该去三途了，那里，或许有你的影子。 —————— 忘川河畔 奈何桥头 三生石边 孟婆站在那里，看着你，说了句 你终于来了 上仙知道她在那里是么 是的，她，已经走过了奈何 是么 这一路上，你都见到了什么呢 生离，死别，无缘，无份，还有那彼岸之花，与，那个在三涂河上渡我的人 何苦呢，喝了汤就过桥吧 上仙，容我看下前世吧 你自便，但是，不喝忘川水煮，你是走不上奈何桥的 我知道 还有，那边的望乡台，不在看一眼了么 谢上仙，不看了，徒增伤心 ——————— 我看到了三生石上我的前世 原来如此 我笑了笑，拿起石桌上的忘川水，一饮而尽 希望，下一世，还是你渡我 放下石碗，向孟婆见礼，然后走上奈何桥 记得，下一世，你还要渡我","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『七』","slug":"canpian-7","date":"2010-04-02T09:33:44.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/04/02/canpian-7/","link":"","permalink":"https://ojdev.github.io/2010/04/02/canpian-7/","excerpt":"","text":"呵呵，我要出嫁了哦。 ………… 看你那么高兴，我也替你高兴，可是为什么心里却在痛着？我，要走了。 在你身边这么多年，爱慕你却不敢告诉你，只能这样默默的陪着你。看着你哭就陪你哭，看着你笑就陪你笑。我从来不安慰你，因为我知道，只有自己心里真正释怀才可以不留下伤害。 那么，我该如何释怀呢？ 你要出嫁了，我就必须离开。喜堂我就不去了，因为我要离开。 爱上你，不是我的错，可是我要承担这后果，这不能相守的痛，希望下一世，我可以不再需要承受这样的煎熬。明天起，你享受今生的爱吧，我要开始为下一世祈祷了，祈祷下辈子，可以和你真正的厮守，不用在乎世俗，不用在乎其他人。 ………… 那一抹红艳如此美丽，我却只能在这远远看着。 一拜天地 二拜高堂 夫妻交拜 …… 刺痛了我的眼，也刺痛了我的心，可我没有恨，有的是在被刺痛了的心里面最忠诚的祝福…… 转身，微笑着离开，不再回头…… ………… 相公，我好久没看到她了。连我出嫁那天所有人都说在也没见过她。 娘子，她到底什么样子啊？ 哦，相公，我那有她一张画像。她很漂亮。 哦？带相公我一看。 ………… 展开那画卷，如此美丽惊艳…… ………… 娘子，此人真的如此惊艳！ 是啊，相公，可是她突然就消失了呢。 娘子，这人，我见过。 在哪？ 迎你进门那天，门外树下有一惊艳女子，一袭白衣。犹如天仙，在交拜后，她就离开了。 ………… 走了么。 是啊。 我伤了你，我知道你对我的感情。 只是，我没有勇气啊！没有勇气面对。 ………… 一失足成千古恨 再回首已是百年身 ………… 深山中 一处入世外桃源般的依山傍水而建的阁楼 楼前一棵不知几百年的菩提老树 树下 盘膝而坐一个如仙般清雅却又惊艳的女子 双目清晰无一丝尘世的杂陈 却在颂着： 观自在菩萨。行深般若波罗密多时。 照见五蕴皆空。度一切苦厄。舍利子。 色不异空。空不异色。色即是空。 空即是色。受想行识。亦复如是。 舍利子。是诸法空相。 不生不灭。不垢不净。不增不减。 是故空中无色。 无受想行识。 无眼耳鼻舌身意。 无色声香味触法。 无眼界乃至无意识界。 无无明。亦无无明尽。 乃至无老死。亦无老死尽。 无苦集灭道。 无智亦无得。以无所得故。 菩提萨?。依般若波罗密多故。 心无挂碍。无挂碍故。 无有恐怖。远离颠倒梦想。 究竟涅?。三世诸佛。 依般若波罗密多故。 ……","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『六』","slug":"canpian-6","date":"2010-03-31T09:32:40.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/03/31/canpian-6/","link":"","permalink":"https://ojdev.github.io/2010/03/31/canpian-6/","excerpt":"","text":"我问你可不可以不要走了，我知道我错了，我不敢面对，现在，我有那个勇气了，我可以面对了，而且我等了你这么多年了，看在等待的份上，原谅我好么？不要在离开了好么？算我求你好么？ 可是，为什么你说放手好么？放手，让我走，其实我只是回来看看，既然一切安好我也要走了，放手吧。 我抱着你不放手，不断重复着不要走不要走！ 你说你放手让我走，你这个样子我走的很辛苦！ 为什么？ 为什么？ 我等了这么多年，终于等到你回来，为什么你的表情好象在承受极大的痛苦？ 猛然间惊醒，发现是在沉睡的梦中。 也发现，你已经离开好多年。 也发现，你已经死了好多年。 那么高的山崖，怎么可能还能生还？ 下面是滔滔江水，为什么你要落个尸骨无存的下场？为了我，值么？那个时候我那样对你，值么？ ………………………… 她一切都好么？ 回大人，一切安好，就是想你想的很憔悴，她…… 好了，只要一切安好就好，我这副身体，已经无法在给她什么了。 大人，其实，只要你陪在她身边就好。 是么？可是她要的很多，我无法给了，而且看到我这个样子，她也许会内疚，也许。但是我不要她不快乐。还是让她以为我已经死了吧，时间久了，总会忘掉我的。 大人，这样，真的好么？对你来说真的好么？对她，也，真的好么。 我累了，今天的阳光真好，送我走吧。 大人，你真的决定了么？ 决定？这是一定的，这样可以减轻我们的罪。 大人，以后都不见了么？ 不见了，只要这玉陪在我身边就好了。我就记得她了，就永远不会忘了她。这玉，有我们的一切。 大人，遵命。 ………………………… 施主，你真的要在此落发？ 大师成全。 可是，施主的尘缘…… 大师，缘起缘散，都不重要了，尘世中谁又能脱离这缘呢？萍水相逢是缘，朝夕相伴是缘，我与大师亦是缘，皈依，是我与佛的缘。 罢了。从今日起，你就在我这庙里和我吃斋念佛吧。尘缘，断了又如何，不断有如何呢。 谢师傅。 不过，你这身体，还是要留个人照顾你的。 大师，随我来的人，自然可以照顾我，从此，她亦随我一切，在此出家。 大人，这玉？ …………………………","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『五』","slug":"canpian-5","date":"2010-03-31T09:31:53.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/03/31/canpian-5/","link":"","permalink":"https://ojdev.github.io/2010/03/31/canpian-5/","excerpt":"","text":"你不挽留我了 那好吧 我走了 ………… 真的好么，曾经那么相依相偎的在一起，我真的让她走了，连一句挽留都吝啬，真的是我想要的么，真的不爱了么？我不知道，头好痛，可是这都是别人说的，我什么都不记得了啊，曾经的一点一滴，我都不记得了，说有人都说我失忆了，但很奇怪的独独忘了她，怎么会有这样的失忆？一定是开玩笑的，况且，我对她一点感觉都没有啊，真的爱？我怀疑。可是为什么她的走，还上让我感觉有什么不对的地方，心里开始空落落的，遗失了什么呢？ ………… 半年了 我还是什么都想不起来啊。 ………… 除夕，团圆，为什么你们都不理我？ 我是真的没有想起来啊。 既然你们都不理我，那好，我不要你们了，我走了。 然后我真的一个人走了，我也不知道要去那，反正我的心很痛就是了，你们都不理我，为了那个人都不理我了。 走着走着感觉好累，才想起，一年下来，几乎天天没断过药，那次受伤留下了后遗症啊，今天光生气了，忘记了药。 好累好累，好想睡，在我倒下去之前我看到了一张脸，一张美伦美奂的脸，那么美。 然后我睡了，无法在清醒了吧。 ………… 这是个冗长的梦，梦中我梦见我被人追，好多人好多人，我筋疲力尽的终于倒下，可我看到了一个人，她有着一张美伦美奂的脸，犹如天神的站在我面前，我一下就安心了，有一种感觉，即使就这样和她死在这里也没有关系了。 最后她受伤了，伤的很重，脸上身上全是血…… ………… 我记起来了，是她，她为了救我受了伤，伤口中毒了，然后她的脸，她的脸毁了，然后我失忆了，然后我残忍的把她赶走了，她什么也没说，什么也没解释。 我要找到她，我要找她回来，留在我身边，从前都是她保护我，从现在起，让我来保护她吧。 可是茫茫人海我要去那里找她，为其他人，他们只说她把我送回来后就消失了，我问他们她为什么回来，他们告诉我，你忘了，是为了给你送东西，今年是最后一年了，却发现你昏倒在路边，就把你送回来了，留下东西就消失了。消失，你说消失而不是走了？是啊，谁也没看到她是怎么走的，只是在我们回头看你的刹那就不见了。之后在也没与人见过她。那她的脸，带着面具。那她……别问了，她已经不是从前的她了，在也看不到她的笑，在也看不到她的一切，面具黑披风。她留下一件给你的东西。 找到那个盒子，打开，我的泪止不住，你真的离我而去了。 那盒子里是我给她的信物，信物在人在，信物不在了，人也在也找不到了。 ………… 我找寻了多少年了，韶光易老，可是你在那里，我怕是在也坚持不到找到你了，见我一面不好么？你恨我了么？ 我大限将至，我将带着这份遗憾走了。见我一面好么？","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『四』","slug":"canpian-4","date":"2010-03-30T09:31:16.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/03/30/canpian-4/","link":"","permalink":"https://ojdev.github.io/2010/03/30/canpian-4/","excerpt":"","text":"不要拒绝我 让我抱一下 一下就好 然后我就可以走了 不会在见你了 所以请不要拒绝 算是我最后的一点小小的要求好吗 ………………………………………… 真的走了 那么决绝的走了 似乎没有一点留恋似的 真的就这么走了 即使回头看我一眼也好 其实我心里还是不希望你走了 我只是想让你哄哄我 只是想让你更宠我 可你真的走了 你走了 在不会有人在我伤心的时候做好吃的东西哄我了 在不会有人在我生气的时候任我打骂之后还将我抱在怀中让我感受温暖了 在不会有人在我睡不着的时候给我唱歌哄我入睡了 在不会有人在我梦中惊醒后揽我入怀轻声细语的说不要怕有我在我会一直保护你的 你骗我 你走了 这些你都做不到了 我其实并不想说“我们缘分尽了，你走吧，履行你当初的诺言去吧” 我后悔了 …………………………………………………………………… 你知道我多想回头看你一眼 可是我不敢 我怕你见到我眼角的泪 我怕我回头后在也无法这样走开 当初的承诺 我说“如果那天你不喜欢我了，那么我就离开，只要你说一句让我履行诺言，我就走，不会在出现在你面前” 今天 果然这一天到来了 针刺般的心痛 好像被撕碎一样的痛 让我快无法呼吸了 可我却无法留下来 为了我的诺言 为了你 我走了 在也不会回来了 我会找一个安静的地方 从此 生活在那里 想念我们曾在一起的一点一滴 直到老去 ………………………………………………………………………………………………………… 我看到了 那棵高大的梧桐树下你盘膝而坐 那么安详宁静 却没有一丝生的气息 我走过去 发现你的嘴角擎着笑意 如此温暖 可是为什么 无论我如何叫你唤你你都没有一丝一毫的反应 是对我的惩罚 还是我永远的失去你了 你看看我 睁开眼睛看看我 我来找你了 我来向你认错 我来告诉你我不能没有你 我的生活不能没有你 我的整个世界都不能没有你啊 你醒醒醒醒啊 不要不理我 难道我现在哭成这个样子你有不哄我了么 你看我的眼睛 早已成灰色 这么多年 它都快看不清东西了 你还是不回来么 你在不回来我永远到看不到你了 回来啊 …………………………………………………… 已经过了多少年了 忘记了 只记得我一遍一遍的回忆我们在一起的一点一滴 然后我觉得至少我还是幸福的 因为我还有回忆 然后我笑了 我知道 那是一种很幸福的笑 然后继续回忆 我知道 她来了 是她来找我来了 我好高兴 可是 我却在也不能动了 在也不能看她一眼了 在也不能宠她了 在也不能哄她了 在也不能在她身边了 我 走了 这次是真的走了 这个世界上只剩下我的身体 在也没有意识的身体了 这个世界在也没有我的存在了 …………","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『三』","slug":"canpian-3","date":"2010-03-30T09:30:05.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/03/30/canpian-3/","link":"","permalink":"https://ojdev.github.io/2010/03/30/canpian-3/","excerpt":"","text":"她一直重复着说不要哭不要哭，我离开就是了，我在也不惹你生气了。不要哭了，我这就走了，你继续拜堂成亲，好了好了。 然后她就转身走了，走到门口，回眸，一笑，释然的笑。好像给人的感觉是，绝望？放弃？ 人们都看到了，她离开的方向是，忘川奈河！ 这样的成亲，被她搅了这一下，似乎谁都不把心思放在这婚礼上了，人们互相看了看，然后齐齐的喊了声“糟了，不好！！她去了忘川奈河！” 然后所有人都疯了一样的朝向她离去的方向飞奔，妄想在她喝下那位婆婆的茶之前将她追回来。可是，一心想忘却的人，真的追的回来么。 那新娘突然生出一种感觉！感觉失去了什么在也找不回来的感觉，可以给她带来这种感觉的人只有一个，就是刚刚搅她拜堂，抱着她说爱她无法放开她的那个人，可是她后来走了，说她离开不回来了。为什么感觉欠了她什么？ 她不要这样了，掀了盖头，不顾一切的也朝着那个方向追去。 …… 忘川的对岸开着洁白的花，有时能看到花，但有花的时候绝不会有叶子，有叶子的时候绝没有花，那，也许就是彼岸花了吧，其实这只是我眼中的彼岸花，其实那花，每个人看到的颜色样子都是不同的，每一次看到的样子也是不同的，但是，那花始终不会花叶同在。为什么？ “婆婆” “你终于还是来了” “是啊，我来了，当初你说我终是会来找你的，原想，是在我那大去之期的，却不想是现在这种情况下” “你，当真要放下么” “不放又如何” “哎” “婆婆，茶好了么？也许忘却才是最好的吧” “好了，你真的决定了么” 端起那杯看似滚烫其实冰冷的茶，一口饮尽，没有一丝味道。 没有一点感觉。 然后，将茶杯轻轻放到身边的几上，轻扬唇角，回头最后一眼看下刺目的阳光。 当人们都感到的时候，只看到了这一幕，她说“我是个容易绝望和放弃的人，她放手了，我就不会在去争取了” 她说“也许我忘却了才是最好的” 那个一身红衣喜服的女子赶到的时候只听到这句话，当她不顾一切的冲到她的身边的时候，她知道，一切都晚了，她欠她的，永远也还不清了。 笑，渐渐凝固在脸上，她想在抬手摸摸她的脸，却感觉眼睛沉重的没有一丝力气，她只能强撑着说“要……幸福，带着我的那一份……” …… 也许，千年，只在一瞬间。也许，爱恋，只在一念间……","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"残篇『二』","slug":"canpian-2","date":"2010-03-30T09:29:09.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/03/30/canpian-2/","link":"","permalink":"https://ojdev.github.io/2010/03/30/canpian-2/","excerpt":"","text":"我倚在树干上，疲累的没了知觉，我不知道我还能坚持多久，或许下一秒我就要灰飞烟灭了。 我苦笑。 只能苦笑。 生命中最后的一瞬时，竟连她最后的一面都见不到。 树上的花又落了，很美啊，美的眩目，为什么我看不到那花瓣背后的太阳，那刺目的光芒，让我想流泪。 生死由命，许是真的大限将至了吧，我却觉得我突然间释怀了呢。 太阳，太阳背后有什么呢？是不是在那背后就是幸福呢，不会有生离，也不会有死别，更不会有痛彻心扉的无奈。 十年生死两茫茫，自难忘，不思量…… 是惩罚么？ 我不过是想见她而已，又不是犯了什么天大的罪孽，老天你何苦这样给我惩罚？ 这许多年，我只是想在她旁边看着她而已。 大人，我，走了，再也不会回来了。 …… 狐，原谅我，原谅我不能陪在你身边。","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"【花语】-红豆","slug":"cloves-hongdou","date":"2010-03-28T09:28:21.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/03/28/cloves-hongdou/","link":"","permalink":"https://ojdev.github.io/2010/03/28/cloves-hongdou/","excerpt":"","text":"红豆，相思。 醒来，已是早晨，不知道昨天走了多久，只记得，丁香，到处都是丁香，每一片花瓣上，都有一小块记忆，却不连贯。但是，心里，却痛苦的无以复加，所以，我是逃开的，开始我可以很镇定的走，然后，我开始奔跑。 身上沾了露水，凉凉的。 丁香，那个花妖。 我是长生的。所以我是痛苦的，因为我无法记得所有的事情，那是，锥心刺骨的痛苦。 起身，朝着前方，不知名的地方，继续走。 我不知道我的长生有什么意义，我只记得，我一直这样，一直走一直走，走了很久了。 “请留步。” 软软的声音，却不知道人在那，我环顾四周，没有发现有人。 “大人，丁香可好？” 我一震！丁香，那个回忆的花妖。 我的前方，闪起一缕红色的光辉，然后光辉中站起一个美丽的女子，红色眼眸，及腰黑丝。头上，红豆攒成的发卡，耳上，精致的红豆耳饰。 “红豆” “相思红豆”那女子这样说到。 “那么，你也是花妖。” 那女子掩面轻笑“大人，吾已列仙班” “那么，是花仙” “仙又如何，妖又如何” “上仙喊住我，有何事？” “问大人，那丁香，现今如何？” “调皮的女子” 我苦笑着说，如何，我不知道呢，那女子让我看到了什么，让我心痛，我，只想着如何逃脱了。 “红豆是相思的，丁香是回忆的，如果丁香冒犯了大人，红豆在此替丁香给大人道歉，望大人海涵” “不怪” “大人可知忘川三途？” “相传有一条路叫黄泉路.有一条河叫忘川.河上有一座桥叫奈何桥.走过奈何桥有一个土台叫望乡台.望乡台边有个老妇人在卖孟婆汤.忘川边有一块石头叫三生石.孟婆汤让你忘了一切.三生石记载着你的前世今生.我们走过奈何桥.在望乡台上看最后一眼人间.喝杯忘川水煮.”今生有缘无份”又何必强求？ ” “上仙何意？” “大人莫怪，小仙想说，大人，既然累心的无法拼凑出完整的回忆，那么，何不去见见望乡石旁那位老妇人？” “是啊，忘记了，都忘记了呢。” “大人可还记得，行走世间是为了什么？” “不记得了。流逝了千年，已然忘却。” “既已忘却，何必在寻？” 我笑笑，不知如何与这花仙继续。转身走开，我，也许是应该去忘川了。 相思，何处寻？ 花。 那位大人，可否放下呢？一个人在世间行走千年，由印刻心底，然后逐渐忘却，然后，一切都破碎掉。 却因为残存的碎片无法忘却。 殊不知，生命是循环往复的。你固执的不肯去忘川而行走世间，却不知，那个人，已在你身边擦身而过了几千年，因为你只记得曾经的那个她而忽略了重新走到你身边的那个人，还是她。 身后有翅膀收拢的声音，乌鸦吗？ “大人” “去忘川了吗？” “是呢，大人呢？也去吗？” “不” 清浅的微笑“大人，为何也放不开呢？” “吾有何放不开？” “大人自知。” 展翅，飞向天空，那黑色的羽翼，和长及脚裸的黑发。犹如她的心一样落寞。","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"花语","slug":"花语","permalink":"https://ojdev.github.io/tags/%E8%8A%B1%E8%AF%AD/"}]},{"title":"残篇『一』","slug":"canpian-1","date":"2010-03-20T09:26:17.000Z","updated":"2021-07-22T03:07:02.248Z","comments":true,"path":"2010/03/20/canpian-1/","link":"","permalink":"https://ojdev.github.io/2010/03/20/canpian-1/","excerpt":"","text":"穿着那一身红衣，那样的美艳不可芳物。从早上她离开等到现在，星星都挤满了深邃的天空，为什么你依然没有回来。 我这身红衣还穿给谁看？ 观星空，数着星星。 一颗； 二颗； 三颗； 四颗； 五颗； 六颗； 七颗； 八颗； 九颗； 十颗； …… 一万七千八百九十五； 一万七千八百九十六； …… 三万九千一百一十一； …… “别数了，启明星都现了，别数了！” “不要在数了，不要！”哭了，为了那个数着星星等待的人。 可依然阻止不了那让人看了都心碎的行为。 哐啷一声，所有人都愣住，那个，数星星的人一直等待的人，回来了。 刺骨的剑掉在地上。 “我回来了” “是我，我回来了。” 轻轻偏过头，身子在也站立不住，颓然倒下，似乎已经不带一丝的眷恋一样。 “不，不要” 冲过去抱起那个身子，绵软无力的身体，逐渐冷了下去，在也没有一丝温度，可嘴角依然带着笑，幸福的笑。 …… 终于还是没能嫁给你，是天意，还是被捉弄。 为什么我什么都感觉不到了，只听到一个声音不停的叫着我的名字，对那个声音我是那样的眷恋，可我实在是在也没有力气睁开眼睛看一眼那个人，那个让我眷恋一生的人……","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"}]},{"title":"【花语】-丁香","slug":"cloves-dingxiang","date":"2010-02-05T09:11:07.000Z","updated":"2021-07-22T03:07:02.252Z","comments":true,"path":"2010/02/05/cloves-dingxiang/","link":"","permalink":"https://ojdev.github.io/2010/02/05/cloves-dingxiang/","excerpt":"","text":"丁香，回忆； 我起身，望着头上满树盛放的丁香花。感觉很熟悉，却想不起什么，我知道，我所拥有的。只是残缺不全的记忆。 在尘世游荡，已经忘记了计算年份，一世，轮回，麻木的看着世间百态，本可以离开的，却因为眷恋着什么不肯走，看到丁香，想起，似乎有一份回忆，不知多久，模糊不清，只是感觉，似乎也有同样的花，也有同样的晴空，模糊的记忆中还有一双温暖的手。 “没了那双紧握的手，我会迷失方向，找不到我应该去那里，那个人的气息，那个人手心的温暖”。 “你要去哪？” 杂乱的思考被打断，我回头。发现树下站着一个美丽的女子。华发紫眸，眉清目秀。 “姑娘认得我？” “自然知道，游荡尘世之人。”女子脸上现出淡淡的忧伤“所有的花神花妖都知道你，还有与你一起的人，或者其他的什么。” 我走向她，想从她的眼神中看到什么，却只看到深邃的紫眸，那种深邃直透内心，让我突然想起很久很久以前的事情，一瞬间心痛！如针刺一般，一瞬间，流水模糊眼眶。 “你说过，眼是人的灵，透过眼睛，可以看到一个人的所有，我是花妖，丁香花妖，透过我的眼睛，却可以看到你的回忆，你深藏在心底无法忘却却有不敢触碰的回忆。” 丁香花，回忆，内心深处，无法忘却又不敢触碰的回忆。 “我游荡尘世已经不知道多少年了” “你是长生的,却是痛苦的。” “你问我去那？” “这个世界上，每一种花代表一种语言，你能遇到多少种？今后你还会遇到更多的花。我不知道我为什么叫住你，也许，是因为那个女子。是她告诉我，你是孤独的，流转于世间，不得解脱。” “女子？她们，还好吧。” “你知道，与你相同，得了长生，并不一定幸福。” 我转身，朝向一个方向走，我是游荡的人，所以不会停留在一个地方，丁香花妖，回忆的妖。 眼前遍开的丁香，簌簌纷飞的花瓣，犹如破碎的记忆，虽然无法抓在手里，但却从眼前不断的划过。偏头，依然看到不远的地方，落下那碎片，触手可及，却无法去抓在手里，那是心底的痛，无法拼凑。却不凋零。 无法回头，因为后面是那只让我陷入回忆的妖，前方，是纷飞的丁香，记忆的碎片，我，也许可以走出记忆的碎片，但我知道我是无法走出深邃的记忆。 踏着一地丁香，走出破碎的记忆。 花 那个人走了，在从我的眼睛里看到他内心深处不敢碰触却无法忘却的记忆之后走了。 孤独，落寞。 一个人得了长生，却不一定幸福，无尽的岁月会将他的记忆逐渐撕裂成碎片。 他会记得很多事，但是时间久了，会变得残缺不全。无法拼凑在一起，那是一种痛苦。因为有着无限的回忆，却没有完整的回忆。而那些完整的回忆，却不敢触碰，一碰到，泪流满面，锥心刺骨。 所以，他不断的行走，忘了时间忘了方向忘了岁月忘了自己为什么行走。 天上掉下一根黑羽，乌鸦来了。乌鸦，与他一样，长生的，孤独的。 收拢黑色的翅膀，站在我身后。 许久。 “他走了？” “我是回忆的花妖，我将他残缺的记忆补全。他看到了自己内心深处的记忆，带着眼泪，离开。” “自己折磨自己” “你又何尝不是” “丁香，别让我看到我的记忆” “那就不要看我的眼睛” “丁香，后会有期” “这就走了？” “我也是游荡的” 展开黑色的翅膀，飞向天际。 回忆，长留心底。","categories":[{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"花语","slug":"花语","permalink":"https://ojdev.github.io/tags/%E8%8A%B1%E8%AF%AD/"}]}],"categories":[{"name":"知识储备","slug":"知识储备","permalink":"https://ojdev.github.io/categories/%E7%9F%A5%E8%AF%86%E5%82%A8%E5%A4%87/"},{"name":"收集","slug":"收集","permalink":"https://ojdev.github.io/categories/%E6%94%B6%E9%9B%86/"},{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/categories/DevOps/"},{"name":"家庭服务","slug":"家庭服务","permalink":"https://ojdev.github.io/categories/%E5%AE%B6%E5%BA%AD%E6%9C%8D%E5%8A%A1/"},{"name":"狐说八道","slug":"狐说八道","permalink":"https://ojdev.github.io/categories/%E7%8B%90%E8%AF%B4%E5%85%AB%E9%81%93/"}],"tags":[{"name":"pwsh","slug":"pwsh","permalink":"https://ojdev.github.io/tags/pwsh/"},{"name":"powershell","slug":"powershell","permalink":"https://ojdev.github.io/tags/powershell/"},{"name":"沈阳","slug":"沈阳","permalink":"https://ojdev.github.io/tags/%E6%B2%88%E9%98%B3/"},{"name":"Docker","slug":"Docker","permalink":"https://ojdev.github.io/tags/Docker/"},{"name":"kubectl","slug":"kubectl","permalink":"https://ojdev.github.io/tags/kubectl/"},{"name":"远程管理","slug":"远程管理","permalink":"https://ojdev.github.io/tags/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"},{"name":"NAS","slug":"NAS","permalink":"https://ojdev.github.io/tags/NAS/"},{"name":"Jellyfin","slug":"Jellyfin","permalink":"https://ojdev.github.io/tags/Jellyfin/"},{"name":"Proxmox VE","slug":"Proxmox-VE","permalink":"https://ojdev.github.io/tags/Proxmox-VE/"},{"name":"PVE","slug":"PVE","permalink":"https://ojdev.github.io/tags/PVE/"},{"name":"docker","slug":"docker","permalink":"https://ojdev.github.io/tags/docker/"},{"name":"docker-compose","slug":"docker-compose","permalink":"https://ojdev.github.io/tags/docker-compose/"},{"name":"homeassistan","slug":"homeassistan","permalink":"https://ojdev.github.io/tags/homeassistan/"},{"name":"小米","slug":"小米","permalink":"https://ojdev.github.io/tags/%E5%B0%8F%E7%B1%B3/"},{"name":"格力","slug":"格力","permalink":"https://ojdev.github.io/tags/%E6%A0%BC%E5%8A%9B/"},{"name":"qBittorrent","slug":"qBittorrent","permalink":"https://ojdev.github.io/tags/qBittorrent/"},{"name":"松花江","slug":"松花江","permalink":"https://ojdev.github.io/tags/%E6%9D%BE%E8%8A%B1%E6%B1%9F/"},{"name":"架构","slug":"架构","permalink":"https://ojdev.github.io/tags/%E6%9E%B6%E6%9E%84/"},{"name":"windows-terminal","slug":"windows-terminal","permalink":"https://ojdev.github.io/tags/windows-terminal/"},{"name":"wsl","slug":"wsl","permalink":"https://ojdev.github.io/tags/wsl/"},{"name":"DevOps","slug":"DevOps","permalink":"https://ojdev.github.io/tags/DevOps/"},{"name":"Azure DevOps","slug":"Azure-DevOps","permalink":"https://ojdev.github.io/tags/Azure-DevOps/"},{"name":"SonarQube","slug":"SonarQube","permalink":"https://ojdev.github.io/tags/SonarQube/"},{"name":"k8s","slug":"k8s","permalink":"https://ojdev.github.io/tags/k8s/"},{"name":"debian9","slug":"debian9","permalink":"https://ojdev.github.io/tags/debian9/"},{"name":"hyperV","slug":"hyperV","permalink":"https://ojdev.github.io/tags/hyperV/"},{"name":"minikube","slug":"minikube","permalink":"https://ojdev.github.io/tags/minikube/"},{"name":"kubernetes","slug":"kubernetes","permalink":"https://ojdev.github.io/tags/kubernetes/"},{"name":"windows10","slug":"windows10","permalink":"https://ojdev.github.io/tags/windows10/"},{"name":"RabbitMQ","slug":"RabbitMQ","permalink":"https://ojdev.github.io/tags/RabbitMQ/"},{"name":".net core","slug":"net-core","permalink":"https://ojdev.github.io/tags/net-core/"},{"name":"EventBus","slug":"EventBus","permalink":"https://ojdev.github.io/tags/EventBus/"},{"name":"Asp.Net Core","slug":"Asp-Net-Core","permalink":"https://ojdev.github.io/tags/Asp-Net-Core/"},{"name":"残篇","slug":"残篇","permalink":"https://ojdev.github.io/tags/%E6%AE%8B%E7%AF%87/"},{"name":"C#","slug":"C","permalink":"https://ojdev.github.io/tags/C/"},{"name":"地震","slug":"地震","permalink":"https://ojdev.github.io/tags/%E5%9C%B0%E9%9C%87/"},{"name":"哈尔滨","slug":"哈尔滨","permalink":"https://ojdev.github.io/tags/%E5%93%88%E5%B0%94%E6%BB%A8/"},{"name":"谜案","slug":"谜案","permalink":"https://ojdev.github.io/tags/%E8%B0%9C%E6%A1%88/"},{"name":"盗梦","slug":"盗梦","permalink":"https://ojdev.github.io/tags/%E7%9B%97%E6%A2%A6/"},{"name":"LINQ","slug":"LINQ","permalink":"https://ojdev.github.io/tags/LINQ/"},{"name":"asp.net","slug":"asp-net","permalink":"https://ojdev.github.io/tags/asp-net/"},{"name":"花语","slug":"花语","permalink":"https://ojdev.github.io/tags/%E8%8A%B1%E8%AF%AD/"}]}